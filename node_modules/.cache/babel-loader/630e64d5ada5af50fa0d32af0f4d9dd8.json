{"ast":null,"code":"import { isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { Switch } from '@syncfusion/ej2-buttons';\nimport { extend } from '@syncfusion/ej2-base';\nimport { isEditable, addRemoveActiveClasses, getComplexFieldID, getObject } from '../base/util';\n/**\n * `ToggleEditCell` is used to handle boolean cell type editing.\n * @hidden\n */\n\nvar ToggleEditCell =\n/** @class */\nfunction () {\n  function ToggleEditCell(parentObject) {\n    this.activeClasses = ['e-selectionbackground', 'e-active'];\n    this.parent = parentObject;\n  }\n\n  ToggleEditCell.prototype.create = function (args) {\n    var col = args.column;\n    var classNames = 'e-field e-boolcell';\n\n    if (col.type === 'checkbox') {\n      classNames = 'e-field e-boolcell e-edit-checkselect';\n    }\n\n    var complexField = getComplexFieldID(args.column.field);\n    return this.parent.createElement('input', {\n      className: classNames,\n      attrs: {\n        type: 'checkbox',\n        value: args.value,\n        'e-mappinguid': col.uid,\n        id: this.parent.element.id + complexField,\n        name: complexField\n      }\n    });\n  };\n\n  ToggleEditCell.prototype.read = function (element) {\n    return element.checked;\n  };\n\n  ToggleEditCell.prototype.write = function (args) {\n    var chkBoxElement;\n    var checkState; // let isAddRow : boolean =  args.requestType === 'add' || args.row.classList.contains('e-addedrow');\n\n    if (!isNullOrUndefined(args.row)) {\n      chkBoxElement = args.row.querySelector('.e-edit-checkselect');\n    }\n\n    if (getObject(args.column.field, args.rowData)) {\n      checkState = JSON.parse(getObject(args.column.field, args.rowData).toString().toLowerCase());\n    }\n\n    if (!isNullOrUndefined(chkBoxElement)) {\n      this.editType = this.parent.editSettings.mode;\n      this.editRow = args.row;\n\n      if (args.requestType !== 'add') {\n        var row = this.parent.getRowObjectFromUID(args.row.getAttribute('data-uid'));\n        checkState = row ? row.isSelected : false;\n      }\n\n      addRemoveActiveClasses.apply(void 0, [[].slice.call(args.row.querySelectorAll('.e-rowcell')), checkState].concat(this.activeClasses));\n    }\n\n    this.obj = new Switch(extend({\n      label: this.parent.editSettings.mode !== 'Dialog' ? ' ' : args.column.headerText,\n      checked: checkState,\n      disabled: !isEditable(args.column, args.requestType, args.element),\n      enableRtl: this.parent.enableRtl,\n      change: this.switchModeChange.bind(this)\n    }, args.column.edit.params));\n    this.obj.appendTo(args.element);\n  };\n\n  ToggleEditCell.prototype.switchModeChange = function (args) {\n    if (this.editRow && this.editType !== 'Dialog') {\n      var addClass = false;\n\n      if (!args.checked) {\n        this.editRow.removeAttribute('aria-selected');\n      } else {\n        addClass = true;\n        this.editRow.setAttribute('aria-selected', addClass.toString());\n      }\n\n      addRemoveActiveClasses.apply(void 0, [[].slice.call(this.editRow.querySelectorAll('.e-rowcell')), addClass].concat(this.activeClasses));\n    }\n  };\n\n  ToggleEditCell.prototype.destroy = function () {\n    if (this.obj) {\n      this.obj.destroy();\n    }\n  };\n\n  return ToggleEditCell;\n}();\n\nexport { ToggleEditCell };","map":{"version":3,"sources":["C:/CN2/workspace-trunk/kain-front-end/node_modules/@syncfusion/ej2-grids/src/grid/renderer/toggleswitch-edit-cell.js"],"names":["isNullOrUndefined","Switch","extend","isEditable","addRemoveActiveClasses","getComplexFieldID","getObject","ToggleEditCell","parentObject","activeClasses","parent","prototype","create","args","col","column","classNames","type","complexField","field","createElement","className","attrs","value","uid","id","element","name","read","checked","write","chkBoxElement","checkState","row","querySelector","rowData","JSON","parse","toString","toLowerCase","editType","editSettings","mode","editRow","requestType","getRowObjectFromUID","getAttribute","isSelected","apply","slice","call","querySelectorAll","concat","obj","label","headerText","disabled","enableRtl","change","switchModeChange","bind","edit","params","appendTo","addClass","removeAttribute","setAttribute","destroy"],"mappings":"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","sourcesContent":["import { isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { Switch } from '@syncfusion/ej2-buttons';\nimport { extend } from '@syncfusion/ej2-base';\nimport { isEditable, addRemoveActiveClasses, getComplexFieldID, getObject } from '../base/util';\n/**\n * `ToggleEditCell` is used to handle boolean cell type editing.\n * @hidden\n */\nvar ToggleEditCell = /** @class */ (function () {\n    function ToggleEditCell(parentObject) {\n        this.activeClasses = ['e-selectionbackground', 'e-active'];\n        this.parent = parentObject;\n    }\n    ToggleEditCell.prototype.create = function (args) {\n        var col = args.column;\n        var classNames = 'e-field e-boolcell';\n        if (col.type === 'checkbox') {\n            classNames = 'e-field e-boolcell e-edit-checkselect';\n        }\n        var complexField = getComplexFieldID(args.column.field);\n        return this.parent.createElement('input', {\n            className: classNames, attrs: {\n                type: 'checkbox', value: args.value, 'e-mappinguid': col.uid,\n                id: this.parent.element.id + complexField,\n                name: complexField\n            }\n        });\n    };\n    ToggleEditCell.prototype.read = function (element) {\n        return element.checked;\n    };\n    ToggleEditCell.prototype.write = function (args) {\n        var chkBoxElement;\n        var checkState;\n        // let isAddRow : boolean =  args.requestType === 'add' || args.row.classList.contains('e-addedrow');\n        if (!isNullOrUndefined(args.row)) {\n            chkBoxElement = args.row.querySelector('.e-edit-checkselect');\n        }\n        if (getObject(args.column.field, args.rowData)) {\n            checkState = JSON.parse(getObject(args.column.field, args.rowData).toString().toLowerCase());\n        }\n        if (!isNullOrUndefined(chkBoxElement)) {\n            this.editType = this.parent.editSettings.mode;\n            this.editRow = args.row;\n            if (args.requestType !== 'add') {\n                var row = this.parent.getRowObjectFromUID(args.row.getAttribute('data-uid'));\n                checkState = row ? row.isSelected : false;\n            }\n            addRemoveActiveClasses.apply(void 0, [[].slice.call(args.row.querySelectorAll('.e-rowcell')), checkState].concat(this.activeClasses));\n        }\n        this.obj = new Switch(extend({\n            label: this.parent.editSettings.mode !== 'Dialog' ? ' ' : args.column.headerText,\n            checked: checkState,\n            disabled: !isEditable(args.column, args.requestType, args.element), enableRtl: this.parent.enableRtl,\n            change: this.switchModeChange.bind(this)\n        }, args.column.edit.params));\n        this.obj.appendTo(args.element);\n    };\n    ToggleEditCell.prototype.switchModeChange = function (args) {\n        if (this.editRow && this.editType !== 'Dialog') {\n            var addClass = false;\n            if (!args.checked) {\n                this.editRow.removeAttribute('aria-selected');\n            }\n            else {\n                addClass = true;\n                this.editRow.setAttribute('aria-selected', addClass.toString());\n            }\n            addRemoveActiveClasses.apply(void 0, [[].slice.call(this.editRow.querySelectorAll('.e-rowcell')), addClass].concat(this.activeClasses));\n        }\n    };\n    ToggleEditCell.prototype.destroy = function () {\n        if (this.obj) {\n            this.obj.destroy();\n        }\n    };\n    return ToggleEditCell;\n}());\nexport { ToggleEditCell };\n"]},"metadata":{},"sourceType":"module"}