{"ast":null,"code":"import { isNullOrUndefined, extend, isBlazor, updateBlazorTemplate } from '@syncfusion/ej2-base';\nimport { doesImplementInterface, setStyleAndAttributes, appendChildren, extendObjWithFn } from '../base/util';\nimport { createCheckBox } from '@syncfusion/ej2-buttons';\nimport { foreignKeyData } from '../base/constant';\n/**\n * CellRenderer class which responsible for building cell content.\n * @hidden\n */\n\nvar CellRenderer =\n/** @class */\nfunction () {\n  function CellRenderer(parent, locator) {\n    this.localizer = locator.getService('localization');\n    this.formatter = locator.getService('valueFormatter');\n    this.parent = parent;\n    this.element = this.parent.createElement('TD', {\n      className: 'e-rowcell',\n      attrs: {\n        role: 'gridcell',\n        tabindex: '-1'\n      }\n    });\n    this.rowChkBox = this.parent.createElement('input', {\n      className: 'e-checkselect',\n      attrs: {\n        'type': 'checkbox'\n      }\n    });\n  }\n  /**\n   * Function to return the wrapper for the TD content\n   * @returns string\n   */\n\n\n  CellRenderer.prototype.getGui = function () {\n    return '';\n  };\n  /**\n   * Function to format the cell value.\n   * @param  {Column} column\n   * @param  {Object} value\n   * @param  {Object} data\n   */\n\n\n  CellRenderer.prototype.format = function (column, value, data) {\n    if (!isNullOrUndefined(column.format)) {\n      value = this.formatter.toView(value, column.getFormatter());\n    }\n\n    return isNullOrUndefined(value) ? '' : value.toString();\n  };\n\n  CellRenderer.prototype.evaluate = function (node, cell, data, attributes, fData, isEdit) {\n    var _a;\n\n    var result;\n\n    if (cell.column.template) {\n      var literals = ['index'];\n      var dummyData = extendObjWithFn({}, data, (_a = {}, _a[foreignKeyData] = fData, _a.column = cell.column, _a));\n      var templateID = this.parent.element.id + cell.column.uid;\n      var str = 'isStringTemplate';\n      var index = 'index';\n\n      if (isBlazor() && isEdit) {\n        var rNumber = this.parent.editSettings.mode !== 'Batch' ? parseInt(attributes[index], 10) : null;\n        result = cell.column.getColumnTemplate()(extend({\n          'index': attributes[literals[0]]\n        }, dummyData), this.parent, 'template', templateID, this.parent[str], rNumber);\n        window[templateID] = null;\n\n        if (this.parent.editSettings.mode !== 'Batch') {\n          updateBlazorTemplate(templateID, 'Template', cell.column, false);\n        }\n      } else {\n        result = cell.column.getColumnTemplate()(extend({\n          'index': attributes[literals[0]]\n        }, dummyData), this.parent, 'template', templateID, this.parent[str]);\n      }\n\n      appendChildren(node, result);\n      this.parent.notify('template-result', {\n        template: result\n      });\n      result = null;\n      node.setAttribute('aria-label', node.innerText + ' is template cell' + ' column header ' + cell.column.headerText);\n      return false;\n    }\n\n    return true;\n  };\n  /**\n   * Function to invoke the custom formatter available in the column object.\n   * @param  {Column} column\n   * @param  {Object} value\n   * @param  {Object} data\n   */\n\n\n  CellRenderer.prototype.invokeFormatter = function (column, value, data) {\n    if (!isNullOrUndefined(column.formatter)) {\n      if (doesImplementInterface(column.formatter, 'getValue')) {\n        var formatter = column.formatter;\n        value = new formatter().getValue(column, data);\n      } else if (typeof column.formatter === 'function') {\n        value = column.formatter(column, data);\n      } else {\n        value = column.formatter.getValue(column, data);\n      }\n    }\n\n    return value;\n  };\n  /**\n   * Function to render the cell content based on Column object.\n   * @param  {Column} column\n   * @param  {Object} data\n   * @param  {{[x:string]:Object}} attributes?\n   * @param  {Element}\n   */\n\n\n  CellRenderer.prototype.render = function (cell, data, attributes, isExpand, isEdit) {\n    return this.refreshCell(cell, data, attributes, isEdit);\n  };\n  /**\n   * Function to refresh the cell content based on Column object.\n   * @param  {Column} column\n   * @param  {Object} data\n   * @param  {{[x:string]:Object}} attributes?\n   * @param  {Element}\n   */\n\n\n  CellRenderer.prototype.refreshTD = function (td, cell, data, attributes) {\n    var isEdit = this.parent.editSettings.mode === 'Batch' && td.classList.contains('e-editedbatchcell');\n    var node = this.refreshCell(cell, data, attributes, isEdit);\n    td.innerHTML = '';\n    td.setAttribute('aria-label', node.getAttribute('aria-label'));\n    var elements = [].slice.call(node.childNodes);\n\n    for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {\n      var elem = elements_1[_i];\n      td.appendChild(elem);\n    }\n  };\n\n  CellRenderer.prototype.refreshCell = function (cell, data, attributes, isEdit) {\n    var _a;\n\n    var node = this.element.cloneNode();\n    var column = cell.column;\n    var fData;\n\n    if (cell.isForeignKey) {\n      fData = cell.foreignKeyData[0] || (_a = {}, _a[column.foreignKeyValue] = column.format ? null : '', _a);\n    } //Prepare innerHtml\n\n\n    var innerHtml = this.getGui();\n    var value = cell.isForeignKey ? this.getValue(column.foreignKeyValue, fData, column) : this.getValue(column.field, data, column);\n\n    if ((column.type === 'date' || column.type === 'datetime') && !isNullOrUndefined(value)) {\n      value = new Date(value);\n    }\n\n    value = this.format(column, value, data);\n    innerHtml = value.toString();\n\n    if (column.type === 'boolean' && !column.displayAsCheckBox) {\n      var localeStr = value !== 'true' && value !== 'false' ? null : value === 'true' ? 'True' : 'False';\n      innerHtml = localeStr ? this.localizer.getConstant(localeStr) : innerHtml;\n    }\n\n    var fromFormatter = this.invokeFormatter(column, value, data);\n    innerHtml = !isNullOrUndefined(column.formatter) ? isNullOrUndefined(fromFormatter) ? '' : fromFormatter.toString() : innerHtml;\n    node.setAttribute('aria-label', (innerHtml === '' ? 'empty' : innerHtml) + ' column header ' + cell.column.headerText);\n\n    if (!isNullOrUndefined(cell.column.headerText)) {\n      node.setAttribute('aria-label', innerHtml + ' column header ' + cell.column.headerText);\n    }\n\n    if (this.evaluate(node, cell, data, attributes, fData, isEdit) && column.type !== 'checkbox') {\n      this.appendHtml(node, innerHtml, column.getDomSetter ? column.getDomSetter() : 'innerHTML');\n    } else if (column.type === 'checkbox') {\n      node.classList.add('e-gridchkbox');\n      node.setAttribute('aria-label', 'checkbox');\n\n      if (this.parent.selectionSettings.persistSelection) {\n        value = value === 'true';\n      } else {\n        value = false;\n      }\n\n      var checkWrap = createCheckBox(this.parent.createElement, false, {\n        checked: value,\n        label: ' '\n      });\n      checkWrap.insertBefore(this.rowChkBox.cloneNode(), checkWrap.firstChild);\n      node.appendChild(checkWrap);\n    }\n\n    if (this.parent.checkAllRows === 'Check' && this.parent.enableVirtualization) {\n      cell.isSelected = true;\n    }\n\n    this.setAttributes(node, cell, attributes);\n\n    if (column.type === 'boolean' && column.displayAsCheckBox) {\n      var checked = isNaN(parseInt(value.toString(), 10)) ? value === 'true' : parseInt(value.toString(), 10) > 0;\n      var checkWrap = createCheckBox(this.parent.createElement, false, {\n        checked: checked,\n        label: ' '\n      });\n      node.innerHTML = '';\n      checkWrap.classList.add('e-checkbox-disabled');\n      node.appendChild(checkWrap);\n      node.setAttribute('aria-label', checked + ' column header ' + cell.column.headerText);\n    }\n\n    return node;\n  };\n  /**\n   * Function to specifies how the result content to be placed in the cell.\n   * @param  {Element} node\n   * @param  {string|Element} innerHtml\n   * @returns Element\n   */\n\n\n  CellRenderer.prototype.appendHtml = function (node, innerHtml, property) {\n    if (property === void 0) {\n      property = 'innerHTML';\n    }\n\n    node[property] = innerHtml;\n    return node;\n  };\n  /**\n   * @hidden\n   */\n\n\n  CellRenderer.prototype.setAttributes = function (node, cell, attributes) {\n    var column = cell.column;\n    this.buildAttributeFromCell(node, cell, column.type === 'checkbox');\n    setStyleAndAttributes(node, attributes);\n    setStyleAndAttributes(node, cell.attributes);\n\n    if (column.customAttributes) {\n      setStyleAndAttributes(node, column.customAttributes);\n    }\n\n    if (column.textAlign) {\n      node.style.textAlign = column.textAlign;\n    }\n\n    if (column.clipMode === 'Clip' || !column.clipMode && this.parent.clipMode === 'Clip') {\n      node.classList.add('e-gridclip');\n    } else if (column.clipMode === 'EllipsisWithTooltip' || !column.clipMode && this.parent.clipMode === 'EllipsisWithTooltip') {\n      node.classList.add('e-ellipsistooltip');\n    }\n  };\n\n  CellRenderer.prototype.buildAttributeFromCell = function (node, cell, isCheckBoxType) {\n    var attr = {};\n    var prop = {\n      'colindex': 'aria-colindex'\n    };\n    var classes = [];\n\n    if (cell.colSpan) {\n      attr.colSpan = cell.colSpan;\n    }\n\n    if (cell.rowSpan) {\n      attr.rowSpan = cell.rowSpan;\n    }\n\n    if (cell.isTemplate) {\n      classes.push('e-templatecell');\n    }\n\n    if (cell.isSelected) {\n      classes.push.apply(classes, ['e-selectionbackground', 'e-active']);\n\n      if (isCheckBoxType) {\n        node.querySelector('.e-frame').classList.add('e-check');\n      }\n    }\n\n    if (!isNullOrUndefined(cell.index)) {\n      attr[prop.colindex] = cell.index;\n    }\n\n    if (!cell.visible) {\n      classes.push('e-hide');\n    }\n\n    attr.class = classes;\n    setStyleAndAttributes(node, attr);\n  };\n\n  CellRenderer.prototype.getValue = function (field, data, column) {\n    return column.valueAccessor(field, data, column);\n  };\n\n  return CellRenderer;\n}();\n\nexport { CellRenderer };","map":{"version":3,"sources":["C:/CN2/workspace-trunk/kain-front-end/node_modules/@syncfusion/ej2-grids/src/grid/renderer/cell-renderer.js"],"names":["isNullOrUndefined","extend","isBlazor","updateBlazorTemplate","doesImplementInterface","setStyleAndAttributes","appendChildren","extendObjWithFn","createCheckBox","foreignKeyData","CellRenderer","parent","locator","localizer","getService","formatter","element","createElement","className","attrs","role","tabindex","rowChkBox","prototype","getGui","format","column","value","data","toView","getFormatter","toString","evaluate","node","cell","attributes","fData","isEdit","_a","result","template","literals","dummyData","templateID","id","uid","str","index","rNumber","editSettings","mode","parseInt","getColumnTemplate","window","notify","setAttribute","innerText","headerText","invokeFormatter","getValue","render","isExpand","refreshCell","refreshTD","td","classList","contains","innerHTML","getAttribute","elements","slice","call","childNodes","_i","elements_1","length","elem","appendChild","cloneNode","isForeignKey","foreignKeyValue","innerHtml","field","type","Date","displayAsCheckBox","localeStr","getConstant","fromFormatter","appendHtml","getDomSetter","add","selectionSettings","persistSelection","checkWrap","checked","label","insertBefore","firstChild","checkAllRows","enableVirtualization","isSelected","setAttributes","isNaN","property","buildAttributeFromCell","customAttributes","textAlign","style","clipMode","isCheckBoxType","attr","prop","classes","colSpan","rowSpan","isTemplate","push","apply","querySelector","colindex","visible","class","valueAccessor"],"mappings":"AAAA,SAASA,iBAAT,EAA4BC,MAA5B,EAAoCC,QAApC,EAA8CC,oBAA9C,QAA0E,sBAA1E;AACA,SAASC,sBAAT,EAAiCC,qBAAjC,EAAwDC,cAAxD,EAAwEC,eAAxE,QAA+F,cAA/F;AACA,SAASC,cAAT,QAA+B,yBAA/B;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA;;;;;AAIA,IAAIC,YAAY;AAAG;AAAe,YAAY;AAC1C,WAASA,YAAT,CAAsBC,MAAtB,EAA8BC,OAA9B,EAAuC;AACnC,SAAKC,SAAL,GAAiBD,OAAO,CAACE,UAAR,CAAmB,cAAnB,CAAjB;AACA,SAAKC,SAAL,GAAiBH,OAAO,CAACE,UAAR,CAAmB,gBAAnB,CAAjB;AACA,SAAKH,MAAL,GAAcA,MAAd;AACA,SAAKK,OAAL,GAAe,KAAKL,MAAL,CAAYM,aAAZ,CAA0B,IAA1B,EAAgC;AAAEC,MAAAA,SAAS,EAAE,WAAb;AAA0BC,MAAAA,KAAK,EAAE;AAAEC,QAAAA,IAAI,EAAE,UAAR;AAAoBC,QAAAA,QAAQ,EAAE;AAA9B;AAAjC,KAAhC,CAAf;AACA,SAAKC,SAAL,GAAiB,KAAKX,MAAL,CAAYM,aAAZ,CAA0B,OAA1B,EAAmC;AAAEC,MAAAA,SAAS,EAAE,eAAb;AAA8BC,MAAAA,KAAK,EAAE;AAAE,gBAAQ;AAAV;AAArC,KAAnC,CAAjB;AACH;AACD;;;;;;AAIAT,EAAAA,YAAY,CAACa,SAAb,CAAuBC,MAAvB,GAAgC,YAAY;AACxC,WAAO,EAAP;AACH,GAFD;AAGA;;;;;;;;AAMAd,EAAAA,YAAY,CAACa,SAAb,CAAuBE,MAAvB,GAAgC,UAAUC,MAAV,EAAkBC,KAAlB,EAAyBC,IAAzB,EAA+B;AAC3D,QAAI,CAAC5B,iBAAiB,CAAC0B,MAAM,CAACD,MAAR,CAAtB,EAAuC;AACnCE,MAAAA,KAAK,GAAG,KAAKZ,SAAL,CAAec,MAAf,CAAsBF,KAAtB,EAA6BD,MAAM,CAACI,YAAP,EAA7B,CAAR;AACH;;AACD,WAAO9B,iBAAiB,CAAC2B,KAAD,CAAjB,GAA2B,EAA3B,GAAgCA,KAAK,CAACI,QAAN,EAAvC;AACH,GALD;;AAMArB,EAAAA,YAAY,CAACa,SAAb,CAAuBS,QAAvB,GAAkC,UAAUC,IAAV,EAAgBC,IAAhB,EAAsBN,IAAtB,EAA4BO,UAA5B,EAAwCC,KAAxC,EAA+CC,MAA/C,EAAuD;AACrF,QAAIC,EAAJ;;AACA,QAAIC,MAAJ;;AACA,QAAIL,IAAI,CAACR,MAAL,CAAYc,QAAhB,EAA0B;AACtB,UAAIC,QAAQ,GAAG,CAAC,OAAD,CAAf;AACA,UAAIC,SAAS,GAAGnC,eAAe,CAAC,EAAD,EAAKqB,IAAL,GAAYU,EAAE,GAAG,EAAL,EAASA,EAAE,CAAC7B,cAAD,CAAF,GAAqB2B,KAA9B,EAAqCE,EAAE,CAACZ,MAAH,GAAYQ,IAAI,CAACR,MAAtD,EAA8DY,EAA1E,EAA/B;AACA,UAAIK,UAAU,GAAG,KAAKhC,MAAL,CAAYK,OAAZ,CAAoB4B,EAApB,GAAyBV,IAAI,CAACR,MAAL,CAAYmB,GAAtD;AACA,UAAIC,GAAG,GAAG,kBAAV;AACA,UAAIC,KAAK,GAAG,OAAZ;;AACA,UAAI7C,QAAQ,MAAMmC,MAAlB,EAA0B;AACtB,YAAIW,OAAO,GAAG,KAAKrC,MAAL,CAAYsC,YAAZ,CAAyBC,IAAzB,KAAkC,OAAlC,GAA4CC,QAAQ,CAAChB,UAAU,CAACY,KAAD,CAAX,EAAoB,EAApB,CAApD,GAA8E,IAA5F;AACAR,QAAAA,MAAM,GAAGL,IAAI,CAACR,MAAL,CAAY0B,iBAAZ,GAAgCnD,MAAM,CAAC;AAAE,mBAASkC,UAAU,CAACM,QAAQ,CAAC,CAAD,CAAT;AAArB,SAAD,EAAuCC,SAAvC,CAAtC,EAAyF,KAAK/B,MAA9F,EAAsG,UAAtG,EAAkHgC,UAAlH,EAA8H,KAAKhC,MAAL,CAAYmC,GAAZ,CAA9H,EAAgJE,OAAhJ,CAAT;AACAK,QAAAA,MAAM,CAACV,UAAD,CAAN,GAAqB,IAArB;;AACA,YAAI,KAAKhC,MAAL,CAAYsC,YAAZ,CAAyBC,IAAzB,KAAkC,OAAtC,EAA+C;AAC3C/C,UAAAA,oBAAoB,CAACwC,UAAD,EAAa,UAAb,EAAyBT,IAAI,CAACR,MAA9B,EAAsC,KAAtC,CAApB;AACH;AACJ,OAPD,MAQK;AACDa,QAAAA,MAAM,GAAGL,IAAI,CAACR,MAAL,CAAY0B,iBAAZ,GAAgCnD,MAAM,CAAC;AAAE,mBAASkC,UAAU,CAACM,QAAQ,CAAC,CAAD,CAAT;AAArB,SAAD,EAAuCC,SAAvC,CAAtC,EAAyF,KAAK/B,MAA9F,EAAsG,UAAtG,EAAkHgC,UAAlH,EAA8H,KAAKhC,MAAL,CAAYmC,GAAZ,CAA9H,CAAT;AACH;;AACDxC,MAAAA,cAAc,CAAC2B,IAAD,EAAOM,MAAP,CAAd;AACA,WAAK5B,MAAL,CAAY2C,MAAZ,CAAmB,iBAAnB,EAAsC;AAAEd,QAAAA,QAAQ,EAAED;AAAZ,OAAtC;AACAA,MAAAA,MAAM,GAAG,IAAT;AACAN,MAAAA,IAAI,CAACsB,YAAL,CAAkB,YAAlB,EAAgCtB,IAAI,CAACuB,SAAL,GAAiB,mBAAjB,GAAuC,iBAAvC,GAC5BtB,IAAI,CAACR,MAAL,CAAY+B,UADhB;AAEA,aAAO,KAAP;AACH;;AACD,WAAO,IAAP;AACH,GA5BD;AA6BA;;;;;;;;AAMA/C,EAAAA,YAAY,CAACa,SAAb,CAAuBmC,eAAvB,GAAyC,UAAUhC,MAAV,EAAkBC,KAAlB,EAAyBC,IAAzB,EAA+B;AACpE,QAAI,CAAC5B,iBAAiB,CAAC0B,MAAM,CAACX,SAAR,CAAtB,EAA0C;AACtC,UAAIX,sBAAsB,CAACsB,MAAM,CAACX,SAAR,EAAmB,UAAnB,CAA1B,EAA0D;AACtD,YAAIA,SAAS,GAAGW,MAAM,CAACX,SAAvB;AACAY,QAAAA,KAAK,GAAG,IAAIZ,SAAJ,GAAgB4C,QAAhB,CAAyBjC,MAAzB,EAAiCE,IAAjC,CAAR;AACH,OAHD,MAIK,IAAI,OAAOF,MAAM,CAACX,SAAd,KAA4B,UAAhC,EAA4C;AAC7CY,QAAAA,KAAK,GAAGD,MAAM,CAACX,SAAP,CAAiBW,MAAjB,EAAyBE,IAAzB,CAAR;AACH,OAFI,MAGA;AACDD,QAAAA,KAAK,GAAGD,MAAM,CAACX,SAAP,CAAiB4C,QAAjB,CAA0BjC,MAA1B,EAAkCE,IAAlC,CAAR;AACH;AACJ;;AACD,WAAOD,KAAP;AACH,GAdD;AAeA;;;;;;;;;AAOAjB,EAAAA,YAAY,CAACa,SAAb,CAAuBqC,MAAvB,GAAgC,UAAU1B,IAAV,EAAgBN,IAAhB,EAAsBO,UAAtB,EAAkC0B,QAAlC,EAA4CxB,MAA5C,EAAoD;AAChF,WAAO,KAAKyB,WAAL,CAAiB5B,IAAjB,EAAuBN,IAAvB,EAA6BO,UAA7B,EAAyCE,MAAzC,CAAP;AACH,GAFD;AAGA;;;;;;;;;AAOA3B,EAAAA,YAAY,CAACa,SAAb,CAAuBwC,SAAvB,GAAmC,UAAUC,EAAV,EAAc9B,IAAd,EAAoBN,IAApB,EAA0BO,UAA1B,EAAsC;AACrE,QAAIE,MAAM,GAAG,KAAK1B,MAAL,CAAYsC,YAAZ,CAAyBC,IAAzB,KAAkC,OAAlC,IAA6Cc,EAAE,CAACC,SAAH,CAAaC,QAAb,CAAsB,mBAAtB,CAA1D;AACA,QAAIjC,IAAI,GAAG,KAAK6B,WAAL,CAAiB5B,IAAjB,EAAuBN,IAAvB,EAA6BO,UAA7B,EAAyCE,MAAzC,CAAX;AACA2B,IAAAA,EAAE,CAACG,SAAH,GAAe,EAAf;AACAH,IAAAA,EAAE,CAACT,YAAH,CAAgB,YAAhB,EAA8BtB,IAAI,CAACmC,YAAL,CAAkB,YAAlB,CAA9B;AACA,QAAIC,QAAQ,GAAG,GAAGC,KAAH,CAASC,IAAT,CAActC,IAAI,CAACuC,UAAnB,CAAf;;AACA,SAAK,IAAIC,EAAE,GAAG,CAAT,EAAYC,UAAU,GAAGL,QAA9B,EAAwCI,EAAE,GAAGC,UAAU,CAACC,MAAxD,EAAgEF,EAAE,EAAlE,EAAsE;AAClE,UAAIG,IAAI,GAAGF,UAAU,CAACD,EAAD,CAArB;AACAT,MAAAA,EAAE,CAACa,WAAH,CAAeD,IAAf;AACH;AACJ,GAVD;;AAWAlE,EAAAA,YAAY,CAACa,SAAb,CAAuBuC,WAAvB,GAAqC,UAAU5B,IAAV,EAAgBN,IAAhB,EAAsBO,UAAtB,EAAkCE,MAAlC,EAA0C;AAC3E,QAAIC,EAAJ;;AACA,QAAIL,IAAI,GAAG,KAAKjB,OAAL,CAAa8D,SAAb,EAAX;AACA,QAAIpD,MAAM,GAAGQ,IAAI,CAACR,MAAlB;AACA,QAAIU,KAAJ;;AACA,QAAIF,IAAI,CAAC6C,YAAT,EAAuB;AACnB3C,MAAAA,KAAK,GAAGF,IAAI,CAACzB,cAAL,CAAoB,CAApB,MAA2B6B,EAAE,GAAG,EAAL,EAASA,EAAE,CAACZ,MAAM,CAACsD,eAAR,CAAF,GAA6BtD,MAAM,CAACD,MAAP,GAAgB,IAAhB,GAAuB,EAA7D,EAAiEa,EAA5F,CAAR;AACH,KAP0E,CAQ3E;;;AACA,QAAI2C,SAAS,GAAG,KAAKzD,MAAL,EAAhB;AACA,QAAIG,KAAK,GAAGO,IAAI,CAAC6C,YAAL,GAAoB,KAAKpB,QAAL,CAAcjC,MAAM,CAACsD,eAArB,EAAsC5C,KAAtC,EAA6CV,MAA7C,CAApB,GACR,KAAKiC,QAAL,CAAcjC,MAAM,CAACwD,KAArB,EAA4BtD,IAA5B,EAAkCF,MAAlC,CADJ;;AAEA,QAAI,CAACA,MAAM,CAACyD,IAAP,KAAgB,MAAhB,IAA0BzD,MAAM,CAACyD,IAAP,KAAgB,UAA3C,KAA0D,CAACnF,iBAAiB,CAAC2B,KAAD,CAAhF,EAAyF;AACrFA,MAAAA,KAAK,GAAG,IAAIyD,IAAJ,CAASzD,KAAT,CAAR;AACH;;AACDA,IAAAA,KAAK,GAAG,KAAKF,MAAL,CAAYC,MAAZ,EAAoBC,KAApB,EAA2BC,IAA3B,CAAR;AACAqD,IAAAA,SAAS,GAAGtD,KAAK,CAACI,QAAN,EAAZ;;AACA,QAAIL,MAAM,CAACyD,IAAP,KAAgB,SAAhB,IAA6B,CAACzD,MAAM,CAAC2D,iBAAzC,EAA4D;AACxD,UAAIC,SAAS,GAAI3D,KAAK,KAAK,MAAV,IAAoBA,KAAK,KAAK,OAA/B,GAA0C,IAA1C,GAAiDA,KAAK,KAAK,MAAV,GAAmB,MAAnB,GAA4B,OAA7F;AACAsD,MAAAA,SAAS,GAAGK,SAAS,GAAG,KAAKzE,SAAL,CAAe0E,WAAf,CAA2BD,SAA3B,CAAH,GAA2CL,SAAhE;AACH;;AACD,QAAIO,aAAa,GAAG,KAAK9B,eAAL,CAAqBhC,MAArB,EAA6BC,KAA7B,EAAoCC,IAApC,CAApB;AACAqD,IAAAA,SAAS,GAAG,CAACjF,iBAAiB,CAAC0B,MAAM,CAACX,SAAR,CAAlB,GAAuCf,iBAAiB,CAACwF,aAAD,CAAjB,GAAmC,EAAnC,GAAwCA,aAAa,CAACzD,QAAd,EAA/E,GAA0GkD,SAAtH;AACAhD,IAAAA,IAAI,CAACsB,YAAL,CAAkB,YAAlB,EAAgC,CAAC0B,SAAS,KAAK,EAAd,GAAmB,OAAnB,GAA6BA,SAA9B,IAA2C,iBAA3C,GAA+D/C,IAAI,CAACR,MAAL,CAAY+B,UAA3G;;AACA,QAAI,CAACzD,iBAAiB,CAACkC,IAAI,CAACR,MAAL,CAAY+B,UAAb,CAAtB,EAAgD;AAC5CxB,MAAAA,IAAI,CAACsB,YAAL,CAAkB,YAAlB,EAAgC0B,SAAS,GAAG,iBAAZ,GAAgC/C,IAAI,CAACR,MAAL,CAAY+B,UAA5E;AACH;;AACD,QAAI,KAAKzB,QAAL,CAAcC,IAAd,EAAoBC,IAApB,EAA0BN,IAA1B,EAAgCO,UAAhC,EAA4CC,KAA5C,EAAmDC,MAAnD,KAA8DX,MAAM,CAACyD,IAAP,KAAgB,UAAlF,EAA8F;AAC1F,WAAKM,UAAL,CAAgBxD,IAAhB,EAAsBgD,SAAtB,EAAiCvD,MAAM,CAACgE,YAAP,GAAsBhE,MAAM,CAACgE,YAAP,EAAtB,GAA8C,WAA/E;AACH,KAFD,MAGK,IAAIhE,MAAM,CAACyD,IAAP,KAAgB,UAApB,EAAgC;AACjClD,MAAAA,IAAI,CAACgC,SAAL,CAAe0B,GAAf,CAAmB,cAAnB;AACA1D,MAAAA,IAAI,CAACsB,YAAL,CAAkB,YAAlB,EAAgC,UAAhC;;AACA,UAAI,KAAK5C,MAAL,CAAYiF,iBAAZ,CAA8BC,gBAAlC,EAAoD;AAChDlE,QAAAA,KAAK,GAAGA,KAAK,KAAK,MAAlB;AACH,OAFD,MAGK;AACDA,QAAAA,KAAK,GAAG,KAAR;AACH;;AACD,UAAImE,SAAS,GAAGtF,cAAc,CAAC,KAAKG,MAAL,CAAYM,aAAb,EAA4B,KAA5B,EAAmC;AAAE8E,QAAAA,OAAO,EAAEpE,KAAX;AAAkBqE,QAAAA,KAAK,EAAE;AAAzB,OAAnC,CAA9B;AACAF,MAAAA,SAAS,CAACG,YAAV,CAAuB,KAAK3E,SAAL,CAAewD,SAAf,EAAvB,EAAmDgB,SAAS,CAACI,UAA7D;AACAjE,MAAAA,IAAI,CAAC4C,WAAL,CAAiBiB,SAAjB;AACH;;AACD,QAAI,KAAKnF,MAAL,CAAYwF,YAAZ,KAA6B,OAA7B,IAAwC,KAAKxF,MAAL,CAAYyF,oBAAxD,EAA8E;AAC1ElE,MAAAA,IAAI,CAACmE,UAAL,GAAkB,IAAlB;AACH;;AACD,SAAKC,aAAL,CAAmBrE,IAAnB,EAAyBC,IAAzB,EAA+BC,UAA/B;;AACA,QAAIT,MAAM,CAACyD,IAAP,KAAgB,SAAhB,IAA6BzD,MAAM,CAAC2D,iBAAxC,EAA2D;AACvD,UAAIU,OAAO,GAAGQ,KAAK,CAACpD,QAAQ,CAACxB,KAAK,CAACI,QAAN,EAAD,EAAmB,EAAnB,CAAT,CAAL,GAAwCJ,KAAK,KAAK,MAAlD,GAA2DwB,QAAQ,CAACxB,KAAK,CAACI,QAAN,EAAD,EAAmB,EAAnB,CAAR,GAAiC,CAA1G;AACA,UAAI+D,SAAS,GAAGtF,cAAc,CAAC,KAAKG,MAAL,CAAYM,aAAb,EAA4B,KAA5B,EAAmC;AAAE8E,QAAAA,OAAO,EAAEA,OAAX;AAAoBC,QAAAA,KAAK,EAAE;AAA3B,OAAnC,CAA9B;AACA/D,MAAAA,IAAI,CAACkC,SAAL,GAAiB,EAAjB;AACA2B,MAAAA,SAAS,CAAC7B,SAAV,CAAoB0B,GAApB,CAAwB,qBAAxB;AACA1D,MAAAA,IAAI,CAAC4C,WAAL,CAAiBiB,SAAjB;AACA7D,MAAAA,IAAI,CAACsB,YAAL,CAAkB,YAAlB,EAAgCwC,OAAO,GAAG,iBAAV,GAA8B7D,IAAI,CAACR,MAAL,CAAY+B,UAA1E;AACH;;AACD,WAAOxB,IAAP;AACH,GAxDD;AAyDA;;;;;;;;AAMAvB,EAAAA,YAAY,CAACa,SAAb,CAAuBkE,UAAvB,GAAoC,UAAUxD,IAAV,EAAgBgD,SAAhB,EAA2BuB,QAA3B,EAAqC;AACrE,QAAIA,QAAQ,KAAK,KAAK,CAAtB,EAAyB;AAAEA,MAAAA,QAAQ,GAAG,WAAX;AAAyB;;AACpDvE,IAAAA,IAAI,CAACuE,QAAD,CAAJ,GAAiBvB,SAAjB;AACA,WAAOhD,IAAP;AACH,GAJD;AAKA;;;;;AAGAvB,EAAAA,YAAY,CAACa,SAAb,CAAuB+E,aAAvB,GAAuC,UAAUrE,IAAV,EAAgBC,IAAhB,EAAsBC,UAAtB,EAAkC;AACrE,QAAIT,MAAM,GAAGQ,IAAI,CAACR,MAAlB;AACA,SAAK+E,sBAAL,CAA4BxE,IAA5B,EAAkCC,IAAlC,EAAwCR,MAAM,CAACyD,IAAP,KAAgB,UAAxD;AACA9E,IAAAA,qBAAqB,CAAC4B,IAAD,EAAOE,UAAP,CAArB;AACA9B,IAAAA,qBAAqB,CAAC4B,IAAD,EAAOC,IAAI,CAACC,UAAZ,CAArB;;AACA,QAAIT,MAAM,CAACgF,gBAAX,EAA6B;AACzBrG,MAAAA,qBAAqB,CAAC4B,IAAD,EAAOP,MAAM,CAACgF,gBAAd,CAArB;AACH;;AACD,QAAIhF,MAAM,CAACiF,SAAX,EAAsB;AAClB1E,MAAAA,IAAI,CAAC2E,KAAL,CAAWD,SAAX,GAAuBjF,MAAM,CAACiF,SAA9B;AACH;;AACD,QAAIjF,MAAM,CAACmF,QAAP,KAAoB,MAApB,IAA+B,CAACnF,MAAM,CAACmF,QAAR,IAAoB,KAAKlG,MAAL,CAAYkG,QAAZ,KAAyB,MAAhF,EAAyF;AACrF5E,MAAAA,IAAI,CAACgC,SAAL,CAAe0B,GAAf,CAAmB,YAAnB;AACH,KAFD,MAGK,IAAIjE,MAAM,CAACmF,QAAP,KAAoB,qBAApB,IAA8C,CAACnF,MAAM,CAACmF,QAAR,IAAoB,KAAKlG,MAAL,CAAYkG,QAAZ,KAAyB,qBAA/F,EAAuH;AACxH5E,MAAAA,IAAI,CAACgC,SAAL,CAAe0B,GAAf,CAAmB,mBAAnB;AACH;AACJ,GAjBD;;AAkBAjF,EAAAA,YAAY,CAACa,SAAb,CAAuBkF,sBAAvB,GAAgD,UAAUxE,IAAV,EAAgBC,IAAhB,EAAsB4E,cAAtB,EAAsC;AAClF,QAAIC,IAAI,GAAG,EAAX;AACA,QAAIC,IAAI,GAAG;AAAE,kBAAY;AAAd,KAAX;AACA,QAAIC,OAAO,GAAG,EAAd;;AACA,QAAI/E,IAAI,CAACgF,OAAT,EAAkB;AACdH,MAAAA,IAAI,CAACG,OAAL,GAAehF,IAAI,CAACgF,OAApB;AACH;;AACD,QAAIhF,IAAI,CAACiF,OAAT,EAAkB;AACdJ,MAAAA,IAAI,CAACI,OAAL,GAAejF,IAAI,CAACiF,OAApB;AACH;;AACD,QAAIjF,IAAI,CAACkF,UAAT,EAAqB;AACjBH,MAAAA,OAAO,CAACI,IAAR,CAAa,gBAAb;AACH;;AACD,QAAInF,IAAI,CAACmE,UAAT,EAAqB;AACjBY,MAAAA,OAAO,CAACI,IAAR,CAAaC,KAAb,CAAmBL,OAAnB,EAA4B,CAAC,uBAAD,EAA0B,UAA1B,CAA5B;;AACA,UAAIH,cAAJ,EAAoB;AAChB7E,QAAAA,IAAI,CAACsF,aAAL,CAAmB,UAAnB,EAA+BtD,SAA/B,CAAyC0B,GAAzC,CAA6C,SAA7C;AACH;AACJ;;AACD,QAAI,CAAC3F,iBAAiB,CAACkC,IAAI,CAACa,KAAN,CAAtB,EAAoC;AAChCgE,MAAAA,IAAI,CAACC,IAAI,CAACQ,QAAN,CAAJ,GAAsBtF,IAAI,CAACa,KAA3B;AACH;;AACD,QAAI,CAACb,IAAI,CAACuF,OAAV,EAAmB;AACfR,MAAAA,OAAO,CAACI,IAAR,CAAa,QAAb;AACH;;AACDN,IAAAA,IAAI,CAACW,KAAL,GAAaT,OAAb;AACA5G,IAAAA,qBAAqB,CAAC4B,IAAD,EAAO8E,IAAP,CAArB;AACH,GA3BD;;AA4BArG,EAAAA,YAAY,CAACa,SAAb,CAAuBoC,QAAvB,GAAkC,UAAUuB,KAAV,EAAiBtD,IAAjB,EAAuBF,MAAvB,EAA+B;AAC7D,WAAOA,MAAM,CAACiG,aAAP,CAAqBzC,KAArB,EAA4BtD,IAA5B,EAAkCF,MAAlC,CAAP;AACH,GAFD;;AAGA,SAAOhB,YAAP;AACH,CAlOiC,EAAlC;;AAmOA,SAASA,YAAT","sourcesContent":["import { isNullOrUndefined, extend, isBlazor, updateBlazorTemplate } from '@syncfusion/ej2-base';\nimport { doesImplementInterface, setStyleAndAttributes, appendChildren, extendObjWithFn } from '../base/util';\nimport { createCheckBox } from '@syncfusion/ej2-buttons';\nimport { foreignKeyData } from '../base/constant';\n/**\n * CellRenderer class which responsible for building cell content.\n * @hidden\n */\nvar CellRenderer = /** @class */ (function () {\n    function CellRenderer(parent, locator) {\n        this.localizer = locator.getService('localization');\n        this.formatter = locator.getService('valueFormatter');\n        this.parent = parent;\n        this.element = this.parent.createElement('TD', { className: 'e-rowcell', attrs: { role: 'gridcell', tabindex: '-1' } });\n        this.rowChkBox = this.parent.createElement('input', { className: 'e-checkselect', attrs: { 'type': 'checkbox' } });\n    }\n    /**\n     * Function to return the wrapper for the TD content\n     * @returns string\n     */\n    CellRenderer.prototype.getGui = function () {\n        return '';\n    };\n    /**\n     * Function to format the cell value.\n     * @param  {Column} column\n     * @param  {Object} value\n     * @param  {Object} data\n     */\n    CellRenderer.prototype.format = function (column, value, data) {\n        if (!isNullOrUndefined(column.format)) {\n            value = this.formatter.toView(value, column.getFormatter());\n        }\n        return isNullOrUndefined(value) ? '' : value.toString();\n    };\n    CellRenderer.prototype.evaluate = function (node, cell, data, attributes, fData, isEdit) {\n        var _a;\n        var result;\n        if (cell.column.template) {\n            var literals = ['index'];\n            var dummyData = extendObjWithFn({}, data, (_a = {}, _a[foreignKeyData] = fData, _a.column = cell.column, _a));\n            var templateID = this.parent.element.id + cell.column.uid;\n            var str = 'isStringTemplate';\n            var index = 'index';\n            if (isBlazor() && isEdit) {\n                var rNumber = this.parent.editSettings.mode !== 'Batch' ? parseInt(attributes[index], 10) : null;\n                result = cell.column.getColumnTemplate()(extend({ 'index': attributes[literals[0]] }, dummyData), this.parent, 'template', templateID, this.parent[str], rNumber);\n                window[templateID] = null;\n                if (this.parent.editSettings.mode !== 'Batch') {\n                    updateBlazorTemplate(templateID, 'Template', cell.column, false);\n                }\n            }\n            else {\n                result = cell.column.getColumnTemplate()(extend({ 'index': attributes[literals[0]] }, dummyData), this.parent, 'template', templateID, this.parent[str]);\n            }\n            appendChildren(node, result);\n            this.parent.notify('template-result', { template: result });\n            result = null;\n            node.setAttribute('aria-label', node.innerText + ' is template cell' + ' column header ' +\n                cell.column.headerText);\n            return false;\n        }\n        return true;\n    };\n    /**\n     * Function to invoke the custom formatter available in the column object.\n     * @param  {Column} column\n     * @param  {Object} value\n     * @param  {Object} data\n     */\n    CellRenderer.prototype.invokeFormatter = function (column, value, data) {\n        if (!isNullOrUndefined(column.formatter)) {\n            if (doesImplementInterface(column.formatter, 'getValue')) {\n                var formatter = column.formatter;\n                value = new formatter().getValue(column, data);\n            }\n            else if (typeof column.formatter === 'function') {\n                value = column.formatter(column, data);\n            }\n            else {\n                value = column.formatter.getValue(column, data);\n            }\n        }\n        return value;\n    };\n    /**\n     * Function to render the cell content based on Column object.\n     * @param  {Column} column\n     * @param  {Object} data\n     * @param  {{[x:string]:Object}} attributes?\n     * @param  {Element}\n     */\n    CellRenderer.prototype.render = function (cell, data, attributes, isExpand, isEdit) {\n        return this.refreshCell(cell, data, attributes, isEdit);\n    };\n    /**\n     * Function to refresh the cell content based on Column object.\n     * @param  {Column} column\n     * @param  {Object} data\n     * @param  {{[x:string]:Object}} attributes?\n     * @param  {Element}\n     */\n    CellRenderer.prototype.refreshTD = function (td, cell, data, attributes) {\n        var isEdit = this.parent.editSettings.mode === 'Batch' && td.classList.contains('e-editedbatchcell');\n        var node = this.refreshCell(cell, data, attributes, isEdit);\n        td.innerHTML = '';\n        td.setAttribute('aria-label', node.getAttribute('aria-label'));\n        var elements = [].slice.call(node.childNodes);\n        for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {\n            var elem = elements_1[_i];\n            td.appendChild(elem);\n        }\n    };\n    CellRenderer.prototype.refreshCell = function (cell, data, attributes, isEdit) {\n        var _a;\n        var node = this.element.cloneNode();\n        var column = cell.column;\n        var fData;\n        if (cell.isForeignKey) {\n            fData = cell.foreignKeyData[0] || (_a = {}, _a[column.foreignKeyValue] = column.format ? null : '', _a);\n        }\n        //Prepare innerHtml\n        var innerHtml = this.getGui();\n        var value = cell.isForeignKey ? this.getValue(column.foreignKeyValue, fData, column) :\n            this.getValue(column.field, data, column);\n        if ((column.type === 'date' || column.type === 'datetime') && !isNullOrUndefined(value)) {\n            value = new Date(value);\n        }\n        value = this.format(column, value, data);\n        innerHtml = value.toString();\n        if (column.type === 'boolean' && !column.displayAsCheckBox) {\n            var localeStr = (value !== 'true' && value !== 'false') ? null : value === 'true' ? 'True' : 'False';\n            innerHtml = localeStr ? this.localizer.getConstant(localeStr) : innerHtml;\n        }\n        var fromFormatter = this.invokeFormatter(column, value, data);\n        innerHtml = !isNullOrUndefined(column.formatter) ? isNullOrUndefined(fromFormatter) ? '' : fromFormatter.toString() : innerHtml;\n        node.setAttribute('aria-label', (innerHtml === '' ? 'empty' : innerHtml) + ' column header ' + cell.column.headerText);\n        if (!isNullOrUndefined(cell.column.headerText)) {\n            node.setAttribute('aria-label', innerHtml + ' column header ' + cell.column.headerText);\n        }\n        if (this.evaluate(node, cell, data, attributes, fData, isEdit) && column.type !== 'checkbox') {\n            this.appendHtml(node, innerHtml, column.getDomSetter ? column.getDomSetter() : 'innerHTML');\n        }\n        else if (column.type === 'checkbox') {\n            node.classList.add('e-gridchkbox');\n            node.setAttribute('aria-label', 'checkbox');\n            if (this.parent.selectionSettings.persistSelection) {\n                value = value === 'true';\n            }\n            else {\n                value = false;\n            }\n            var checkWrap = createCheckBox(this.parent.createElement, false, { checked: value, label: ' ' });\n            checkWrap.insertBefore(this.rowChkBox.cloneNode(), checkWrap.firstChild);\n            node.appendChild(checkWrap);\n        }\n        if (this.parent.checkAllRows === 'Check' && this.parent.enableVirtualization) {\n            cell.isSelected = true;\n        }\n        this.setAttributes(node, cell, attributes);\n        if (column.type === 'boolean' && column.displayAsCheckBox) {\n            var checked = isNaN(parseInt(value.toString(), 10)) ? value === 'true' : parseInt(value.toString(), 10) > 0;\n            var checkWrap = createCheckBox(this.parent.createElement, false, { checked: checked, label: ' ' });\n            node.innerHTML = '';\n            checkWrap.classList.add('e-checkbox-disabled');\n            node.appendChild(checkWrap);\n            node.setAttribute('aria-label', checked + ' column header ' + cell.column.headerText);\n        }\n        return node;\n    };\n    /**\n     * Function to specifies how the result content to be placed in the cell.\n     * @param  {Element} node\n     * @param  {string|Element} innerHtml\n     * @returns Element\n     */\n    CellRenderer.prototype.appendHtml = function (node, innerHtml, property) {\n        if (property === void 0) { property = 'innerHTML'; }\n        node[property] = innerHtml;\n        return node;\n    };\n    /**\n     * @hidden\n     */\n    CellRenderer.prototype.setAttributes = function (node, cell, attributes) {\n        var column = cell.column;\n        this.buildAttributeFromCell(node, cell, column.type === 'checkbox');\n        setStyleAndAttributes(node, attributes);\n        setStyleAndAttributes(node, cell.attributes);\n        if (column.customAttributes) {\n            setStyleAndAttributes(node, column.customAttributes);\n        }\n        if (column.textAlign) {\n            node.style.textAlign = column.textAlign;\n        }\n        if (column.clipMode === 'Clip' || (!column.clipMode && this.parent.clipMode === 'Clip')) {\n            node.classList.add('e-gridclip');\n        }\n        else if (column.clipMode === 'EllipsisWithTooltip' || (!column.clipMode && this.parent.clipMode === 'EllipsisWithTooltip')) {\n            node.classList.add('e-ellipsistooltip');\n        }\n    };\n    CellRenderer.prototype.buildAttributeFromCell = function (node, cell, isCheckBoxType) {\n        var attr = {};\n        var prop = { 'colindex': 'aria-colindex' };\n        var classes = [];\n        if (cell.colSpan) {\n            attr.colSpan = cell.colSpan;\n        }\n        if (cell.rowSpan) {\n            attr.rowSpan = cell.rowSpan;\n        }\n        if (cell.isTemplate) {\n            classes.push('e-templatecell');\n        }\n        if (cell.isSelected) {\n            classes.push.apply(classes, ['e-selectionbackground', 'e-active']);\n            if (isCheckBoxType) {\n                node.querySelector('.e-frame').classList.add('e-check');\n            }\n        }\n        if (!isNullOrUndefined(cell.index)) {\n            attr[prop.colindex] = cell.index;\n        }\n        if (!cell.visible) {\n            classes.push('e-hide');\n        }\n        attr.class = classes;\n        setStyleAndAttributes(node, attr);\n    };\n    CellRenderer.prototype.getValue = function (field, data, column) {\n        return column.valueAccessor(field, data, column);\n    };\n    return CellRenderer;\n}());\nexport { CellRenderer };\n"]},"metadata":{},"sourceType":"module"}