{"ast":null,"code":"import { isNullOrUndefined, getValue, setValue, isBlazor } from '@syncfusion/ej2-base';\nimport { Row } from '../models/row';\nimport { CellType } from '../base/enum';\nimport { Cell } from '../models/cell';\nimport { getUid } from '../base/util';\nimport { getForeignData } from '../../grid/base/util';\nimport * as events from '../base/constant';\n/**\n * RowModelGenerator is used to generate grid data rows.\n * @hidden\n */\n\nvar RowModelGenerator =\n/** @class */\nfunction () {\n  /**\n   * Constructor for header renderer module\n   */\n  function RowModelGenerator(parent) {\n    this.parent = parent;\n  }\n\n  RowModelGenerator.prototype.generateRows = function (data, args) {\n    var rows = [];\n    var startIndex = this.parent.enableVirtualization ? args.startIndex : 0;\n\n    for (var i = 0, len = Object.keys(data).length; i < len; i++, startIndex++) {\n      rows[i] = this.generateRow(data[i], startIndex);\n    }\n\n    return rows;\n  };\n\n  RowModelGenerator.prototype.ensureColumns = function () {\n    //TODO: generate dummy column for group, detail here;\n    var cols = [];\n\n    if (this.parent.detailTemplate || this.parent.childGrid) {\n      var args = {};\n      this.parent.notify(events.detailIndentCellInfo, args);\n      cols.push(this.generateCell(args, null, CellType.DetailExpand));\n    }\n\n    if (this.parent.isRowDragable()) {\n      cols.push(this.generateCell({}, null, CellType.RowDragIcon));\n    }\n\n    return cols;\n  };\n\n  RowModelGenerator.prototype.generateRow = function (data, index, cssClass, indent, pid, tIndex) {\n    var options = {};\n    options.foreignKeyData = {};\n    var isServerRendered = 'isServerRendered';\n    options.uid = isBlazor() && this.parent[isServerRendered] ? this.parent.getRowUid('grid-row') : getUid('grid-row');\n    options.data = data;\n    options.index = index;\n    options.indent = indent;\n    options.tIndex = tIndex;\n    options.isDataRow = true;\n    options.parentGid = pid;\n\n    if (this.parent.isPrinting) {\n      if (this.parent.hierarchyPrintMode === 'All') {\n        options.isExpand = true;\n      } else if (this.parent.hierarchyPrintMode === 'Expanded' && this.parent.expandedRows && this.parent.expandedRows[index]) {\n        options.isExpand = this.parent.expandedRows[index].isExpand;\n      }\n    }\n\n    options.cssClass = cssClass;\n    options.isAltRow = this.parent.enableAltRow ? index % 2 !== 0 : false;\n    options.isSelected = this.parent.getSelectedRowIndexes().indexOf(index) > -1;\n    this.refreshForeignKeyRow(options);\n    var cells = this.ensureColumns();\n    var row = new Row(options);\n    row.cells = cells.concat(this.generateCells(options));\n    return row;\n  };\n\n  RowModelGenerator.prototype.refreshForeignKeyRow = function (options) {\n    this.parent.getForeignKeyColumns().forEach(function (col) {\n      setValue(col.field, getForeignData(col, options.data), options.foreignKeyData);\n    });\n  };\n\n  RowModelGenerator.prototype.generateCells = function (options) {\n    var _this = this;\n\n    var dummies = this.parent.getColumns();\n    var tmp = [];\n    dummies.forEach(function (dummy, index) {\n      return tmp.push(_this.generateCell(dummy, options.uid, isNullOrUndefined(dummy.commands) ? undefined : CellType.CommandColumn, null, index, options.foreignKeyData));\n    });\n    return tmp;\n  };\n\n  RowModelGenerator.prototype.generateCell = function (column, rowId, cellType, colSpan, oIndex, foreignKeyData) {\n    var opt = {\n      'visible': column.visible,\n      'isDataCell': !isNullOrUndefined(column.field || column.template),\n      'isTemplate': !isNullOrUndefined(column.template),\n      'rowID': rowId,\n      'column': column,\n      'cellType': !isNullOrUndefined(cellType) ? cellType : CellType.Data,\n      'colSpan': colSpan,\n      'commands': column.commands,\n      'isForeignKey': column.isForeignColumn && column.isForeignColumn(),\n      'foreignKeyData': column.isForeignColumn && column.isForeignColumn() && getValue(column.field, foreignKeyData)\n    };\n\n    if (opt.isDataCell || opt.column.type === 'checkbox' || opt.commands) {\n      opt.index = oIndex;\n    }\n\n    return new Cell(opt);\n  };\n\n  RowModelGenerator.prototype.refreshRows = function (input) {\n    var _this = this;\n\n    input.forEach(function (row) {\n      _this.refreshForeignKeyRow(row);\n\n      row.cells = _this.generateCells(row);\n    });\n    return input;\n  };\n\n  return RowModelGenerator;\n}();\n\nexport { RowModelGenerator };","map":{"version":3,"sources":["C:/CN2/workspace-trunk/kain-front-end/node_modules/@syncfusion/ej2-grids/src/grid/services/row-model-generator.js"],"names":["isNullOrUndefined","getValue","setValue","isBlazor","Row","CellType","Cell","getUid","getForeignData","events","RowModelGenerator","parent","prototype","generateRows","data","args","rows","startIndex","enableVirtualization","i","len","Object","keys","length","generateRow","ensureColumns","cols","detailTemplate","childGrid","notify","detailIndentCellInfo","push","generateCell","DetailExpand","isRowDragable","RowDragIcon","index","cssClass","indent","pid","tIndex","options","foreignKeyData","isServerRendered","uid","getRowUid","isDataRow","parentGid","isPrinting","hierarchyPrintMode","isExpand","expandedRows","isAltRow","enableAltRow","isSelected","getSelectedRowIndexes","indexOf","refreshForeignKeyRow","cells","row","concat","generateCells","getForeignKeyColumns","forEach","col","field","_this","dummies","getColumns","tmp","dummy","commands","undefined","CommandColumn","column","rowId","cellType","colSpan","oIndex","opt","visible","template","Data","isForeignColumn","isDataCell","type","refreshRows","input"],"mappings":"AAAA,SAASA,iBAAT,EAA4BC,QAA5B,EAAsCC,QAAtC,EAAgDC,QAAhD,QAAgE,sBAAhE;AACA,SAASC,GAAT,QAAoB,eAApB;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,SAASC,IAAT,QAAqB,gBAArB;AACA,SAASC,MAAT,QAAuB,cAAvB;AACA,SAASC,cAAT,QAA+B,sBAA/B;AACA,OAAO,KAAKC,MAAZ,MAAwB,kBAAxB;AACA;;;;;AAIA,IAAIC,iBAAiB;AAAG;AAAe,YAAY;AAC/C;;;AAGA,WAASA,iBAAT,CAA2BC,MAA3B,EAAmC;AAC/B,SAAKA,MAAL,GAAcA,MAAd;AACH;;AACDD,EAAAA,iBAAiB,CAACE,SAAlB,CAA4BC,YAA5B,GAA2C,UAAUC,IAAV,EAAgBC,IAAhB,EAAsB;AAC7D,QAAIC,IAAI,GAAG,EAAX;AACA,QAAIC,UAAU,GAAG,KAAKN,MAAL,CAAYO,oBAAZ,GAAmCH,IAAI,CAACE,UAAxC,GAAqD,CAAtE;;AACA,SAAK,IAAIE,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGC,MAAM,CAACC,IAAP,CAAYR,IAAZ,EAAkBS,MAAxC,EAAgDJ,CAAC,GAAGC,GAApD,EAAyDD,CAAC,IAAIF,UAAU,EAAxE,EAA4E;AACxED,MAAAA,IAAI,CAACG,CAAD,CAAJ,GAAU,KAAKK,WAAL,CAAiBV,IAAI,CAACK,CAAD,CAArB,EAA0BF,UAA1B,CAAV;AACH;;AACD,WAAOD,IAAP;AACH,GAPD;;AAQAN,EAAAA,iBAAiB,CAACE,SAAlB,CAA4Ba,aAA5B,GAA4C,YAAY;AACpD;AACA,QAAIC,IAAI,GAAG,EAAX;;AACA,QAAI,KAAKf,MAAL,CAAYgB,cAAZ,IAA8B,KAAKhB,MAAL,CAAYiB,SAA9C,EAAyD;AACrD,UAAIb,IAAI,GAAG,EAAX;AACA,WAAKJ,MAAL,CAAYkB,MAAZ,CAAmBpB,MAAM,CAACqB,oBAA1B,EAAgDf,IAAhD;AACAW,MAAAA,IAAI,CAACK,IAAL,CAAU,KAAKC,YAAL,CAAkBjB,IAAlB,EAAwB,IAAxB,EAA8BV,QAAQ,CAAC4B,YAAvC,CAAV;AACH;;AACD,QAAI,KAAKtB,MAAL,CAAYuB,aAAZ,EAAJ,EAAiC;AAC7BR,MAAAA,IAAI,CAACK,IAAL,CAAU,KAAKC,YAAL,CAAkB,EAAlB,EAAsB,IAAtB,EAA4B3B,QAAQ,CAAC8B,WAArC,CAAV;AACH;;AACD,WAAOT,IAAP;AACH,GAZD;;AAaAhB,EAAAA,iBAAiB,CAACE,SAAlB,CAA4BY,WAA5B,GAA0C,UAAUV,IAAV,EAAgBsB,KAAhB,EAAuBC,QAAvB,EAAiCC,MAAjC,EAAyCC,GAAzC,EAA8CC,MAA9C,EAAsD;AAC5F,QAAIC,OAAO,GAAG,EAAd;AACAA,IAAAA,OAAO,CAACC,cAAR,GAAyB,EAAzB;AACA,QAAIC,gBAAgB,GAAG,kBAAvB;AACAF,IAAAA,OAAO,CAACG,GAAR,GAAczC,QAAQ,MAAM,KAAKQ,MAAL,CAAYgC,gBAAZ,CAAd,GAA8C,KAAKhC,MAAL,CAAYkC,SAAZ,CAAsB,UAAtB,CAA9C,GAAkFtC,MAAM,CAAC,UAAD,CAAtG;AACAkC,IAAAA,OAAO,CAAC3B,IAAR,GAAeA,IAAf;AACA2B,IAAAA,OAAO,CAACL,KAAR,GAAgBA,KAAhB;AACAK,IAAAA,OAAO,CAACH,MAAR,GAAiBA,MAAjB;AACAG,IAAAA,OAAO,CAACD,MAAR,GAAiBA,MAAjB;AACAC,IAAAA,OAAO,CAACK,SAAR,GAAoB,IAApB;AACAL,IAAAA,OAAO,CAACM,SAAR,GAAoBR,GAApB;;AACA,QAAI,KAAK5B,MAAL,CAAYqC,UAAhB,EAA4B;AACxB,UAAI,KAAKrC,MAAL,CAAYsC,kBAAZ,KAAmC,KAAvC,EAA8C;AAC1CR,QAAAA,OAAO,CAACS,QAAR,GAAmB,IAAnB;AACH,OAFD,MAGK,IAAI,KAAKvC,MAAL,CAAYsC,kBAAZ,KAAmC,UAAnC,IAAiD,KAAKtC,MAAL,CAAYwC,YAA7D,IAA6E,KAAKxC,MAAL,CAAYwC,YAAZ,CAAyBf,KAAzB,CAAjF,EAAkH;AACnHK,QAAAA,OAAO,CAACS,QAAR,GAAmB,KAAKvC,MAAL,CAAYwC,YAAZ,CAAyBf,KAAzB,EAAgCc,QAAnD;AACH;AACJ;;AACDT,IAAAA,OAAO,CAACJ,QAAR,GAAmBA,QAAnB;AACAI,IAAAA,OAAO,CAACW,QAAR,GAAmB,KAAKzC,MAAL,CAAY0C,YAAZ,GAA2BjB,KAAK,GAAG,CAAR,KAAc,CAAzC,GAA6C,KAAhE;AACAK,IAAAA,OAAO,CAACa,UAAR,GAAqB,KAAK3C,MAAL,CAAY4C,qBAAZ,GAAoCC,OAApC,CAA4CpB,KAA5C,IAAqD,CAAC,CAA3E;AACA,SAAKqB,oBAAL,CAA0BhB,OAA1B;AACA,QAAIiB,KAAK,GAAG,KAAKjC,aAAL,EAAZ;AACA,QAAIkC,GAAG,GAAG,IAAIvD,GAAJ,CAAQqC,OAAR,CAAV;AACAkB,IAAAA,GAAG,CAACD,KAAJ,GAAYA,KAAK,CAACE,MAAN,CAAa,KAAKC,aAAL,CAAmBpB,OAAnB,CAAb,CAAZ;AACA,WAAOkB,GAAP;AACH,GA3BD;;AA4BAjD,EAAAA,iBAAiB,CAACE,SAAlB,CAA4B6C,oBAA5B,GAAmD,UAAUhB,OAAV,EAAmB;AAClE,SAAK9B,MAAL,CAAYmD,oBAAZ,GAAmCC,OAAnC,CAA2C,UAAUC,GAAV,EAAe;AACtD9D,MAAAA,QAAQ,CAAC8D,GAAG,CAACC,KAAL,EAAYzD,cAAc,CAACwD,GAAD,EAAMvB,OAAO,CAAC3B,IAAd,CAA1B,EAA+C2B,OAAO,CAACC,cAAvD,CAAR;AACH,KAFD;AAGH,GAJD;;AAKAhC,EAAAA,iBAAiB,CAACE,SAAlB,CAA4BiD,aAA5B,GAA4C,UAAUpB,OAAV,EAAmB;AAC3D,QAAIyB,KAAK,GAAG,IAAZ;;AACA,QAAIC,OAAO,GAAG,KAAKxD,MAAL,CAAYyD,UAAZ,EAAd;AACA,QAAIC,GAAG,GAAG,EAAV;AACAF,IAAAA,OAAO,CAACJ,OAAR,CAAgB,UAAUO,KAAV,EAAiBlC,KAAjB,EAAwB;AACpC,aAAOiC,GAAG,CAACtC,IAAJ,CAASmC,KAAK,CAAClC,YAAN,CAAmBsC,KAAnB,EAA0B7B,OAAO,CAACG,GAAlC,EAAuC5C,iBAAiB,CAACsE,KAAK,CAACC,QAAP,CAAjB,GAAoCC,SAApC,GAAgDnE,QAAQ,CAACoE,aAAhG,EAA+G,IAA/G,EAAqHrC,KAArH,EAA4HK,OAAO,CAACC,cAApI,CAAT,CAAP;AACH,KAFD;AAGA,WAAO2B,GAAP;AACH,GARD;;AASA3D,EAAAA,iBAAiB,CAACE,SAAlB,CAA4BoB,YAA5B,GAA2C,UAAU0C,MAAV,EAAkBC,KAAlB,EAAyBC,QAAzB,EAAmCC,OAAnC,EAA4CC,MAA5C,EAAoDpC,cAApD,EAAoE;AAC3G,QAAIqC,GAAG,GAAG;AACN,iBAAWL,MAAM,CAACM,OADZ;AAEN,oBAAc,CAAChF,iBAAiB,CAAC0E,MAAM,CAACT,KAAP,IAAgBS,MAAM,CAACO,QAAxB,CAF1B;AAGN,oBAAc,CAACjF,iBAAiB,CAAC0E,MAAM,CAACO,QAAR,CAH1B;AAIN,eAASN,KAJH;AAKN,gBAAUD,MALJ;AAMN,kBAAY,CAAC1E,iBAAiB,CAAC4E,QAAD,CAAlB,GAA+BA,QAA/B,GAA0CvE,QAAQ,CAAC6E,IANzD;AAON,iBAAWL,OAPL;AAQN,kBAAYH,MAAM,CAACH,QARb;AASN,sBAAgBG,MAAM,CAACS,eAAP,IAA0BT,MAAM,CAACS,eAAP,EATpC;AAUN,wBAAkBT,MAAM,CAACS,eAAP,IAA0BT,MAAM,CAACS,eAAP,EAA1B,IAAsDlF,QAAQ,CAACyE,MAAM,CAACT,KAAR,EAAevB,cAAf;AAV1E,KAAV;;AAYA,QAAIqC,GAAG,CAACK,UAAJ,IAAkBL,GAAG,CAACL,MAAJ,CAAWW,IAAX,KAAoB,UAAtC,IAAoDN,GAAG,CAACR,QAA5D,EAAsE;AAClEQ,MAAAA,GAAG,CAAC3C,KAAJ,GAAY0C,MAAZ;AACH;;AACD,WAAO,IAAIxE,IAAJ,CAASyE,GAAT,CAAP;AACH,GAjBD;;AAkBArE,EAAAA,iBAAiB,CAACE,SAAlB,CAA4B0E,WAA5B,GAA0C,UAAUC,KAAV,EAAiB;AACvD,QAAIrB,KAAK,GAAG,IAAZ;;AACAqB,IAAAA,KAAK,CAACxB,OAAN,CAAc,UAAUJ,GAAV,EAAe;AACzBO,MAAAA,KAAK,CAACT,oBAAN,CAA2BE,GAA3B;;AACAA,MAAAA,GAAG,CAACD,KAAJ,GAAYQ,KAAK,CAACL,aAAN,CAAoBF,GAApB,CAAZ;AACH,KAHD;AAIA,WAAO4B,KAAP;AACH,GAPD;;AAQA,SAAO7E,iBAAP;AACH,CAjGsC,EAAvC;;AAkGA,SAASA,iBAAT","sourcesContent":["import { isNullOrUndefined, getValue, setValue, isBlazor } from '@syncfusion/ej2-base';\nimport { Row } from '../models/row';\nimport { CellType } from '../base/enum';\nimport { Cell } from '../models/cell';\nimport { getUid } from '../base/util';\nimport { getForeignData } from '../../grid/base/util';\nimport * as events from '../base/constant';\n/**\n * RowModelGenerator is used to generate grid data rows.\n * @hidden\n */\nvar RowModelGenerator = /** @class */ (function () {\n    /**\n     * Constructor for header renderer module\n     */\n    function RowModelGenerator(parent) {\n        this.parent = parent;\n    }\n    RowModelGenerator.prototype.generateRows = function (data, args) {\n        var rows = [];\n        var startIndex = this.parent.enableVirtualization ? args.startIndex : 0;\n        for (var i = 0, len = Object.keys(data).length; i < len; i++, startIndex++) {\n            rows[i] = this.generateRow(data[i], startIndex);\n        }\n        return rows;\n    };\n    RowModelGenerator.prototype.ensureColumns = function () {\n        //TODO: generate dummy column for group, detail here;\n        var cols = [];\n        if (this.parent.detailTemplate || this.parent.childGrid) {\n            var args = {};\n            this.parent.notify(events.detailIndentCellInfo, args);\n            cols.push(this.generateCell(args, null, CellType.DetailExpand));\n        }\n        if (this.parent.isRowDragable()) {\n            cols.push(this.generateCell({}, null, CellType.RowDragIcon));\n        }\n        return cols;\n    };\n    RowModelGenerator.prototype.generateRow = function (data, index, cssClass, indent, pid, tIndex) {\n        var options = {};\n        options.foreignKeyData = {};\n        var isServerRendered = 'isServerRendered';\n        options.uid = isBlazor() && this.parent[isServerRendered] ? this.parent.getRowUid('grid-row') : getUid('grid-row');\n        options.data = data;\n        options.index = index;\n        options.indent = indent;\n        options.tIndex = tIndex;\n        options.isDataRow = true;\n        options.parentGid = pid;\n        if (this.parent.isPrinting) {\n            if (this.parent.hierarchyPrintMode === 'All') {\n                options.isExpand = true;\n            }\n            else if (this.parent.hierarchyPrintMode === 'Expanded' && this.parent.expandedRows && this.parent.expandedRows[index]) {\n                options.isExpand = this.parent.expandedRows[index].isExpand;\n            }\n        }\n        options.cssClass = cssClass;\n        options.isAltRow = this.parent.enableAltRow ? index % 2 !== 0 : false;\n        options.isSelected = this.parent.getSelectedRowIndexes().indexOf(index) > -1;\n        this.refreshForeignKeyRow(options);\n        var cells = this.ensureColumns();\n        var row = new Row(options);\n        row.cells = cells.concat(this.generateCells(options));\n        return row;\n    };\n    RowModelGenerator.prototype.refreshForeignKeyRow = function (options) {\n        this.parent.getForeignKeyColumns().forEach(function (col) {\n            setValue(col.field, getForeignData(col, options.data), options.foreignKeyData);\n        });\n    };\n    RowModelGenerator.prototype.generateCells = function (options) {\n        var _this = this;\n        var dummies = this.parent.getColumns();\n        var tmp = [];\n        dummies.forEach(function (dummy, index) {\n            return tmp.push(_this.generateCell(dummy, options.uid, isNullOrUndefined(dummy.commands) ? undefined : CellType.CommandColumn, null, index, options.foreignKeyData));\n        });\n        return tmp;\n    };\n    RowModelGenerator.prototype.generateCell = function (column, rowId, cellType, colSpan, oIndex, foreignKeyData) {\n        var opt = {\n            'visible': column.visible,\n            'isDataCell': !isNullOrUndefined(column.field || column.template),\n            'isTemplate': !isNullOrUndefined(column.template),\n            'rowID': rowId,\n            'column': column,\n            'cellType': !isNullOrUndefined(cellType) ? cellType : CellType.Data,\n            'colSpan': colSpan,\n            'commands': column.commands,\n            'isForeignKey': column.isForeignColumn && column.isForeignColumn(),\n            'foreignKeyData': column.isForeignColumn && column.isForeignColumn() && getValue(column.field, foreignKeyData)\n        };\n        if (opt.isDataCell || opt.column.type === 'checkbox' || opt.commands) {\n            opt.index = oIndex;\n        }\n        return new Cell(opt);\n    };\n    RowModelGenerator.prototype.refreshRows = function (input) {\n        var _this = this;\n        input.forEach(function (row) {\n            _this.refreshForeignKeyRow(row);\n            row.cells = _this.generateCells(row);\n        });\n        return input;\n    };\n    return RowModelGenerator;\n}());\nexport { RowModelGenerator };\n"]},"metadata":{},"sourceType":"module"}