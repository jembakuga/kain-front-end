{"ast":null,"code":"import * as events from '../base/constant';\nimport { Workbook } from '@syncfusion/ej2-excel-export';\nimport { isNullOrUndefined, getEnumValue, compile, getValue, detach, extend, isBlazor } from '@syncfusion/ej2-base';\nimport { Data } from '../actions/data';\nimport { ExportHelper, ExportValueFormatter } from './export-helper';\nimport { SummaryModelGenerator, GroupSummaryModelGenerator, CaptionSummaryModelGenerator } from '../services/summary-model-generator';\nimport { CellType } from '../base/enum';\nimport { Query, DataManager } from '@syncfusion/ej2-data';\nimport { getPrintGridModel, getUid } from '../base/util';\n/**\n * @hidden\n * `ExcelExport` module is used to handle the Excel export action.\n */\n\nvar ExcelExport =\n/** @class */\nfunction () {\n  /**\n   * Constructor for the Grid Excel Export module.\n   * @hidden\n   */\n  function ExcelExport(parent, locator) {\n    /* tslint:disable-next-line:no-any */\n    this.book = {};\n    this.workSheet = [];\n    this.rows = [];\n    this.columns = [];\n    this.styles = [];\n    this.rowLength = 1;\n    this.expType = 'AppendToSheet';\n    this.includeHiddenColumn = false;\n    this.isCsvExport = false;\n    this.isElementIdChanged = false;\n    this.foreignKeyData = {};\n    this.gridPool = {};\n    this.parent = parent;\n    this.helper = new ExportHelper(parent);\n    this.locator = locator;\n    this.l10n = this.locator.getService('localization');\n  }\n  /**\n   * For internal use only - Get the module name.\n   */\n\n\n  ExcelExport.prototype.getModuleName = function () {\n    return 'ExcelExport';\n  };\n\n  ExcelExport.prototype.init = function (gObj) {\n    if (gObj.element !== null && gObj.element.id === '') {\n      gObj.element.id = new Date().toISOString();\n      this.isElementIdChanged = true;\n    }\n\n    this.parent = gObj;\n\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.isExporting = undefined;\n    this.book = {};\n    this.workSheet = [];\n    this.rows = [];\n    this.columns = [];\n    this.styles = [];\n    this.rowLength = 1;\n    this.footer = undefined;\n    this.expType = 'AppendToSheet';\n    this.includeHiddenColumn = false;\n    this.exportValueFormatter = new ExportValueFormatter(gObj.locale);\n    gObj.id = getUid('main-grid');\n    this.gridPool[gObj.id] = false;\n  };\n  /**\n   * Export Grid to Excel file.\n   * @param  {exportProperties} exportProperties - Defines the export properties of the Grid.\n   * @param  {isMultipleExport} isMultipleExport - Defines is multiple Grid's are exported.\n   * @param  {workbook} workbook - Defined the Workbook if multiple Grid is exported.\n   * @param  {isCsv} isCsv - true if export to CSV.\n   * @return {Promise<any>}\n   */\n\n  /* tslint:disable-next-line:max-line-length */\n\n  /* tslint:disable-next-line:no-any */\n\n\n  ExcelExport.prototype.Map = function (grid, exportProperties, isMultipleExport, workbook, isCsv, isBlob) {\n    var gObj = grid;\n    var cancel = 'cancel';\n    var isBlb = 'isBlob';\n    var csv = 'isCsv';\n    var workbk = 'workbook';\n    var isMultiEx = 'isMultipleExport';\n    this.gridPool = {};\n\n    if (grid.childGrid && !(!isNullOrUndefined(exportProperties) && exportProperties.hierarchyExportMode === 'None')) {\n      grid.expandedRows = getPrintGridModel(grid).expandedRows;\n    }\n\n    var args = {\n      requestType: 'beforeExcelExport',\n      gridObject: gObj,\n      cancel: false,\n      isMultipleExport: isMultipleExport,\n      workbook: workbook,\n      isCsv: isCsv,\n      isBlob: isBlob\n    };\n    gObj.trigger(events.beforeExcelExport, args);\n\n    if (args[cancel]) {\n      return new Promise(function (resolve, reject) {\n        return resolve();\n      });\n    }\n\n    this.parent.log('exporting_begin', this.getModuleName());\n    this.data = new Data(gObj);\n    this.isExporting = true;\n    this.isBlob = args[isBlb];\n\n    if (args[csv]) {\n      this.isCsvExport = args[csv];\n    } else {\n      this.isCsvExport = false;\n    }\n\n    return this.processRecords(gObj, exportProperties, args[isMultiEx], args[workbk]);\n  };\n\n  ExcelExport.prototype.exportingSuccess = function (resolve) {\n    this.isExporting = false;\n    this.parent.trigger(events.excelExportComplete, this.isBlob ? {\n      promise: this.blobPromise\n    } : {});\n    this.parent.log('exporting_complete', this.getModuleName());\n    resolve(this.book);\n  };\n  /* tslint:disable-next-line:no-any */\n\n\n  ExcelExport.prototype.processRecords = function (gObj, exportProperties, isMultipleExport, workbook) {\n    var _this = this;\n\n    if (!isNullOrUndefined(exportProperties) && !isNullOrUndefined(exportProperties.dataSource) && exportProperties.dataSource instanceof DataManager) {\n      return new Promise(function (resolve, reject) {\n        var dataManager = exportProperties.dataSource.executeQuery(new Query());\n        dataManager.then(function (r) {\n          _this.init(gObj);\n\n          _this.processInnerRecords(gObj, exportProperties, isMultipleExport, workbook, r).then(function () {\n            _this.exportingSuccess(resolve);\n          });\n        });\n      });\n    } else if (!isNullOrUndefined(exportProperties) && exportProperties.exportType === 'CurrentPage') {\n      return new Promise(function (resolve, reject) {\n        _this.init(gObj);\n\n        _this.processInnerRecords(gObj, exportProperties, isMultipleExport, workbook, _this.parent.getCurrentViewRecords());\n\n        _this.exportingSuccess(resolve);\n      });\n    } else {\n      var allPromise_1 = [];\n      allPromise_1.push(this.data.getData({}, ExportHelper.getQuery(gObj, this.data)));\n      allPromise_1.push(this.helper.getColumnData(gObj));\n      return new Promise(function (resolve, reject) {\n        Promise.all(allPromise_1).then(function (e) {\n          _this.init(gObj);\n\n          _this.processInnerRecords(gObj, exportProperties, isMultipleExport, workbook, e[0]).then(function () {\n            _this.exportingSuccess(resolve);\n          });\n        }).catch(function (e) {\n          reject(_this.book);\n\n          _this.parent.trigger(events.actionFailure, e);\n        });\n      });\n    }\n  };\n  /* tslint:disable-next-line:max-func-body-length */\n\n\n  ExcelExport.prototype.processInnerRecords = function (gObj, exportProperties,\n  /* tslint:disable-next-line:no-any */\n  isMultipleExport, workbook, r) {\n    var _this = this;\n\n    this.groupedColLength = gObj.groupSettings.columns.length;\n    var blankRows = 5;\n    var rows = [];\n\n    if (!isNullOrUndefined(exportProperties) && !isNullOrUndefined(exportProperties.multipleExport)) {\n      /* tslint:disable-next-line:max-line-length */\n      this.expType = !isNullOrUndefined(exportProperties.multipleExport.type) ? exportProperties.multipleExport.type : 'AppendToSheet';\n\n      if (!isNullOrUndefined(exportProperties.multipleExport.blankRows)) {\n        blankRows = exportProperties.multipleExport.blankRows;\n      }\n    }\n\n    if (isNullOrUndefined(workbook)) {\n      this.workSheet = [];\n      this.rows = [];\n      this.columns = [];\n      this.styles = [];\n    } else if (this.expType === 'NewSheet') {\n      this.workSheet = workbook.worksheets;\n      this.rows = [];\n      this.columns = [];\n      this.styles = workbook.styles;\n    } else {\n      this.workSheet = [];\n      this.rows = workbook.worksheets[0].rows;\n      this.columns = workbook.worksheets[0].columns;\n      this.styles = workbook.styles;\n      this.rowLength = this.rows[this.rows.length - 1].index + blankRows;\n      this.rowLength++;\n    }\n\n    if (!isNullOrUndefined(exportProperties)) {\n      if (!isNullOrUndefined(isMultipleExport)) {\n        if (!isNullOrUndefined(exportProperties.header) && (isMultipleExport || this.expType === 'NewSheet')) {\n          this.processExcelHeader(JSON.parse(JSON.stringify(exportProperties.header)));\n        }\n\n        if (!isNullOrUndefined(exportProperties.footer)) {\n          if (this.expType === 'AppendToSheet') {\n            if (!isMultipleExport) {\n              this.footer = JSON.parse(JSON.stringify(exportProperties.footer));\n            }\n          } else {\n            this.footer = JSON.parse(JSON.stringify(exportProperties.footer));\n          }\n        }\n      } else {\n        if (!isNullOrUndefined(exportProperties.header)) {\n          this.processExcelHeader(JSON.parse(JSON.stringify(exportProperties.header)));\n        }\n\n        if (!isNullOrUndefined(exportProperties.footer)) {\n          this.footer = JSON.parse(JSON.stringify(exportProperties.footer));\n        }\n      }\n    }\n\n    this.includeHiddenColumn = !isNullOrUndefined(exportProperties) ? exportProperties.includeHiddenColumn : false;\n    return new Promise(function (resolve, reject) {\n      gObj.childGridLevel = 0;\n      rows = _this.processGridExport(gObj, exportProperties, r);\n      _this.globalResolve = resolve;\n      _this.gridPool[gObj.id] = true;\n\n      _this.helper.checkAndExport(_this.gridPool, _this.globalResolve);\n    }).then(function () {\n      var organisedRows = [];\n\n      _this.organiseRows(rows, rows[0].index, organisedRows);\n\n      _this.rows = _this.rows.concat(organisedRows); //footer template add\n\n      if (!isNullOrUndefined(_this.footer)) {\n        if (_this.expType === 'AppendToSheet' && !isMultipleExport || _this.expType === 'NewSheet') {\n          _this.processExcelFooter(_this.footer);\n        }\n      }\n\n      var sheet = {};\n\n      if (_this.columns.length > 0) {\n        sheet.columns = _this.columns;\n      }\n      /* tslint:disable-next-line:no-any */\n\n\n      sheet.rows = _this.rows;\n\n      _this.workSheet.push(sheet);\n\n      _this.book.worksheets = _this.workSheet;\n      _this.book.styles = _this.styles;\n\n      if (!isMultipleExport) {\n        if (_this.isCsvExport) {\n          if (isBlazor() && gObj.isServerRendered) {\n            _this.book.isServerRendered = gObj.isServerRendered;\n          }\n\n          var book = new Workbook(_this.book, 'csv', gObj.locale, gObj.currencyCode);\n\n          if (!_this.isBlob) {\n            if (!isNullOrUndefined(exportProperties) && exportProperties.fileName) {\n              book.save(exportProperties.fileName);\n            } else {\n              book.save('Export.csv');\n            }\n          } else {\n            _this.blobPromise = book.saveAsBlob('text/csv');\n          }\n        } else {\n          var book = new Workbook(_this.book, 'xlsx', gObj.locale, gObj.currencyCode);\n\n          if (!_this.isBlob) {\n            if (!isNullOrUndefined(exportProperties) && exportProperties.fileName) {\n              book.save(exportProperties.fileName);\n            } else {\n              book.save('Export.xlsx');\n            }\n          } else {\n            _this.blobPromise = book.saveAsBlob('application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\n          }\n        }\n\n        if (_this.isElementIdChanged) {\n          gObj.element.id = '';\n        }\n\n        delete gObj.expandedRows;\n      }\n\n      return workbook;\n    });\n  };\n\n  ExcelExport.prototype.organiseRows = function (rows, initialIndex, organisedRows) {\n    if (!rows.length) {\n      return initialIndex;\n    }\n\n    for (var i = 0; i < rows.length; i++) {\n      var row = rows[i];\n      var childRows = row.childRows;\n\n      if (childRows) {\n        row.index = initialIndex++;\n        delete row.childRows;\n        organisedRows.push(row);\n        initialIndex = this.organiseRows(childRows, initialIndex, organisedRows);\n      } else {\n        row.index = initialIndex++;\n        organisedRows.push(row);\n      }\n    }\n\n    return initialIndex;\n  };\n\n  ExcelExport.prototype.processGridExport = function (gObj, exportProperties, r) {\n    var excelRows = [];\n\n    if (!isNullOrUndefined(exportProperties) && !isNullOrUndefined(exportProperties.theme)) {\n      this.theme = exportProperties.theme;\n    }\n\n    if (gObj.childGrid && !isNullOrUndefined(exportProperties)) {\n      gObj.hierarchyPrintMode = exportProperties.hierarchyExportMode || 'Expanded';\n    }\n\n    var helper = new ExportHelper(gObj);\n    var headerRow = helper.getHeaders(gObj.columns, this.includeHiddenColumn);\n    var groupIndent = gObj.groupSettings.columns.length;\n    excelRows = this.processHeaderContent(gObj, headerRow, groupIndent, excelRows);\n    /* tslint:disable-next-line:max-line-length */\n\n    if (!isNullOrUndefined(exportProperties) && !isNullOrUndefined(exportProperties.dataSource) && !(exportProperties.dataSource instanceof DataManager)) {\n      excelRows = this.processRecordContent(gObj, r, headerRow, exportProperties, exportProperties.dataSource, excelRows, helper);\n    } else if (!isNullOrUndefined(exportProperties) && exportProperties.exportType === 'CurrentPage') {\n      excelRows = this.processRecordContent(gObj, r, headerRow, exportProperties, gObj.currentViewData, excelRows, helper);\n    } else {\n      excelRows = this.processRecordContent(gObj, r, headerRow, exportProperties, undefined, excelRows, helper);\n    }\n\n    return excelRows;\n  };\n\n  ExcelExport.prototype.processRecordContent = function (gObj, returnType, headerRow, exportProperties, currentViewRecords, excelRow, helper) {\n    var record;\n\n    if (!isNullOrUndefined(currentViewRecords)) {\n      record = currentViewRecords;\n    } else {\n      record = returnType.result;\n    }\n\n    if (!isNullOrUndefined(record.level)) {\n      this.processGroupedRows(gObj, record, headerRow, record.level, 0, exportProperties, excelRow, helper);\n    } else {\n      this.processRecordRows(gObj, record, headerRow, 0, 0, exportProperties, excelRow, helper);\n    }\n\n    if (!isNullOrUndefined(returnType.aggregates)) {\n      if (!isNullOrUndefined(currentViewRecords)) {\n        this.processAggregates(gObj, returnType.result, excelRow, currentViewRecords);\n      } else {\n        var result = returnType.result.GroupGuid ? returnType.result.records : returnType.result;\n        this.processAggregates(gObj, result, excelRow);\n      }\n    }\n\n    return excelRow;\n  };\n  /* tslint:disable-next-line:no-any */\n\n\n  ExcelExport.prototype.processGroupedRows = function (gObj, dataSource, headerRow, level, startIndex, excelExportProperties, excelRows, helper) {\n    for (var _i = 0, dataSource_1 = dataSource; _i < dataSource_1.length; _i++) {\n      var item = dataSource_1[_i];\n      var cells = [];\n      var index = 1;\n      /* tslint:disable-next-line:no-any */\n\n      var cell = {};\n      cell.index = index + level;\n      var col = gObj.getColumnByField(item.field);\n      /* tslint:disable-next-line:no-any */\n\n      var args = {\n        value: item.key,\n        column: col,\n        style: undefined,\n        isForeignKey: col.isForeignColumn()\n      };\n      cell.value = gObj.getColumnByField(item.field).headerText + ': ' + (!col.enableGroupByFormat ? this.exportValueFormatter.formatCellValue(args) : item.key) + ' - ';\n\n      if (item.count > 1) {\n        cell.value += item.count + ' items';\n      } else {\n        cell.value += item.count + ' item';\n      }\n\n      cell.style = this.getCaptionThemeStyle(this.theme);\n      var captionModelGen = new CaptionSummaryModelGenerator(gObj);\n      var groupCaptionSummaryRows = captionModelGen.generateRows(item);\n      this.fillAggregates(gObj, groupCaptionSummaryRows, dataSource.level + dataSource.childLevels, excelRows, this.rowLength);\n      cells.push(cell);\n\n      if (excelRows[excelRows.length - 1].cells.length > 0) {\n        var lIndex = dataSource.level + dataSource.childLevels + groupCaptionSummaryRows[0].cells.length;\n        var hIndex = 0;\n\n        for (var _a = 0, _b = excelRows[excelRows.length - 1].cells; _a < _b.length; _a++) {\n          var tCell = _b[_a];\n\n          if (tCell.index < lIndex) {\n            lIndex = tCell.index;\n          }\n\n          if (tCell.index > hIndex) {\n            hIndex = tCell.index;\n          }\n\n          if (cells[cells.length - 1].index !== tCell.index) {\n            cells.push(tCell);\n          }\n        }\n\n        if (lIndex - cell.index > 1) {\n          cell.colSpan = lIndex - cell.index;\n        }\n\n        while (hIndex < headerRow.columns.length + level + dataSource.childLevels) {\n          /* tslint:disable-next-line:no-any */\n          var sCell = {};\n          sCell.index = hIndex + 1;\n          sCell.style = this.getCaptionThemeStyle(this.theme);\n          cells.push(sCell);\n          hIndex++;\n        }\n      } else {\n        var span = 0; //Calculation for column span when group caption dont have aggregates\n\n        for (var _c = 0, _d = headerRow.columns; _c < _d.length; _c++) {\n          var col_1 = _d[_c];\n\n          if (col_1.visible) {\n            span++;\n          }\n        }\n\n        cell.colSpan = dataSource.childLevels + span;\n      }\n\n      excelRows[excelRows.length - 1].cells = cells;\n      this.rowLength++;\n\n      if (this.groupedColLength < 8 && level > 1) {\n        var grouping = {\n          outlineLevel: level - 1,\n          isCollapsed: true\n        };\n        excelRows[excelRows.length - 1].grouping = grouping;\n      }\n\n      if (!isNullOrUndefined(dataSource.childLevels) && dataSource.childLevels > 0) {\n        this.processGroupedRows(gObj, item.items, headerRow, item.items.level, startIndex, excelExportProperties, excelRows, helper);\n      } else {\n        startIndex = this.processRecordRows(gObj, item.items, headerRow, level, startIndex, excelExportProperties, excelRows, helper);\n        this.processAggregates(gObj, item, excelRows, undefined, level, true);\n      }\n    }\n  };\n\n  ExcelExport.prototype.processRecordRows = function (gObj, record, headerRow, level, startIndex, excelExportProperties, excelRows, helper) {\n    var index = 1;\n    var cells = [];\n    var columns = headerRow.columns;\n    var rows = helper.getGridRowModel(columns, record, gObj, startIndex);\n\n    for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {\n      var row = rows_1[_i];\n      cells = [];\n      startIndex++;\n      index = 1;\n\n      for (var c = 0, len = row.cells.length; c < len; c++) {\n        var gCell = row.cells[c];\n\n        if (gCell.cellType !== CellType.Data) {\n          continue;\n        }\n\n        var column = gCell.column;\n        var field = column.field;\n        var cellValue = !isNullOrUndefined(field) ? column.valueAccessor(field, row.data, column) : '';\n        var value = !isNullOrUndefined(cellValue) ? cellValue : '';\n        var fkData = void 0;\n\n        if (column.isForeignColumn && column.isForeignColumn()) {\n          fkData = helper.getFData(value, column);\n          value = getValue(column.foreignKeyValue, fkData);\n        }\n\n        if (!isNullOrUndefined(value)) {\n          var cell = {};\n          /* tslint:disable-next-line:no-any */\n\n          var excelCellArgs = {\n            data: row.data,\n            column: column,\n            foreignKeyData: fkData,\n            value: value,\n            style: undefined,\n            colSpan: 1,\n            cell: cell\n          };\n          gObj.trigger(events.excelQueryCellInfo, excelCellArgs);\n          cell = excelCellArgs.cell;\n          cell.index = index + level + gObj.childGridLevel;\n          cell.value = excelCellArgs.value;\n\n          if (excelCellArgs.data === '' && gObj.childGridLevel && index === 1) {\n            var style = {};\n            style.hAlign = 'left';\n            excelCellArgs = {\n              style: style\n            };\n            cell.colSpan = gObj.getVisibleColumns().length;\n            cell.value = this.l10n.getConstant('EmptyRecord');\n          }\n\n          if (excelCellArgs.colSpan > 1) {\n            cell.colSpan = excelCellArgs.colSpan;\n          }\n\n          if (!isNullOrUndefined(excelCellArgs.style)) {\n            var styleIndex = this.getColumnStyle(gObj, index + level);\n            cell.style = this.mergeOptions(this.styles[styleIndex], excelCellArgs.style);\n          } else {\n            cell.style = {\n              name: gObj.element.id + 'column' + (index + level)\n            };\n          }\n\n          cells.push(cell);\n        }\n\n        index++;\n      }\n\n      var excelRow = {\n        index: this.rowLength++,\n        cells: cells\n      };\n\n      if (this.groupedColLength < 8 && level > 0) {\n        excelRow.grouping = {\n          outlineLevel: level,\n          isCollapsed: true\n        };\n        excelRows.push(excelRow);\n      } else {\n        excelRows.push(excelRow);\n      }\n\n      if (!isNullOrUndefined(gObj.childGrid)) {\n        gObj.isPrinting = true;\n        var exportType = !isNullOrUndefined(excelExportProperties) && excelExportProperties.exportType ? excelExportProperties.exportType : 'AllPages';\n        var returnVal = this.helper.createChildGrid(gObj, row, exportType, this.gridPool);\n        var childGridObj = returnVal.childGrid;\n        var element = returnVal.element;\n        childGridObj.actionFailure = helper.failureHandler(this.gridPool, childGridObj, this.globalResolve);\n        childGridObj.childGridLevel = gObj.childGridLevel + 1;\n        var args = {\n          childGrid: childGridObj,\n          row: row,\n          exportProperties: excelExportProperties\n        };\n        this.parent.trigger(events.exportDetailDataBound, args);\n        childGridObj.beforeDataBound = this.childGridCell(excelRow, childGridObj, excelExportProperties, row);\n        childGridObj.appendTo(element);\n      }\n\n      gObj.notify(events.exportRowDataBound, {\n        rowObj: row,\n        type: 'excel'\n      });\n    }\n\n    return startIndex;\n  };\n\n  ExcelExport.prototype.childGridCell = function (excelRow, childGridObj, excelExportProps, gRow) {\n    var _this = this;\n\n    return function (result) {\n      childGridObj.beforeDataBound = null;\n      result.cancel = true;\n\n      if (result.result.length === 0) {\n        result.result = [''];\n      }\n\n      excelRow.childRows = _this.processGridExport(childGridObj, excelExportProps, result);\n      var intent = _this.parent.groupSettings.columns.length;\n      excelRow.childRows.forEach(function (row) {\n        row.grouping = {\n          outlineLevel: intent + childGridObj.childGridLevel,\n          isCollapsed: !gRow.isExpand,\n          isHidden: !gRow.isExpand\n        };\n      });\n      childGridObj.destroy();\n      detach(childGridObj.element);\n      _this.gridPool[childGridObj.id] = true;\n\n      _this.helper.checkAndExport(_this.gridPool, _this.globalResolve);\n\n      return excelRow;\n    };\n  }; // tslint:disable-next-line:max-line-length\n\n\n  ExcelExport.prototype.processAggregates = function (gObj, rec, excelRows, currentViewRecords, indent, byGroup) {\n    var summaryModel = new SummaryModelGenerator(gObj);\n\n    if (gObj.aggregates.length && this.parent !== gObj) {\n      gObj.aggregateModule.prepareSummaryInfo();\n    }\n\n    var data = undefined;\n\n    if (!isNullOrUndefined(currentViewRecords)) {\n      data = currentViewRecords;\n    } else {\n      data = rec;\n    }\n\n    if (indent === undefined) {\n      indent = 0;\n    }\n\n    if (gObj.groupSettings.columns.length > 0 && byGroup) {\n      var groupSummaryModel = new GroupSummaryModelGenerator(gObj);\n      var groupSummaryRows = groupSummaryModel.generateRows(data, {\n        level: data.level\n      });\n\n      if (groupSummaryRows.length > 0) {\n        excelRows = this.fillAggregates(gObj, groupSummaryRows, indent, excelRows);\n      }\n    } else {\n      indent = gObj.groupSettings.columns.length > 0 && !byGroup ? gObj.groupSettings.columns.length : indent;\n      var sRows = summaryModel.generateRows(data, rec.aggregates);\n\n      if (sRows.length > 0 && !byGroup) {\n        excelRows = this.fillAggregates(gObj, sRows, indent, excelRows);\n      }\n    }\n\n    return excelRows;\n  }; // tslint:disable-next-line:max-line-length\n\n\n  ExcelExport.prototype.fillAggregates = function (gObj, rows, indent, excelRows, customIndex) {\n    for (var _i = 0, rows_2 = rows; _i < rows_2.length; _i++) {\n      var row = rows_2[_i];\n      var cells = [];\n      var index = 0;\n\n      for (var _a = 0, _b = row.cells; _a < _b.length; _a++) {\n        var cell = _b[_a];\n        /* tslint:disable-next-line:no-any */\n\n        var eCell = {};\n\n        if (cell.cellType === CellType.DetailFooterIntent) {\n          continue;\n        }\n\n        if (cell.visible || this.includeHiddenColumn) {\n          index++;\n\n          if (cell.isDataCell) {\n            eCell.index = index + indent + gObj.childGridLevel;\n\n            if (!isNullOrUndefined(cell.column.footerTemplate)) {\n              eCell.value = this.getAggreateValue(CellType.Summary, cell.column.footerTemplate, cell, row);\n            } else if (!isNullOrUndefined(cell.column.groupFooterTemplate)) {\n              eCell.value = this.getAggreateValue(CellType.GroupSummary, cell.column.groupFooterTemplate, cell, row);\n            } else if (!isNullOrUndefined(cell.column.groupCaptionTemplate)) {\n              eCell.value = this.getAggreateValue(CellType.CaptionSummary, cell.column.groupCaptionTemplate, cell, row);\n            } else {\n              for (var _c = 0, _d = Object.keys(row.data[cell.column.field]); _c < _d.length; _c++) {\n                var key = _d[_c];\n\n                if (key === cell.column.type) {\n                  if (!isNullOrUndefined(row.data[cell.column.field].Sum)) {\n                    eCell.value = row.data[cell.column.field][cell.column.field + \" - sum\"];\n                  } else if (!isNullOrUndefined(row.data[cell.column.field].Average)) {\n                    eCell.value = row.data[cell.column.field][cell.column.field + \" - average\"];\n                  } else if (!isNullOrUndefined(row.data[cell.column.field].Max)) {\n                    eCell.value = row.data[cell.column.field][cell.column.field + \" - max\"];\n                  } else if (!isNullOrUndefined(row.data[cell.column.field].Min)) {\n                    eCell.value = row.data[cell.column.field][cell.column.field + \" - min\"];\n                  } else if (!isNullOrUndefined(row.data[cell.column.field].Count)) {\n                    eCell.value = row.data[cell.column.field][cell.column.field + \" - count\"];\n                  } else if (!isNullOrUndefined(row.data[cell.column.field].TrueCount)) {\n                    eCell.value = row.data[cell.column.field][cell.column.field + \" - truecount\"];\n                  } else if (!isNullOrUndefined(row.data[cell.column.field].FalseCount)) {\n                    eCell.value = row.data[cell.column.field][cell.column.field + \" - falsecount\"];\n                  } else if (!isNullOrUndefined(row.data[cell.column.field].Custom)) {\n                    eCell.value = row.data[cell.column.field].Custom;\n                  }\n                }\n              }\n            }\n\n            eCell.style = this.getCaptionThemeStyle(this.theme); //{ name: gObj.element.id + 'column' + index };\n\n            this.aggregateStyle(cell.column, eCell.style, cell.column.field);\n            var gridCellStyle = cell.attributes.style;\n\n            if (gridCellStyle.textAlign) {\n              eCell.style.hAlign = gridCellStyle.textAlign.toLowerCase();\n            }\n\n            cells.push(eCell);\n          } else {\n            if (customIndex === undefined) {\n              eCell.index = index + indent + gObj.childGridLevel;\n              eCell.style = this.getCaptionThemeStyle(this.theme); //{ name: gObj.element.id + 'column' + index };\n\n              cells.push(eCell);\n            }\n          }\n        }\n      }\n\n      if (!isNullOrUndefined(customIndex)) {\n        excelRows.push({\n          index: customIndex,\n          cells: cells\n        });\n      } else {\n        var row_1 = {};\n\n        if (this.groupedColLength < 8 && this.groupedColLength > 0) {\n          var dummyOutlineLevel = 'outlineLevel';\n          var dummyGrouping = 'grouping';\n          var level = excelRows[excelRows.length - 1][dummyGrouping][dummyOutlineLevel];\n          var grouping = {\n            outlineLevel: level,\n            isCollapsed: true\n          };\n          row_1 = {\n            index: this.rowLength++,\n            cells: cells,\n            grouping: grouping\n          };\n        } else {\n          row_1 = {\n            index: this.rowLength++,\n            cells: cells\n          };\n        }\n\n        excelRows.push(row_1);\n      }\n    }\n\n    return excelRows;\n  };\n\n  ExcelExport.prototype.aggregateStyle = function (col, style, field) {\n    var column = this.parent.getColumnByField(field);\n\n    if (typeof col.format === 'object') {\n      var format = col.format;\n      style.numberFormat = !isNullOrUndefined(format.format) ? format.format : format.skeleton;\n\n      if (!isNullOrUndefined(format.type)) {\n        style.type = format.type.toLowerCase();\n      }\n    } else {\n      style.numberFormat = col.format;\n    }\n\n    if (!isNullOrUndefined(column) && isNullOrUndefined(style.type)) {\n      style.type = column.type.toLowerCase();\n    }\n  };\n\n  ExcelExport.prototype.getAggreateValue = function (cellType, template, cell, row) {\n    var templateFn = {};\n    templateFn[getEnumValue(CellType, cell.cellType)] = compile(template);\n    /* tslint:disable-next-line:max-line-length */\n\n    var txt = templateFn[getEnumValue(CellType, cell.cellType)](row.data[cell.column.field ? cell.column.field : cell.column.columnName]);\n    return txt[0].textContent;\n  };\n\n  ExcelExport.prototype.mergeOptions = function (JSON1, JSON2) {\n    var result = {};\n    var attrname = Object.keys(JSON1);\n\n    for (var index = 0; index < attrname.length; index++) {\n      if (attrname[index] !== 'name') {\n        result[attrname[index]] = JSON1[attrname[index]];\n      }\n    }\n\n    attrname = Object.keys(JSON2);\n\n    for (var index = 0; index < attrname.length; index++) {\n      if (attrname[index] !== 'name') {\n        result[attrname[index]] = JSON2[attrname[index]];\n      }\n    }\n\n    return result;\n  };\n\n  ExcelExport.prototype.getColumnStyle = function (gObj, columnIndex) {\n    var index = 0;\n\n    for (var _i = 0, _a = this.styles; _i < _a.length; _i++) {\n      var style = _a[_i];\n\n      if (style.name === gObj.element.id + 'column' + columnIndex) {\n        return index;\n      }\n\n      index++;\n    }\n\n    return undefined;\n  };\n\n  ExcelExport.prototype.processHeaderContent = function (gObj, headerRow, indent, excelRows) {\n    var rowIndex = 1;\n    var gridRows = headerRow.rows; // Column collection with respect to the records in the grid\n\n    var gridColumns = headerRow.columns;\n    var spannedCells = [];\n\n    if (indent > 0) {\n      var index = 0;\n\n      while (index !== indent) {\n        this.columns.push({\n          index: index + 1,\n          width: 30\n        });\n        index++;\n      }\n    }\n\n    for (var row = 0; row < gridRows.length; row++) {\n      var currentCellIndex = 1 + indent;\n      var cells = [];\n\n      for (var column = 0; column < gridRows[row].cells.length; column++) {\n        /* tslint:disable-next-line:no-any */\n        var style = {};\n        var cell = {};\n        var gridCell = gridRows[row].cells[column];\n\n        if (gridCell.cellType === CellType.HeaderIndent || gridCell.cellType === CellType.DetailHeader) {\n          continue;\n        }\n\n        var result = {\n          contains: true,\n          index: 1\n        };\n\n        while (result.contains) {\n          result = this.getIndex(spannedCells, rowIndex, currentCellIndex);\n          currentCellIndex = result.index;\n\n          if (!result.contains) {\n            cell.index = result.index + gObj.childGridLevel;\n            break;\n          }\n        }\n\n        if (!isNullOrUndefined(gridCell.rowSpan) && gridCell.rowSpan !== 1) {\n          cell.rowSpan = gridCell.rowSpan;\n\n          for (var i = rowIndex; i < gridCell.rowSpan + rowIndex; i++) {\n            var spannedCell = {\n              rowIndex: 0,\n              columnIndex: 0\n            };\n            spannedCell.rowIndex = i;\n            spannedCell.columnIndex = currentCellIndex;\n            spannedCells.push(spannedCell);\n          }\n        }\n\n        if (!isNullOrUndefined(gridCell.colSpan) && gridCell.colSpan !== 1) {\n          cell.colSpan = gridCell.colSpan;\n          currentCellIndex = currentCellIndex + cell.colSpan - 1;\n        }\n\n        cell.value = gridCell.column.headerText;\n        style = this.getHeaderThemeStyle(this.theme);\n\n        if (!isNullOrUndefined(gridCell.column.textAlign)) {\n          style.hAlign = gridCell.column.textAlign.toLowerCase();\n        }\n\n        if (!isNullOrUndefined(gridCell.column.headerTextAlign)) {\n          style.hAlign = gridCell.column.headerTextAlign.toLowerCase();\n        }\n\n        var excelHeaderCellArgs = {\n          cell: cell,\n          gridCell: gridCell,\n          style: style\n        };\n        gObj.trigger(events.excelHeaderQueryCellInfo, excelHeaderCellArgs);\n        cell.style = excelHeaderCellArgs.style;\n        cells.push(cell);\n        currentCellIndex++;\n      }\n\n      excelRows.push({\n        index: this.rowLength++,\n        cells: cells\n      });\n    }\n\n    for (var col = 0; col < gridColumns.length; col++) {\n      this.parseStyles(gObj, gridColumns[col], this.getRecordThemeStyle(this.theme), indent + col + 1);\n    }\n\n    return excelRows;\n  };\n\n  ExcelExport.prototype.getHeaderThemeStyle = function (theme) {\n    var style = {};\n    style.fontSize = 12;\n    style.borders = {\n      color: '#E0E0E0'\n    };\n    style.bold = true;\n\n    if (!isNullOrUndefined(theme) && !isNullOrUndefined(theme.header)) {\n      style = this.updateThemeStyle(theme.header, style);\n    }\n\n    return style;\n  };\n\n  ExcelExport.prototype.updateThemeStyle = function (themestyle, style) {\n    return extend(style, themestyle);\n  };\n\n  ExcelExport.prototype.getCaptionThemeStyle = function (theme) {\n    var style = {};\n    style.fontSize = 13;\n    style.backColor = '#F6F6F6';\n\n    if (!isNullOrUndefined(theme) && !isNullOrUndefined(theme.caption)) {\n      style = this.updateThemeStyle(theme.caption, style);\n    }\n\n    return style;\n  };\n\n  ExcelExport.prototype.getRecordThemeStyle = function (theme) {\n    var style = {};\n    style.fontSize = 13;\n    style.borders = {\n      color: '#E0E0E0'\n    };\n\n    if (!isNullOrUndefined(theme) && !isNullOrUndefined(theme.record)) {\n      style = this.updateThemeStyle(theme.record, style);\n    }\n\n    return style;\n  };\n\n  ExcelExport.prototype.processExcelHeader = function (header) {\n    if (!isNullOrUndefined(header.rows) && (this.expType === 'NewSheet' || this.rowLength === 1)) {\n      var noRows = void 0;\n\n      if (header.headerRows === undefined) {\n        this.rowLength = header.rows.length;\n      } else {\n        this.rowLength = header.headerRows;\n      }\n\n      if (this.rowLength < header.rows.length) {\n        noRows = this.rowLength;\n      } else {\n        noRows = header.rows.length;\n      }\n\n      this.rowLength++;\n\n      for (var row = 0; row < noRows; row++) {\n        var json = header.rows[row]; //Row index\n\n        if (!(json.index !== null && !isNullOrUndefined(json.index))) {\n          json.index = row + 1;\n        }\n\n        this.updatedCellIndex(json);\n      }\n    }\n  };\n\n  ExcelExport.prototype.updatedCellIndex = function (json) {\n    var cellsLength = json.cells.length;\n\n    for (var cellId = 0; cellId < cellsLength; cellId++) {\n      var jsonCell = json.cells[cellId]; //cell index\n\n      if (!(jsonCell.index !== null && !isNullOrUndefined(jsonCell.index))) {\n        jsonCell.index = cellId + 1;\n      }\n    }\n\n    this.rows.push(json);\n  };\n\n  ExcelExport.prototype.processExcelFooter = function (footer) {\n    if (!isNullOrUndefined(footer.rows)) {\n      var noRows = void 0;\n\n      if (footer.footerRows === undefined) {\n        this.rowLength += footer.rows.length;\n      } else {\n        if (footer.footerRows > footer.rows.length) {\n          this.rowLength += footer.footerRows - footer.rows.length;\n          noRows = footer.rows.length;\n        } else {\n          noRows = footer.footerRows;\n        }\n      }\n\n      for (var row = 0; row < noRows; row++) {\n        var json = footer.rows[row]; //Row index\n\n        if (json.index === null || json.index === undefined) {\n          json.index = this.rowLength++;\n        } else {\n          json.index += this.rowLength;\n        }\n\n        this.updatedCellIndex(json);\n      }\n    }\n  };\n\n  ExcelExport.prototype.getIndex = function (spannedCells, rowIndex, columnIndex) {\n    for (var _i = 0, spannedCells_1 = spannedCells; _i < spannedCells_1.length; _i++) {\n      var spannedCell = spannedCells_1[_i];\n\n      if (spannedCell.rowIndex === rowIndex && spannedCell.columnIndex === columnIndex) {\n        columnIndex = columnIndex + 1;\n        return {\n          contains: true,\n          index: columnIndex\n        };\n      }\n    }\n\n    return {\n      contains: false,\n      index: columnIndex\n    };\n  };\n\n  ExcelExport.prototype.parseStyles = function (gObj, col, style, index) {\n    if (!isNullOrUndefined(col.format)) {\n      if (typeof col.format === 'object') {\n        var format = col.format;\n        style.numberFormat = !isNullOrUndefined(format.format) ? format.format : format.skeleton;\n\n        if (!isNullOrUndefined(format.type)) {\n          style.type = format.type.toLowerCase();\n        }\n      } else {\n        style.numberFormat = col.format;\n        style.type = col.type;\n      }\n    }\n\n    if (!isNullOrUndefined(col.textAlign)) {\n      style.hAlign = col.textAlign.toLowerCase();\n    }\n\n    if (Object.keys(style).length > 0) {\n      style.name = gObj.element.id + 'column' + index;\n      this.styles.push(style);\n    }\n\n    if (!isNullOrUndefined(col.width)) {\n      this.columns.push({\n        index: index + gObj.childGridLevel,\n        width: typeof col.width === 'number' ? col.width : this.helper.getConvertedWidth(col.width)\n      });\n    }\n  };\n  /**\n   * To destroy the excel export\n   * @return {void}\n   * @hidden\n   */\n\n\n  ExcelExport.prototype.destroy = function () {//destroy for exporting\n  };\n\n  return ExcelExport;\n}();\n\nexport { ExcelExport };","map":{"version":3,"sources":["C:/CN2/workspace-trunk/kain-front-end/node_modules/@syncfusion/ej2-grids/src/grid/actions/excel-export.js"],"names":["events","Workbook","isNullOrUndefined","getEnumValue","compile","getValue","detach","extend","isBlazor","Data","ExportHelper","ExportValueFormatter","SummaryModelGenerator","GroupSummaryModelGenerator","CaptionSummaryModelGenerator","CellType","Query","DataManager","getPrintGridModel","getUid","ExcelExport","parent","locator","book","workSheet","rows","columns","styles","rowLength","expType","includeHiddenColumn","isCsvExport","isElementIdChanged","foreignKeyData","gridPool","helper","l10n","getService","prototype","getModuleName","init","gObj","element","id","Date","toISOString","isDestroyed","isExporting","undefined","footer","exportValueFormatter","locale","Map","grid","exportProperties","isMultipleExport","workbook","isCsv","isBlob","cancel","isBlb","csv","workbk","isMultiEx","childGrid","hierarchyExportMode","expandedRows","args","requestType","gridObject","trigger","beforeExcelExport","Promise","resolve","reject","log","data","processRecords","exportingSuccess","excelExportComplete","promise","blobPromise","_this","dataSource","dataManager","executeQuery","then","r","processInnerRecords","exportType","getCurrentViewRecords","allPromise_1","push","getData","getQuery","getColumnData","all","e","catch","actionFailure","groupedColLength","groupSettings","length","blankRows","multipleExport","type","worksheets","index","header","processExcelHeader","JSON","parse","stringify","childGridLevel","processGridExport","globalResolve","checkAndExport","organisedRows","organiseRows","concat","processExcelFooter","sheet","isServerRendered","currencyCode","fileName","save","saveAsBlob","initialIndex","i","row","childRows","excelRows","theme","hierarchyPrintMode","headerRow","getHeaders","groupIndent","processHeaderContent","processRecordContent","currentViewData","returnType","currentViewRecords","excelRow","record","result","level","processGroupedRows","processRecordRows","aggregates","processAggregates","GroupGuid","records","startIndex","excelExportProperties","_i","dataSource_1","item","cells","cell","col","getColumnByField","field","value","key","column","style","isForeignKey","isForeignColumn","headerText","enableGroupByFormat","formatCellValue","count","getCaptionThemeStyle","captionModelGen","groupCaptionSummaryRows","generateRows","fillAggregates","childLevels","lIndex","hIndex","_a","_b","tCell","colSpan","sCell","span","_c","_d","col_1","visible","grouping","outlineLevel","isCollapsed","items","getGridRowModel","rows_1","c","len","gCell","cellType","cellValue","valueAccessor","fkData","getFData","foreignKeyValue","excelCellArgs","excelQueryCellInfo","hAlign","getVisibleColumns","getConstant","styleIndex","getColumnStyle","mergeOptions","name","isPrinting","returnVal","createChildGrid","childGridObj","failureHandler","exportDetailDataBound","beforeDataBound","childGridCell","appendTo","notify","exportRowDataBound","rowObj","excelExportProps","gRow","intent","forEach","isExpand","isHidden","destroy","rec","indent","byGroup","summaryModel","aggregateModule","prepareSummaryInfo","groupSummaryModel","groupSummaryRows","sRows","customIndex","rows_2","eCell","DetailFooterIntent","isDataCell","footerTemplate","getAggreateValue","Summary","groupFooterTemplate","GroupSummary","groupCaptionTemplate","CaptionSummary","Object","keys","Sum","Average","Max","Min","Count","TrueCount","FalseCount","Custom","aggregateStyle","gridCellStyle","attributes","textAlign","toLowerCase","row_1","dummyOutlineLevel","dummyGrouping","format","numberFormat","skeleton","template","templateFn","txt","columnName","textContent","JSON1","JSON2","attrname","columnIndex","rowIndex","gridRows","gridColumns","spannedCells","width","currentCellIndex","gridCell","HeaderIndent","DetailHeader","contains","getIndex","rowSpan","spannedCell","getHeaderThemeStyle","headerTextAlign","excelHeaderCellArgs","excelHeaderQueryCellInfo","parseStyles","getRecordThemeStyle","fontSize","borders","color","bold","updateThemeStyle","themestyle","backColor","caption","noRows","headerRows","json","updatedCellIndex","cellsLength","cellId","jsonCell","footerRows","spannedCells_1","getConvertedWidth"],"mappings":"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","sourcesContent":["import * as events from '../base/constant';\nimport { Workbook } from '@syncfusion/ej2-excel-export';\nimport { isNullOrUndefined, getEnumValue, compile, getValue, detach, extend, isBlazor } from '@syncfusion/ej2-base';\nimport { Data } from '../actions/data';\nimport { ExportHelper, ExportValueFormatter } from './export-helper';\nimport { SummaryModelGenerator, GroupSummaryModelGenerator, CaptionSummaryModelGenerator } from '../services/summary-model-generator';\nimport { CellType } from '../base/enum';\nimport { Query, DataManager } from '@syncfusion/ej2-data';\nimport { getPrintGridModel, getUid } from '../base/util';\n/**\n * @hidden\n * `ExcelExport` module is used to handle the Excel export action.\n */\nvar ExcelExport = /** @class */ (function () {\n    /**\n     * Constructor for the Grid Excel Export module.\n     * @hidden\n     */\n    function ExcelExport(parent, locator) {\n        /* tslint:disable-next-line:no-any */\n        this.book = {};\n        this.workSheet = [];\n        this.rows = [];\n        this.columns = [];\n        this.styles = [];\n        this.rowLength = 1;\n        this.expType = 'AppendToSheet';\n        this.includeHiddenColumn = false;\n        this.isCsvExport = false;\n        this.isElementIdChanged = false;\n        this.foreignKeyData = {};\n        this.gridPool = {};\n        this.parent = parent;\n        this.helper = new ExportHelper(parent);\n        this.locator = locator;\n        this.l10n = this.locator.getService('localization');\n    }\n    /**\n     * For internal use only - Get the module name.\n     */\n    ExcelExport.prototype.getModuleName = function () {\n        return 'ExcelExport';\n    };\n    ExcelExport.prototype.init = function (gObj) {\n        if (gObj.element !== null && gObj.element.id === '') {\n            gObj.element.id = new Date().toISOString();\n            this.isElementIdChanged = true;\n        }\n        this.parent = gObj;\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.isExporting = undefined;\n        this.book = {};\n        this.workSheet = [];\n        this.rows = [];\n        this.columns = [];\n        this.styles = [];\n        this.rowLength = 1;\n        this.footer = undefined;\n        this.expType = 'AppendToSheet';\n        this.includeHiddenColumn = false;\n        this.exportValueFormatter = new ExportValueFormatter(gObj.locale);\n        gObj.id = getUid('main-grid');\n        this.gridPool[gObj.id] = false;\n    };\n    /**\n     * Export Grid to Excel file.\n     * @param  {exportProperties} exportProperties - Defines the export properties of the Grid.\n     * @param  {isMultipleExport} isMultipleExport - Defines is multiple Grid's are exported.\n     * @param  {workbook} workbook - Defined the Workbook if multiple Grid is exported.\n     * @param  {isCsv} isCsv - true if export to CSV.\n     * @return {Promise<any>}\n     */\n    /* tslint:disable-next-line:max-line-length */\n    /* tslint:disable-next-line:no-any */\n    ExcelExport.prototype.Map = function (grid, exportProperties, isMultipleExport, workbook, isCsv, isBlob) {\n        var gObj = grid;\n        var cancel = 'cancel';\n        var isBlb = 'isBlob';\n        var csv = 'isCsv';\n        var workbk = 'workbook';\n        var isMultiEx = 'isMultipleExport';\n        this.gridPool = {};\n        if (grid.childGrid && !(!isNullOrUndefined(exportProperties) && exportProperties.hierarchyExportMode === 'None')) {\n            grid.expandedRows = getPrintGridModel(grid).expandedRows;\n        }\n        var args = {\n            requestType: 'beforeExcelExport', gridObject: gObj, cancel: false,\n            isMultipleExport: isMultipleExport, workbook: workbook, isCsv: isCsv, isBlob: isBlob\n        };\n        gObj.trigger(events.beforeExcelExport, args);\n        if (args[cancel]) {\n            return new Promise(function (resolve, reject) {\n                return resolve();\n            });\n        }\n        this.parent.log('exporting_begin', this.getModuleName());\n        this.data = new Data(gObj);\n        this.isExporting = true;\n        this.isBlob = args[isBlb];\n        if (args[csv]) {\n            this.isCsvExport = args[csv];\n        }\n        else {\n            this.isCsvExport = false;\n        }\n        return this.processRecords(gObj, exportProperties, args[isMultiEx], args[workbk]);\n    };\n    ExcelExport.prototype.exportingSuccess = function (resolve) {\n        this.isExporting = false;\n        this.parent.trigger(events.excelExportComplete, this.isBlob ? { promise: this.blobPromise } : {});\n        this.parent.log('exporting_complete', this.getModuleName());\n        resolve(this.book);\n    };\n    /* tslint:disable-next-line:no-any */\n    ExcelExport.prototype.processRecords = function (gObj, exportProperties, isMultipleExport, workbook) {\n        var _this = this;\n        if (!isNullOrUndefined(exportProperties) && !isNullOrUndefined(exportProperties.dataSource) &&\n            exportProperties.dataSource instanceof DataManager) {\n            return new Promise(function (resolve, reject) {\n                var dataManager = exportProperties.dataSource.executeQuery(new Query());\n                dataManager.then(function (r) {\n                    _this.init(gObj);\n                    _this.processInnerRecords(gObj, exportProperties, isMultipleExport, workbook, r).then(function () {\n                        _this.exportingSuccess(resolve);\n                    });\n                });\n            });\n        }\n        else if (!isNullOrUndefined(exportProperties) && exportProperties.exportType === 'CurrentPage') {\n            return new Promise(function (resolve, reject) {\n                _this.init(gObj);\n                _this.processInnerRecords(gObj, exportProperties, isMultipleExport, workbook, _this.parent.getCurrentViewRecords());\n                _this.exportingSuccess(resolve);\n            });\n        }\n        else {\n            var allPromise_1 = [];\n            allPromise_1.push(this.data.getData({}, ExportHelper.getQuery(gObj, this.data)));\n            allPromise_1.push(this.helper.getColumnData(gObj));\n            return new Promise(function (resolve, reject) {\n                Promise.all(allPromise_1).then(function (e) {\n                    _this.init(gObj);\n                    _this.processInnerRecords(gObj, exportProperties, isMultipleExport, workbook, e[0]).then(function () {\n                        _this.exportingSuccess(resolve);\n                    });\n                }).catch(function (e) {\n                    reject(_this.book);\n                    _this.parent.trigger(events.actionFailure, e);\n                });\n            });\n        }\n    };\n    /* tslint:disable-next-line:max-func-body-length */\n    ExcelExport.prototype.processInnerRecords = function (gObj, exportProperties, \n    /* tslint:disable-next-line:no-any */\n    isMultipleExport, workbook, r) {\n        var _this = this;\n        this.groupedColLength = gObj.groupSettings.columns.length;\n        var blankRows = 5;\n        var rows = [];\n        if (!isNullOrUndefined(exportProperties) && !isNullOrUndefined(exportProperties.multipleExport)) {\n            /* tslint:disable-next-line:max-line-length */\n            this.expType = (!isNullOrUndefined(exportProperties.multipleExport.type) ? exportProperties.multipleExport.type : 'AppendToSheet');\n            if (!isNullOrUndefined(exportProperties.multipleExport.blankRows)) {\n                blankRows = exportProperties.multipleExport.blankRows;\n            }\n        }\n        if (isNullOrUndefined(workbook)) {\n            this.workSheet = [];\n            this.rows = [];\n            this.columns = [];\n            this.styles = [];\n        }\n        else if (this.expType === 'NewSheet') {\n            this.workSheet = workbook.worksheets;\n            this.rows = [];\n            this.columns = [];\n            this.styles = workbook.styles;\n        }\n        else {\n            this.workSheet = [];\n            this.rows = workbook.worksheets[0].rows;\n            this.columns = workbook.worksheets[0].columns;\n            this.styles = workbook.styles;\n            this.rowLength = (this.rows[this.rows.length - 1].index + blankRows);\n            this.rowLength++;\n        }\n        if (!isNullOrUndefined(exportProperties)) {\n            if (!isNullOrUndefined(isMultipleExport)) {\n                if (!isNullOrUndefined(exportProperties.header) && (isMultipleExport || this.expType === 'NewSheet')) {\n                    this.processExcelHeader(JSON.parse(JSON.stringify(exportProperties.header)));\n                }\n                if (!isNullOrUndefined(exportProperties.footer)) {\n                    if (this.expType === 'AppendToSheet') {\n                        if (!isMultipleExport) {\n                            this.footer = JSON.parse(JSON.stringify(exportProperties.footer));\n                        }\n                    }\n                    else {\n                        this.footer = JSON.parse(JSON.stringify(exportProperties.footer));\n                    }\n                }\n            }\n            else {\n                if (!isNullOrUndefined(exportProperties.header)) {\n                    this.processExcelHeader(JSON.parse(JSON.stringify(exportProperties.header)));\n                }\n                if (!isNullOrUndefined(exportProperties.footer)) {\n                    this.footer = JSON.parse(JSON.stringify(exportProperties.footer));\n                }\n            }\n        }\n        this.includeHiddenColumn = (!isNullOrUndefined(exportProperties) ? exportProperties.includeHiddenColumn : false);\n        return new Promise(function (resolve, reject) {\n            gObj.childGridLevel = 0;\n            rows = _this.processGridExport(gObj, exportProperties, r);\n            _this.globalResolve = resolve;\n            _this.gridPool[gObj.id] = true;\n            _this.helper.checkAndExport(_this.gridPool, _this.globalResolve);\n        }).then(function () {\n            var organisedRows = [];\n            _this.organiseRows(rows, rows[0].index, organisedRows);\n            _this.rows = _this.rows.concat(organisedRows);\n            //footer template add\n            if (!isNullOrUndefined(_this.footer)) {\n                if ((_this.expType === 'AppendToSheet' && !isMultipleExport) || (_this.expType === 'NewSheet')) {\n                    _this.processExcelFooter(_this.footer);\n                }\n            }\n            var sheet = {};\n            if (_this.columns.length > 0) {\n                sheet.columns = _this.columns;\n            }\n            /* tslint:disable-next-line:no-any */\n            sheet.rows = _this.rows;\n            _this.workSheet.push(sheet);\n            _this.book.worksheets = _this.workSheet;\n            _this.book.styles = _this.styles;\n            if (!isMultipleExport) {\n                if (_this.isCsvExport) {\n                    if (isBlazor() && gObj.isServerRendered) {\n                        _this.book.isServerRendered = gObj.isServerRendered;\n                    }\n                    var book = new Workbook(_this.book, 'csv', gObj.locale, gObj.currencyCode);\n                    if (!_this.isBlob) {\n                        if (!isNullOrUndefined(exportProperties) && exportProperties.fileName) {\n                            book.save(exportProperties.fileName);\n                        }\n                        else {\n                            book.save('Export.csv');\n                        }\n                    }\n                    else {\n                        _this.blobPromise = book.saveAsBlob('text/csv');\n                    }\n                }\n                else {\n                    var book = new Workbook(_this.book, 'xlsx', gObj.locale, gObj.currencyCode);\n                    if (!_this.isBlob) {\n                        if (!isNullOrUndefined(exportProperties) && exportProperties.fileName) {\n                            book.save(exportProperties.fileName);\n                        }\n                        else {\n                            book.save('Export.xlsx');\n                        }\n                    }\n                    else {\n                        _this.blobPromise = book.saveAsBlob('application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\n                    }\n                }\n                if (_this.isElementIdChanged) {\n                    gObj.element.id = '';\n                }\n                delete gObj.expandedRows;\n            }\n            return workbook;\n        });\n    };\n    ExcelExport.prototype.organiseRows = function (rows, initialIndex, organisedRows) {\n        if (!rows.length) {\n            return initialIndex;\n        }\n        for (var i = 0; i < rows.length; i++) {\n            var row = rows[i];\n            var childRows = row.childRows;\n            if (childRows) {\n                row.index = initialIndex++;\n                delete row.childRows;\n                organisedRows.push(row);\n                initialIndex = this.organiseRows(childRows, initialIndex, organisedRows);\n            }\n            else {\n                row.index = initialIndex++;\n                organisedRows.push(row);\n            }\n        }\n        return initialIndex;\n    };\n    ExcelExport.prototype.processGridExport = function (gObj, exportProperties, r) {\n        var excelRows = [];\n        if (!isNullOrUndefined(exportProperties) && !isNullOrUndefined(exportProperties.theme)) {\n            this.theme = exportProperties.theme;\n        }\n        if (gObj.childGrid && !isNullOrUndefined(exportProperties)) {\n            gObj.hierarchyPrintMode = exportProperties.hierarchyExportMode || 'Expanded';\n        }\n        var helper = new ExportHelper(gObj);\n        var headerRow = helper.getHeaders(gObj.columns, this.includeHiddenColumn);\n        var groupIndent = gObj.groupSettings.columns.length;\n        excelRows = this.processHeaderContent(gObj, headerRow, groupIndent, excelRows);\n        /* tslint:disable-next-line:max-line-length */\n        if (!isNullOrUndefined(exportProperties) && !isNullOrUndefined(exportProperties.dataSource) && !(exportProperties.dataSource instanceof DataManager)) {\n            excelRows = this.processRecordContent(gObj, r, headerRow, exportProperties, exportProperties.dataSource, excelRows, helper);\n        }\n        else if (!isNullOrUndefined(exportProperties) && exportProperties.exportType === 'CurrentPage') {\n            excelRows = this.processRecordContent(gObj, r, headerRow, exportProperties, gObj.currentViewData, excelRows, helper);\n        }\n        else {\n            excelRows = this.processRecordContent(gObj, r, headerRow, exportProperties, undefined, excelRows, helper);\n        }\n        return excelRows;\n    };\n    ExcelExport.prototype.processRecordContent = function (gObj, returnType, headerRow, exportProperties, currentViewRecords, excelRow, helper) {\n        var record;\n        if (!isNullOrUndefined(currentViewRecords)) {\n            record = currentViewRecords;\n        }\n        else {\n            record = returnType.result;\n        }\n        if (!isNullOrUndefined(record.level)) {\n            this.processGroupedRows(gObj, record, headerRow, record.level, 0, exportProperties, excelRow, helper);\n        }\n        else {\n            this.processRecordRows(gObj, record, headerRow, 0, 0, exportProperties, excelRow, helper);\n        }\n        if (!isNullOrUndefined(returnType.aggregates)) {\n            if (!isNullOrUndefined(currentViewRecords)) {\n                this.processAggregates(gObj, returnType.result, excelRow, currentViewRecords);\n            }\n            else {\n                var result = returnType.result.GroupGuid ?\n                    returnType.result.records : returnType.result;\n                this.processAggregates(gObj, result, excelRow);\n            }\n        }\n        return excelRow;\n    };\n    /* tslint:disable-next-line:no-any */\n    ExcelExport.prototype.processGroupedRows = function (gObj, dataSource, headerRow, level, startIndex, excelExportProperties, excelRows, helper) {\n        for (var _i = 0, dataSource_1 = dataSource; _i < dataSource_1.length; _i++) {\n            var item = dataSource_1[_i];\n            var cells = [];\n            var index = 1;\n            /* tslint:disable-next-line:no-any */\n            var cell = {};\n            cell.index = index + level;\n            var col = gObj.getColumnByField(item.field);\n            /* tslint:disable-next-line:no-any */\n            var args = {\n                value: item.key,\n                column: col,\n                style: undefined,\n                isForeignKey: col.isForeignColumn(),\n            };\n            cell.value = gObj.getColumnByField(item.field).headerText +\n                ': ' + (!col.enableGroupByFormat ? this.exportValueFormatter.formatCellValue(args) : item.key) + ' - ';\n            if (item.count > 1) {\n                cell.value += item.count + ' items';\n            }\n            else {\n                cell.value += item.count + ' item';\n            }\n            cell.style = this.getCaptionThemeStyle(this.theme);\n            var captionModelGen = new CaptionSummaryModelGenerator(gObj);\n            var groupCaptionSummaryRows = captionModelGen.generateRows(item);\n            this.fillAggregates(gObj, groupCaptionSummaryRows, dataSource.level + dataSource.childLevels, excelRows, this.rowLength);\n            cells.push(cell);\n            if (excelRows[excelRows.length - 1].cells.length > 0) {\n                var lIndex = dataSource.level + dataSource.childLevels + groupCaptionSummaryRows[0].cells.length;\n                var hIndex = 0;\n                for (var _a = 0, _b = excelRows[excelRows.length - 1].cells; _a < _b.length; _a++) {\n                    var tCell = _b[_a];\n                    if (tCell.index < lIndex) {\n                        lIndex = tCell.index;\n                    }\n                    if (tCell.index > hIndex) {\n                        hIndex = tCell.index;\n                    }\n                    if (cells[cells.length - 1].index !== tCell.index) {\n                        cells.push(tCell);\n                    }\n                }\n                if ((lIndex - cell.index) > 1) {\n                    cell.colSpan = lIndex - cell.index;\n                }\n                while (hIndex < (headerRow.columns.length + level + dataSource.childLevels)) {\n                    /* tslint:disable-next-line:no-any */\n                    var sCell = {};\n                    sCell.index = (hIndex + 1);\n                    sCell.style = this.getCaptionThemeStyle(this.theme);\n                    cells.push(sCell);\n                    hIndex++;\n                }\n            }\n            else {\n                var span = 0;\n                //Calculation for column span when group caption dont have aggregates\n                for (var _c = 0, _d = headerRow.columns; _c < _d.length; _c++) {\n                    var col_1 = _d[_c];\n                    if (col_1.visible) {\n                        span++;\n                    }\n                }\n                cell.colSpan = (dataSource.childLevels + span);\n            }\n            excelRows[excelRows.length - 1].cells = cells;\n            this.rowLength++;\n            if (this.groupedColLength < 8 && level > 1) {\n                var grouping = { outlineLevel: level - 1, isCollapsed: true };\n                excelRows[excelRows.length - 1].grouping = grouping;\n            }\n            if (!isNullOrUndefined(dataSource.childLevels) && dataSource.childLevels > 0) {\n                this.processGroupedRows(gObj, item.items, headerRow, item.items.level, startIndex, excelExportProperties, excelRows, helper);\n            }\n            else {\n                startIndex = this.processRecordRows(gObj, item.items, headerRow, (level), startIndex, excelExportProperties, excelRows, helper);\n                this.processAggregates(gObj, item, excelRows, undefined, (level), true);\n            }\n        }\n    };\n    ExcelExport.prototype.processRecordRows = function (gObj, record, headerRow, level, startIndex, excelExportProperties, excelRows, helper) {\n        var index = 1;\n        var cells = [];\n        var columns = headerRow.columns;\n        var rows = helper.getGridRowModel(columns, record, gObj, startIndex);\n        for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {\n            var row = rows_1[_i];\n            cells = [];\n            startIndex++;\n            index = 1;\n            for (var c = 0, len = row.cells.length; c < len; c++) {\n                var gCell = row.cells[c];\n                if (gCell.cellType !== CellType.Data) {\n                    continue;\n                }\n                var column = gCell.column;\n                var field = column.field;\n                var cellValue = !isNullOrUndefined(field) ? column.valueAccessor(field, row.data, column) : '';\n                var value = !isNullOrUndefined(cellValue) ? cellValue : '';\n                var fkData = void 0;\n                if (column.isForeignColumn && column.isForeignColumn()) {\n                    fkData = helper.getFData(value, column);\n                    value = getValue(column.foreignKeyValue, fkData);\n                }\n                if (!isNullOrUndefined(value)) {\n                    var cell = {};\n                    /* tslint:disable-next-line:no-any */\n                    var excelCellArgs = {\n                        data: row.data, column: column, foreignKeyData: fkData,\n                        value: value, style: undefined, colSpan: 1, cell: cell\n                    };\n                    gObj.trigger(events.excelQueryCellInfo, excelCellArgs);\n                    cell = excelCellArgs.cell;\n                    cell.index = index + level + gObj.childGridLevel;\n                    cell.value = excelCellArgs.value;\n                    if (excelCellArgs.data === '' && gObj.childGridLevel && index === 1) {\n                        var style = {};\n                        style.hAlign = 'left';\n                        excelCellArgs = { style: style };\n                        cell.colSpan = gObj.getVisibleColumns().length;\n                        cell.value = this.l10n.getConstant('EmptyRecord');\n                    }\n                    if (excelCellArgs.colSpan > 1) {\n                        cell.colSpan = excelCellArgs.colSpan;\n                    }\n                    if (!isNullOrUndefined(excelCellArgs.style)) {\n                        var styleIndex = this.getColumnStyle(gObj, index + level);\n                        cell.style = this.mergeOptions(this.styles[styleIndex], excelCellArgs.style);\n                    }\n                    else {\n                        cell.style = { name: gObj.element.id + 'column' + (index + level) };\n                    }\n                    cells.push(cell);\n                }\n                index++;\n            }\n            var excelRow = { index: this.rowLength++, cells: cells };\n            if (this.groupedColLength < 8 && level > 0) {\n                excelRow.grouping = { outlineLevel: level, isCollapsed: true };\n                excelRows.push(excelRow);\n            }\n            else {\n                excelRows.push(excelRow);\n            }\n            if (!isNullOrUndefined(gObj.childGrid)) {\n                gObj.isPrinting = true;\n                var exportType = (!isNullOrUndefined(excelExportProperties) && excelExportProperties.exportType) ?\n                    excelExportProperties.exportType : 'AllPages';\n                var returnVal = this.helper.createChildGrid(gObj, row, exportType, this.gridPool);\n                var childGridObj = returnVal.childGrid;\n                var element = returnVal.element;\n                childGridObj.actionFailure =\n                    helper.failureHandler(this.gridPool, childGridObj, this.globalResolve);\n                childGridObj.childGridLevel = gObj.childGridLevel + 1;\n                var args = { childGrid: childGridObj, row: row, exportProperties: excelExportProperties };\n                this.parent.trigger(events.exportDetailDataBound, args);\n                childGridObj.beforeDataBound = this.childGridCell(excelRow, childGridObj, excelExportProperties, row);\n                childGridObj.appendTo(element);\n            }\n            gObj.notify(events.exportRowDataBound, { rowObj: row, type: 'excel' });\n        }\n        return startIndex;\n    };\n    ExcelExport.prototype.childGridCell = function (excelRow, childGridObj, excelExportProps, gRow) {\n        var _this = this;\n        return function (result) {\n            childGridObj.beforeDataBound = null;\n            result.cancel = true;\n            if (result.result.length === 0) {\n                result.result = [''];\n            }\n            excelRow.childRows = _this.processGridExport(childGridObj, excelExportProps, result);\n            var intent = _this.parent.groupSettings.columns.length;\n            excelRow.childRows.forEach(function (row) {\n                row.grouping = { outlineLevel: intent + childGridObj.childGridLevel,\n                    isCollapsed: !gRow.isExpand, isHidden: !gRow.isExpand };\n            });\n            childGridObj.destroy();\n            detach(childGridObj.element);\n            _this.gridPool[childGridObj.id] = true;\n            _this.helper.checkAndExport(_this.gridPool, _this.globalResolve);\n            return excelRow;\n        };\n    };\n    // tslint:disable-next-line:max-line-length\n    ExcelExport.prototype.processAggregates = function (gObj, rec, excelRows, currentViewRecords, indent, byGroup) {\n        var summaryModel = new SummaryModelGenerator(gObj);\n        if (gObj.aggregates.length && this.parent !== gObj) {\n            gObj.aggregateModule.prepareSummaryInfo();\n        }\n        var data = undefined;\n        if (!isNullOrUndefined(currentViewRecords)) {\n            data = currentViewRecords;\n        }\n        else {\n            data = rec;\n        }\n        if (indent === undefined) {\n            indent = 0;\n        }\n        if (gObj.groupSettings.columns.length > 0 && byGroup) {\n            var groupSummaryModel = new GroupSummaryModelGenerator(gObj);\n            var groupSummaryRows = groupSummaryModel.generateRows(data, { level: data.level });\n            if (groupSummaryRows.length > 0) {\n                excelRows = this.fillAggregates(gObj, groupSummaryRows, indent, excelRows);\n            }\n        }\n        else {\n            indent = gObj.groupSettings.columns.length > 0 && !byGroup ? gObj.groupSettings.columns.length : indent;\n            var sRows = summaryModel.generateRows(data, rec.aggregates);\n            if (sRows.length > 0 && !byGroup) {\n                excelRows = this.fillAggregates(gObj, sRows, indent, excelRows);\n            }\n        }\n        return excelRows;\n    };\n    // tslint:disable-next-line:max-line-length\n    ExcelExport.prototype.fillAggregates = function (gObj, rows, indent, excelRows, customIndex) {\n        for (var _i = 0, rows_2 = rows; _i < rows_2.length; _i++) {\n            var row = rows_2[_i];\n            var cells = [];\n            var index = 0;\n            for (var _a = 0, _b = row.cells; _a < _b.length; _a++) {\n                var cell = _b[_a];\n                /* tslint:disable-next-line:no-any */\n                var eCell = {};\n                if (cell.cellType === CellType.DetailFooterIntent) {\n                    continue;\n                }\n                if ((cell.visible || this.includeHiddenColumn)) {\n                    index++;\n                    if (cell.isDataCell) {\n                        eCell.index = index + indent + gObj.childGridLevel;\n                        if (!isNullOrUndefined(cell.column.footerTemplate)) {\n                            eCell.value = this.getAggreateValue(CellType.Summary, cell.column.footerTemplate, cell, row);\n                        }\n                        else if (!isNullOrUndefined(cell.column.groupFooterTemplate)) {\n                            eCell.value = this.getAggreateValue(CellType.GroupSummary, cell.column.groupFooterTemplate, cell, row);\n                        }\n                        else if (!isNullOrUndefined(cell.column.groupCaptionTemplate)) {\n                            eCell.value = this.getAggreateValue(CellType.CaptionSummary, cell.column.groupCaptionTemplate, cell, row);\n                        }\n                        else {\n                            for (var _c = 0, _d = Object.keys(row.data[cell.column.field]); _c < _d.length; _c++) {\n                                var key = _d[_c];\n                                if (key === cell.column.type) {\n                                    if (!isNullOrUndefined(row.data[cell.column.field].Sum)) {\n                                        eCell.value = row.data[cell.column.field][cell.column.field + \" - sum\"];\n                                    }\n                                    else if (!isNullOrUndefined(row.data[cell.column.field].Average)) {\n                                        eCell.value = row.data[cell.column.field][cell.column.field + \" - average\"];\n                                    }\n                                    else if (!isNullOrUndefined(row.data[cell.column.field].Max)) {\n                                        eCell.value = row.data[cell.column.field][cell.column.field + \" - max\"];\n                                    }\n                                    else if (!isNullOrUndefined(row.data[cell.column.field].Min)) {\n                                        eCell.value = row.data[cell.column.field][cell.column.field + \" - min\"];\n                                    }\n                                    else if (!isNullOrUndefined(row.data[cell.column.field].Count)) {\n                                        eCell.value = row.data[cell.column.field][cell.column.field + \" - count\"];\n                                    }\n                                    else if (!isNullOrUndefined(row.data[cell.column.field].TrueCount)) {\n                                        eCell.value = row.data[cell.column.field][cell.column.field + \" - truecount\"];\n                                    }\n                                    else if (!isNullOrUndefined(row.data[cell.column.field].FalseCount)) {\n                                        eCell.value = row.data[cell.column.field][cell.column.field + \" - falsecount\"];\n                                    }\n                                    else if (!isNullOrUndefined(row.data[cell.column.field].Custom)) {\n                                        eCell.value = row.data[cell.column.field].Custom;\n                                    }\n                                }\n                            }\n                        }\n                        eCell.style = this.getCaptionThemeStyle(this.theme); //{ name: gObj.element.id + 'column' + index };\n                        this.aggregateStyle(cell.column, eCell.style, cell.column.field);\n                        var gridCellStyle = cell.attributes.style;\n                        if (gridCellStyle.textAlign) {\n                            eCell.style.hAlign = gridCellStyle.textAlign.toLowerCase();\n                        }\n                        cells.push(eCell);\n                    }\n                    else {\n                        if (customIndex === undefined) {\n                            eCell.index = index + indent + gObj.childGridLevel;\n                            eCell.style = this.getCaptionThemeStyle(this.theme); //{ name: gObj.element.id + 'column' + index };\n                            cells.push(eCell);\n                        }\n                    }\n                }\n            }\n            if (!isNullOrUndefined(customIndex)) {\n                excelRows.push({ index: customIndex, cells: cells });\n            }\n            else {\n                var row_1 = {};\n                if (this.groupedColLength < 8 && this.groupedColLength > 0) {\n                    var dummyOutlineLevel = 'outlineLevel';\n                    var dummyGrouping = 'grouping';\n                    var level = excelRows[excelRows.length - 1][dummyGrouping][dummyOutlineLevel];\n                    var grouping = { outlineLevel: level, isCollapsed: true };\n                    row_1 = { index: this.rowLength++, cells: cells, grouping: grouping };\n                }\n                else {\n                    row_1 = { index: this.rowLength++, cells: cells };\n                }\n                excelRows.push(row_1);\n            }\n        }\n        return excelRows;\n    };\n    ExcelExport.prototype.aggregateStyle = function (col, style, field) {\n        var column = this.parent.getColumnByField(field);\n        if (typeof col.format === 'object') {\n            var format = col.format;\n            style.numberFormat = !isNullOrUndefined(format.format) ? format.format : format.skeleton;\n            if (!isNullOrUndefined(format.type)) {\n                style.type = format.type.toLowerCase();\n            }\n        }\n        else {\n            style.numberFormat = col.format;\n        }\n        if (!isNullOrUndefined(column) && isNullOrUndefined(style.type)) {\n            style.type = column.type.toLowerCase();\n        }\n    };\n    ExcelExport.prototype.getAggreateValue = function (cellType, template, cell, row) {\n        var templateFn = {};\n        templateFn[getEnumValue(CellType, cell.cellType)] = compile(template);\n        /* tslint:disable-next-line:max-line-length */\n        var txt = (templateFn[getEnumValue(CellType, cell.cellType)](row.data[cell.column.field ? cell.column.field : cell.column.columnName]));\n        return txt[0].textContent;\n    };\n    ExcelExport.prototype.mergeOptions = function (JSON1, JSON2) {\n        var result = {};\n        var attrname = Object.keys(JSON1);\n        for (var index = 0; index < attrname.length; index++) {\n            if (attrname[index] !== 'name') {\n                result[attrname[index]] = JSON1[attrname[index]];\n            }\n        }\n        attrname = Object.keys(JSON2);\n        for (var index = 0; index < attrname.length; index++) {\n            if (attrname[index] !== 'name') {\n                result[attrname[index]] = JSON2[attrname[index]];\n            }\n        }\n        return result;\n    };\n    ExcelExport.prototype.getColumnStyle = function (gObj, columnIndex) {\n        var index = 0;\n        for (var _i = 0, _a = this.styles; _i < _a.length; _i++) {\n            var style = _a[_i];\n            if (style.name === gObj.element.id + 'column' + columnIndex) {\n                return index;\n            }\n            index++;\n        }\n        return undefined;\n    };\n    ExcelExport.prototype.processHeaderContent = function (gObj, headerRow, indent, excelRows) {\n        var rowIndex = 1;\n        var gridRows = headerRow.rows;\n        // Column collection with respect to the records in the grid\n        var gridColumns = headerRow.columns;\n        var spannedCells = [];\n        if (indent > 0) {\n            var index = 0;\n            while (index !== indent) {\n                this.columns.push({ index: index + 1, width: 30 });\n                index++;\n            }\n        }\n        for (var row = 0; row < gridRows.length; row++) {\n            var currentCellIndex = 1 + indent;\n            var cells = [];\n            for (var column = 0; column < gridRows[row].cells.length; column++) {\n                /* tslint:disable-next-line:no-any */\n                var style = {};\n                var cell = {};\n                var gridCell = gridRows[row].cells[column];\n                if (gridCell.cellType === CellType.HeaderIndent || gridCell.cellType === CellType.DetailHeader) {\n                    continue;\n                }\n                var result = { contains: true, index: 1 };\n                while (result.contains) {\n                    result = this.getIndex(spannedCells, rowIndex, currentCellIndex);\n                    currentCellIndex = result.index;\n                    if (!result.contains) {\n                        cell.index = result.index + gObj.childGridLevel;\n                        break;\n                    }\n                }\n                if (!isNullOrUndefined(gridCell.rowSpan) && gridCell.rowSpan !== 1) {\n                    cell.rowSpan = gridCell.rowSpan;\n                    for (var i = rowIndex; i < gridCell.rowSpan + rowIndex; i++) {\n                        var spannedCell = { rowIndex: 0, columnIndex: 0 };\n                        spannedCell.rowIndex = i;\n                        spannedCell.columnIndex = currentCellIndex;\n                        spannedCells.push(spannedCell);\n                    }\n                }\n                if (!isNullOrUndefined(gridCell.colSpan) && gridCell.colSpan !== 1) {\n                    cell.colSpan = gridCell.colSpan;\n                    currentCellIndex = currentCellIndex + cell.colSpan - 1;\n                }\n                cell.value = gridCell.column.headerText;\n                style = this.getHeaderThemeStyle(this.theme);\n                if (!isNullOrUndefined(gridCell.column.textAlign)) {\n                    style.hAlign = gridCell.column.textAlign.toLowerCase();\n                }\n                if (!isNullOrUndefined(gridCell.column.headerTextAlign)) {\n                    style.hAlign = gridCell.column.headerTextAlign.toLowerCase();\n                }\n                var excelHeaderCellArgs = { cell: cell, gridCell: gridCell, style: style };\n                gObj.trigger(events.excelHeaderQueryCellInfo, excelHeaderCellArgs);\n                cell.style = excelHeaderCellArgs.style;\n                cells.push(cell);\n                currentCellIndex++;\n            }\n            excelRows.push({ index: this.rowLength++, cells: cells });\n        }\n        for (var col = 0; col < gridColumns.length; col++) {\n            this.parseStyles(gObj, gridColumns[col], this.getRecordThemeStyle(this.theme), indent + col + 1);\n        }\n        return excelRows;\n    };\n    ExcelExport.prototype.getHeaderThemeStyle = function (theme) {\n        var style = {};\n        style.fontSize = 12;\n        style.borders = { color: '#E0E0E0' };\n        style.bold = true;\n        if (!isNullOrUndefined(theme) && !isNullOrUndefined(theme.header)) {\n            style = this.updateThemeStyle(theme.header, style);\n        }\n        return style;\n    };\n    ExcelExport.prototype.updateThemeStyle = function (themestyle, style) {\n        return extend(style, themestyle);\n    };\n    ExcelExport.prototype.getCaptionThemeStyle = function (theme) {\n        var style = {};\n        style.fontSize = 13;\n        style.backColor = '#F6F6F6';\n        if (!isNullOrUndefined(theme) && !isNullOrUndefined(theme.caption)) {\n            style = this.updateThemeStyle(theme.caption, style);\n        }\n        return style;\n    };\n    ExcelExport.prototype.getRecordThemeStyle = function (theme) {\n        var style = {};\n        style.fontSize = 13;\n        style.borders = { color: '#E0E0E0' };\n        if (!isNullOrUndefined(theme) && !isNullOrUndefined(theme.record)) {\n            style = this.updateThemeStyle(theme.record, style);\n        }\n        return style;\n    };\n    ExcelExport.prototype.processExcelHeader = function (header) {\n        if (!isNullOrUndefined(header.rows) && (this.expType === 'NewSheet' || this.rowLength === 1)) {\n            var noRows = void 0;\n            if (header.headerRows === undefined) {\n                this.rowLength = header.rows.length;\n            }\n            else {\n                this.rowLength = header.headerRows;\n            }\n            if (this.rowLength < header.rows.length) {\n                noRows = this.rowLength;\n            }\n            else {\n                noRows = header.rows.length;\n            }\n            this.rowLength++;\n            for (var row = 0; row < noRows; row++) {\n                var json = header.rows[row];\n                //Row index\n                if (!(json.index !== null && !isNullOrUndefined(json.index))) {\n                    json.index = (row + 1);\n                }\n                this.updatedCellIndex(json);\n            }\n        }\n    };\n    ExcelExport.prototype.updatedCellIndex = function (json) {\n        var cellsLength = json.cells.length;\n        for (var cellId = 0; cellId < cellsLength; cellId++) {\n            var jsonCell = json.cells[cellId];\n            //cell index\n            if (!(jsonCell.index !== null && !isNullOrUndefined(jsonCell.index))) {\n                jsonCell.index = (cellId + 1);\n            }\n        }\n        this.rows.push(json);\n    };\n    ExcelExport.prototype.processExcelFooter = function (footer) {\n        if (!isNullOrUndefined(footer.rows)) {\n            var noRows = void 0;\n            if (footer.footerRows === undefined) {\n                this.rowLength += footer.rows.length;\n            }\n            else {\n                if (footer.footerRows > footer.rows.length) {\n                    this.rowLength += (footer.footerRows - footer.rows.length);\n                    noRows = footer.rows.length;\n                }\n                else {\n                    noRows = footer.footerRows;\n                }\n            }\n            for (var row = 0; row < noRows; row++) {\n                var json = footer.rows[row];\n                //Row index\n                if (json.index === null || json.index === undefined) {\n                    json.index = this.rowLength++;\n                }\n                else {\n                    json.index += this.rowLength;\n                }\n                this.updatedCellIndex(json);\n            }\n        }\n    };\n    ExcelExport.prototype.getIndex = function (spannedCells, rowIndex, columnIndex) {\n        for (var _i = 0, spannedCells_1 = spannedCells; _i < spannedCells_1.length; _i++) {\n            var spannedCell = spannedCells_1[_i];\n            if ((spannedCell.rowIndex === rowIndex) && (spannedCell.columnIndex === columnIndex)) {\n                columnIndex = columnIndex + 1;\n                return { contains: true, index: columnIndex };\n            }\n        }\n        return { contains: false, index: columnIndex };\n    };\n    ExcelExport.prototype.parseStyles = function (gObj, col, style, index) {\n        if (!isNullOrUndefined(col.format)) {\n            if (typeof col.format === 'object') {\n                var format = col.format;\n                style.numberFormat = !isNullOrUndefined(format.format) ? format.format : format.skeleton;\n                if (!isNullOrUndefined(format.type)) {\n                    style.type = format.type.toLowerCase();\n                }\n            }\n            else {\n                style.numberFormat = col.format;\n                style.type = col.type;\n            }\n        }\n        if (!isNullOrUndefined(col.textAlign)) {\n            style.hAlign = col.textAlign.toLowerCase();\n        }\n        if (Object.keys(style).length > 0) {\n            style.name = gObj.element.id + 'column' + index;\n            this.styles.push(style);\n        }\n        if (!isNullOrUndefined(col.width)) {\n            this.columns.push({ index: index + gObj.childGridLevel, width: typeof col.width === 'number' ?\n                    col.width : this.helper.getConvertedWidth(col.width) });\n        }\n    };\n    /**\n     * To destroy the excel export\n     * @return {void}\n     * @hidden\n     */\n    ExcelExport.prototype.destroy = function () {\n        //destroy for exporting\n    };\n    return ExcelExport;\n}());\nexport { ExcelExport };\n"]},"metadata":{},"sourceType":"module"}