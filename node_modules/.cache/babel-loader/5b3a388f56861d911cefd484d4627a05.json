{"ast":null,"code":"import { extend } from '@syncfusion/ej2-base';\nimport { MaskedTextBox } from '@syncfusion/ej2-inputs';\nimport { isEditable, getComplexFieldID, getObject } from '../base/util';\n/**\n * `MaskedTextBoxCellEdit` is used to handle masked input cell type editing.\n * @hidden\n */\n\nvar MaskedTextBoxCellEdit =\n/** @class */\nfunction () {\n  function MaskedTextBoxCellEdit(parentInstance) {\n    //constructor\n    this.parent = parentInstance;\n  }\n\n  MaskedTextBoxCellEdit.prototype.create = function (args) {\n    //create\n    var columnField = getComplexFieldID(args.column.field);\n    return this.parent.createElement('input', {\n      className: 'e-field',\n      attrs: {\n        id: this.parent.element.id + columnField,\n        name: columnField,\n        type: 'text',\n        'e-mappinguid': args.column.uid\n      }\n    });\n  };\n\n  MaskedTextBoxCellEdit.prototype.write = function (args) {\n    this.column = args.column;\n    var isInlineEdit = this.parent.editSettings.mode !== 'Dialog';\n    this.obj = new MaskedTextBox(extend({\n      fields: {\n        value: args.column.field\n      },\n      value: getObject(args.column.field, args.rowData),\n      floatLabelType: isInlineEdit ? 'Never' : 'Always',\n      mask: '000-000-0000',\n      enabled: isEditable(args.column, args.requestType, args.element)\n    }, args.column.edit.params));\n    this.obj.appendTo(args.element);\n  };\n\n  MaskedTextBoxCellEdit.prototype.read = function (element) {\n    return element.ej2_instances[0].value;\n  };\n\n  MaskedTextBoxCellEdit.prototype.destroy = function () {\n    if (this.obj) {\n      this.obj.destroy();\n    }\n  };\n\n  return MaskedTextBoxCellEdit;\n}();\n\nexport { MaskedTextBoxCellEdit };","map":{"version":3,"sources":["C:/CN2/workspace-trunk/kain-front-end/node_modules/@syncfusion/ej2-grids/src/grid/renderer/inputmask-edit-cell.js"],"names":["extend","MaskedTextBox","isEditable","getComplexFieldID","getObject","MaskedTextBoxCellEdit","parentInstance","parent","prototype","create","args","columnField","column","field","createElement","className","attrs","id","element","name","type","uid","write","isInlineEdit","editSettings","mode","obj","fields","value","rowData","floatLabelType","mask","enabled","requestType","edit","params","appendTo","read","ej2_instances","destroy"],"mappings":"AAAA,SAASA,MAAT,QAAuB,sBAAvB;AACA,SAASC,aAAT,QAA8B,wBAA9B;AACA,SAASC,UAAT,EAAqBC,iBAArB,EAAwCC,SAAxC,QAAyD,cAAzD;AACA;;;;;AAIA,IAAIC,qBAAqB;AAAG;AAAe,YAAY;AACnD,WAASA,qBAAT,CAA+BC,cAA/B,EAA+C;AAC3C;AACA,SAAKC,MAAL,GAAcD,cAAd;AACH;;AACDD,EAAAA,qBAAqB,CAACG,SAAtB,CAAgCC,MAAhC,GAAyC,UAAUC,IAAV,EAAgB;AACrD;AACA,QAAIC,WAAW,GAAGR,iBAAiB,CAACO,IAAI,CAACE,MAAL,CAAYC,KAAb,CAAnC;AACA,WAAO,KAAKN,MAAL,CAAYO,aAAZ,CAA0B,OAA1B,EAAmC;AACtCC,MAAAA,SAAS,EAAE,SAD2B;AAChBC,MAAAA,KAAK,EAAE;AACzBC,QAAAA,EAAE,EAAE,KAAKV,MAAL,CAAYW,OAAZ,CAAoBD,EAApB,GAAyBN,WADJ;AAEzBQ,QAAAA,IAAI,EAAER,WAFmB;AAENS,QAAAA,IAAI,EAAE,MAFA;AAEQ,wBAAgBV,IAAI,CAACE,MAAL,CAAYS;AAFpC;AADS,KAAnC,CAAP;AAMH,GATD;;AAUAhB,EAAAA,qBAAqB,CAACG,SAAtB,CAAgCc,KAAhC,GAAwC,UAAUZ,IAAV,EAAgB;AACpD,SAAKE,MAAL,GAAcF,IAAI,CAACE,MAAnB;AACA,QAAIW,YAAY,GAAG,KAAKhB,MAAL,CAAYiB,YAAZ,CAAyBC,IAAzB,KAAkC,QAArD;AACA,SAAKC,GAAL,GAAW,IAAIzB,aAAJ,CAAkBD,MAAM,CAAC;AAChC2B,MAAAA,MAAM,EAAE;AAAEC,QAAAA,KAAK,EAAElB,IAAI,CAACE,MAAL,CAAYC;AAArB,OADwB;AAEhCe,MAAAA,KAAK,EAAExB,SAAS,CAACM,IAAI,CAACE,MAAL,CAAYC,KAAb,EAAoBH,IAAI,CAACmB,OAAzB,CAFgB;AAGhCC,MAAAA,cAAc,EAAEP,YAAY,GAAG,OAAH,GAAa,QAHT;AAIhCQ,MAAAA,IAAI,EAAE,cAJ0B;AAKhCC,MAAAA,OAAO,EAAE9B,UAAU,CAACQ,IAAI,CAACE,MAAN,EAAcF,IAAI,CAACuB,WAAnB,EAAgCvB,IAAI,CAACQ,OAArC;AALa,KAAD,EAMhCR,IAAI,CAACE,MAAL,CAAYsB,IAAZ,CAAiBC,MANe,CAAxB,CAAX;AAOA,SAAKT,GAAL,CAASU,QAAT,CAAkB1B,IAAI,CAACQ,OAAvB;AACH,GAXD;;AAYAb,EAAAA,qBAAqB,CAACG,SAAtB,CAAgC6B,IAAhC,GAAuC,UAAUnB,OAAV,EAAmB;AACtD,WAAOA,OAAO,CAACoB,aAAR,CAAsB,CAAtB,EAAyBV,KAAhC;AACH,GAFD;;AAGAvB,EAAAA,qBAAqB,CAACG,SAAtB,CAAgC+B,OAAhC,GAA0C,YAAY;AAClD,QAAI,KAAKb,GAAT,EAAc;AACV,WAAKA,GAAL,CAASa,OAAT;AACH;AACJ,GAJD;;AAKA,SAAOlC,qBAAP;AACH,CApC0C,EAA3C;;AAqCA,SAASA,qBAAT","sourcesContent":["import { extend } from '@syncfusion/ej2-base';\nimport { MaskedTextBox } from '@syncfusion/ej2-inputs';\nimport { isEditable, getComplexFieldID, getObject } from '../base/util';\n/**\n * `MaskedTextBoxCellEdit` is used to handle masked input cell type editing.\n * @hidden\n */\nvar MaskedTextBoxCellEdit = /** @class */ (function () {\n    function MaskedTextBoxCellEdit(parentInstance) {\n        //constructor\n        this.parent = parentInstance;\n    }\n    MaskedTextBoxCellEdit.prototype.create = function (args) {\n        //create\n        var columnField = getComplexFieldID(args.column.field);\n        return this.parent.createElement('input', {\n            className: 'e-field', attrs: {\n                id: this.parent.element.id + columnField,\n                name: columnField, type: 'text', 'e-mappinguid': args.column.uid,\n            }\n        });\n    };\n    MaskedTextBoxCellEdit.prototype.write = function (args) {\n        this.column = args.column;\n        var isInlineEdit = this.parent.editSettings.mode !== 'Dialog';\n        this.obj = new MaskedTextBox(extend({\n            fields: { value: args.column.field },\n            value: getObject(args.column.field, args.rowData),\n            floatLabelType: isInlineEdit ? 'Never' : 'Always',\n            mask: '000-000-0000',\n            enabled: isEditable(args.column, args.requestType, args.element),\n        }, args.column.edit.params));\n        this.obj.appendTo(args.element);\n    };\n    MaskedTextBoxCellEdit.prototype.read = function (element) {\n        return element.ej2_instances[0].value;\n    };\n    MaskedTextBoxCellEdit.prototype.destroy = function () {\n        if (this.obj) {\n            this.obj.destroy();\n        }\n    };\n    return MaskedTextBoxCellEdit;\n}());\nexport { MaskedTextBoxCellEdit };\n"]},"metadata":{},"sourceType":"module"}