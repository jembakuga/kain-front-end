{"ast":null,"code":"import { extend, isBlazor } from '@syncfusion/ej2-base';\nimport { AutoComplete } from '@syncfusion/ej2-dropdowns';\nimport { Query, DataManager, DataUtil } from '@syncfusion/ej2-data';\nimport { isEditable, getComplexFieldID, getObject } from '../base/util';\n/**\n * `AutoCompleteEditCell` is used to handle autocomplete cell type editing.\n * @hidden\n */\n\nvar AutoCompleteEditCell =\n/** @class */\nfunction () {\n  function AutoCompleteEditCell(parent) {\n    //constructor\n    this.parentObj = parent;\n  }\n\n  AutoCompleteEditCell.prototype.create = function (args) {\n    //create \n    var complexFieldName = getComplexFieldID(args.column.field);\n    return this.parentObj.createElement('input', {\n      className: 'e-field',\n      attrs: {\n        id: this.parentObj.element.id + complexFieldName,\n        name: complexFieldName,\n        type: 'text',\n        'e-mappinguid': args.column.uid\n      }\n    });\n  };\n\n  AutoCompleteEditCell.prototype.write = function (args) {\n    this.column = args.column;\n    var isInlineEdit = this.parentObj.editSettings.mode !== 'Dialog';\n    this.object = new AutoComplete(extend({\n      dataSource: this.parentObj.dataSource instanceof DataManager ? this.parentObj.dataSource : new DataManager(this.parentObj.dataSource),\n      query: new Query().select(args.column.field),\n      enabled: isEditable(args.column, args.requestType, args.element),\n      fields: {\n        value: args.column.field\n      },\n      value: getObject(args.column.field, args.rowData),\n      // enableRtl: this.parentObject.enableRtl,\n      actionComplete: this.selectedValues.bind(this),\n      placeholder: isInlineEdit ? '' : args.column.headerText,\n      floatLabelType: isInlineEdit ? 'Never' : 'Always'\n    }, args.column.edit.params));\n\n    if (isBlazor()) {\n      this.object.locale = this.parentObj.locale;\n    }\n\n    this.object.appendTo(args.element);\n    /* tslint:disable-next-line:no-any */\n\n    args.element.setAttribute('name', getComplexFieldID(args.column.field));\n  };\n\n  AutoCompleteEditCell.prototype.read = function (element) {\n    return element.ej2_instances[0].value;\n  };\n\n  AutoCompleteEditCell.prototype.selectedValues = function (valObj) {\n    valObj.result = DataUtil.distinct(valObj.result, this.object.fields.value, true);\n\n    if (this.column.dataSource) {\n      this.column.dataSource.dataSource.json = valObj.result;\n    }\n  };\n\n  AutoCompleteEditCell.prototype.destroy = function () {\n    if (this.object) {\n      this.object.destroy();\n    }\n  };\n\n  return AutoCompleteEditCell;\n}();\n\nexport { AutoCompleteEditCell };","map":{"version":3,"sources":["C:/CN2/workspace-trunk/kain-front-end/node_modules/@syncfusion/ej2-grids/src/grid/renderer/autocomplete-edit-cell.js"],"names":["extend","isBlazor","AutoComplete","Query","DataManager","DataUtil","isEditable","getComplexFieldID","getObject","AutoCompleteEditCell","parent","parentObj","prototype","create","args","complexFieldName","column","field","createElement","className","attrs","id","element","name","type","uid","write","isInlineEdit","editSettings","mode","object","dataSource","query","select","enabled","requestType","fields","value","rowData","actionComplete","selectedValues","bind","placeholder","headerText","floatLabelType","edit","params","locale","appendTo","setAttribute","read","ej2_instances","valObj","result","distinct","json","destroy"],"mappings":"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","sourcesContent":["import { extend, isBlazor } from '@syncfusion/ej2-base';\nimport { AutoComplete } from '@syncfusion/ej2-dropdowns';\nimport { Query, DataManager, DataUtil } from '@syncfusion/ej2-data';\nimport { isEditable, getComplexFieldID, getObject } from '../base/util';\n/**\n * `AutoCompleteEditCell` is used to handle autocomplete cell type editing.\n * @hidden\n */\nvar AutoCompleteEditCell = /** @class */ (function () {\n    function AutoCompleteEditCell(parent) {\n        //constructor\n        this.parentObj = parent;\n    }\n    AutoCompleteEditCell.prototype.create = function (args) {\n        //create \n        var complexFieldName = getComplexFieldID(args.column.field);\n        return this.parentObj.createElement('input', {\n            className: 'e-field', attrs: {\n                id: this.parentObj.element.id + complexFieldName,\n                name: complexFieldName, type: 'text', 'e-mappinguid': args.column.uid,\n            }\n        });\n    };\n    AutoCompleteEditCell.prototype.write = function (args) {\n        this.column = args.column;\n        var isInlineEdit = this.parentObj.editSettings.mode !== 'Dialog';\n        this.object = new AutoComplete(extend({\n            dataSource: this.parentObj.dataSource instanceof DataManager ?\n                this.parentObj.dataSource : new DataManager(this.parentObj.dataSource),\n            query: new Query().select(args.column.field), enabled: isEditable(args.column, args.requestType, args.element),\n            fields: { value: args.column.field },\n            value: getObject(args.column.field, args.rowData),\n            // enableRtl: this.parentObject.enableRtl,\n            actionComplete: this.selectedValues.bind(this),\n            placeholder: isInlineEdit ? '' : args.column.headerText,\n            floatLabelType: isInlineEdit ? 'Never' : 'Always'\n        }, args.column.edit.params));\n        if (isBlazor()) {\n            this.object.locale = this.parentObj.locale;\n        }\n        this.object.appendTo(args.element);\n        /* tslint:disable-next-line:no-any */\n        args.element.setAttribute('name', getComplexFieldID(args.column.field));\n    };\n    AutoCompleteEditCell.prototype.read = function (element) {\n        return element.ej2_instances[0].value;\n    };\n    AutoCompleteEditCell.prototype.selectedValues = function (valObj) {\n        valObj.result = DataUtil.distinct(valObj.result, this.object.fields.value, true);\n        if (this.column.dataSource) {\n            this.column.dataSource.dataSource.json = valObj.result;\n        }\n    };\n    AutoCompleteEditCell.prototype.destroy = function () {\n        if (this.object) {\n            this.object.destroy();\n        }\n    };\n    return AutoCompleteEditCell;\n}());\nexport { AutoCompleteEditCell };\n"]},"metadata":{},"sourceType":"module"}