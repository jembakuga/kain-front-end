{"ast":null,"code":"import { isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { iterateArrayOrObject, isActionPrevent } from '../base/util';\nimport * as events from '../base/constant';\n/**\n * The `ShowHide` module is used to control column visibility.\n */\n\nvar ShowHide =\n/** @class */\nfunction () {\n  /**\n   * Constructor for the show hide module.\n   * @hidden\n   */\n  function ShowHide(parent) {\n    this.parent = parent;\n  }\n  /**\n   * Shows a column by column name.\n   * @param  {string|string[]} columnName - Defines a single or collection of column names to show.\n   * @param  {string} showBy - Defines the column key either as field name or header text.\n   * @return {void}\n   */\n\n\n  ShowHide.prototype.show = function (columnName, showBy) {\n    var keys = this.getToggleFields(columnName);\n    var columns = this.getColumns(keys, showBy);\n    this.parent.notify(events.tooltipDestroy, {\n      module: 'edit'\n    });\n    columns.forEach(function (value) {\n      value.visible = true;\n    });\n    this.setVisible(columns);\n  };\n  /**\n   * Hides a column by column name.\n   * @param  {string|string[]} columnName - Defines a single or collection of column names to hide.\n   * @param  {string} hideBy - Defines the column key either as field name or header text.\n   * @return {void}\n   */\n\n\n  ShowHide.prototype.hide = function (columnName, hideBy) {\n    var keys = this.getToggleFields(columnName);\n    var columns = this.getColumns(keys, hideBy);\n    this.parent.notify(events.tooltipDestroy, {\n      module: 'edit'\n    });\n    columns.forEach(function (value) {\n      value.visible = false;\n    });\n    this.setVisible(columns);\n  };\n\n  ShowHide.prototype.getToggleFields = function (key) {\n    var finalized = [];\n\n    if (typeof key === 'string') {\n      finalized = [key];\n    } else {\n      finalized = key;\n    }\n\n    return finalized;\n  };\n\n  ShowHide.prototype.getColumns = function (keys, getKeyBy) {\n    var _this = this;\n\n    var columns = iterateArrayOrObject(keys, function (key, index) {\n      return iterateArrayOrObject(_this.parent.columnModel, function (item, index) {\n        if (item[getKeyBy] === key) {\n          return item;\n        }\n\n        return undefined;\n      })[0];\n    });\n    return columns;\n  };\n  /**\n   * Shows or hides columns by given column collection.\n   * @private\n   * @param  {Column[]} columns - Specifies the columns.\n   * @return {void}\n   */\n\n\n  ShowHide.prototype.setVisible = function (columns) {\n    if (isActionPrevent(this.parent)) {\n      this.parent.notify(events.preventBatch, {\n        instance: this,\n        handler: this.setVisible,\n        arg1: columns\n      });\n      return;\n    }\n\n    var currentViewCols = this.parent.getColumns();\n    columns = isNullOrUndefined(columns) ? currentViewCols : columns;\n\n    if (this.parent.allowSelection && this.parent.getSelectedRecords().length) {\n      this.parent.clearSelection();\n    }\n\n    if (this.parent.enableColumnVirtualization) {\n      var colsInCurrentView = columns.filter(function (col1) {\n        return currentViewCols.some(function (col2) {\n          return col1.field === col2.field;\n        });\n      });\n\n      if (colsInCurrentView.length) {\n        this.parent.notify(events.columnVisibilityChanged, columns);\n      }\n    } else {\n      this.parent.notify(events.columnVisibilityChanged, columns);\n    }\n\n    if (this.parent.columnQueryMode !== 'All') {\n      this.parent.refresh();\n    }\n  };\n\n  return ShowHide;\n}();\n\nexport { ShowHide };","map":{"version":3,"sources":["C:/CN2/workspace-trunk/kain-front-end/node_modules/@syncfusion/ej2-grids/src/grid/actions/show-hide.js"],"names":["isNullOrUndefined","iterateArrayOrObject","isActionPrevent","events","ShowHide","parent","prototype","show","columnName","showBy","keys","getToggleFields","columns","getColumns","notify","tooltipDestroy","module","forEach","value","visible","setVisible","hide","hideBy","key","finalized","getKeyBy","_this","index","columnModel","item","undefined","preventBatch","instance","handler","arg1","currentViewCols","allowSelection","getSelectedRecords","length","clearSelection","enableColumnVirtualization","colsInCurrentView","filter","col1","some","col2","field","columnVisibilityChanged","columnQueryMode","refresh"],"mappings":"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","sourcesContent":["import { isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { iterateArrayOrObject, isActionPrevent } from '../base/util';\nimport * as events from '../base/constant';\n/**\n * The `ShowHide` module is used to control column visibility.\n */\nvar ShowHide = /** @class */ (function () {\n    /**\n     * Constructor for the show hide module.\n     * @hidden\n     */\n    function ShowHide(parent) {\n        this.parent = parent;\n    }\n    /**\n     * Shows a column by column name.\n     * @param  {string|string[]} columnName - Defines a single or collection of column names to show.\n     * @param  {string} showBy - Defines the column key either as field name or header text.\n     * @return {void}\n     */\n    ShowHide.prototype.show = function (columnName, showBy) {\n        var keys = this.getToggleFields(columnName);\n        var columns = this.getColumns(keys, showBy);\n        this.parent.notify(events.tooltipDestroy, { module: 'edit' });\n        columns.forEach(function (value) {\n            value.visible = true;\n        });\n        this.setVisible(columns);\n    };\n    /**\n     * Hides a column by column name.\n     * @param  {string|string[]} columnName - Defines a single or collection of column names to hide.\n     * @param  {string} hideBy - Defines the column key either as field name or header text.\n     * @return {void}\n     */\n    ShowHide.prototype.hide = function (columnName, hideBy) {\n        var keys = this.getToggleFields(columnName);\n        var columns = this.getColumns(keys, hideBy);\n        this.parent.notify(events.tooltipDestroy, { module: 'edit' });\n        columns.forEach(function (value) {\n            value.visible = false;\n        });\n        this.setVisible(columns);\n    };\n    ShowHide.prototype.getToggleFields = function (key) {\n        var finalized = [];\n        if (typeof key === 'string') {\n            finalized = [key];\n        }\n        else {\n            finalized = key;\n        }\n        return finalized;\n    };\n    ShowHide.prototype.getColumns = function (keys, getKeyBy) {\n        var _this = this;\n        var columns = iterateArrayOrObject(keys, function (key, index) {\n            return iterateArrayOrObject(_this.parent.columnModel, function (item, index) {\n                if (item[getKeyBy] === key) {\n                    return item;\n                }\n                return undefined;\n            })[0];\n        });\n        return columns;\n    };\n    /**\n     * Shows or hides columns by given column collection.\n     * @private\n     * @param  {Column[]} columns - Specifies the columns.\n     * @return {void}\n     */\n    ShowHide.prototype.setVisible = function (columns) {\n        if (isActionPrevent(this.parent)) {\n            this.parent.notify(events.preventBatch, {\n                instance: this, handler: this.setVisible,\n                arg1: columns\n            });\n            return;\n        }\n        var currentViewCols = this.parent.getColumns();\n        columns = isNullOrUndefined(columns) ? currentViewCols : columns;\n        if (this.parent.allowSelection && this.parent.getSelectedRecords().length) {\n            this.parent.clearSelection();\n        }\n        if (this.parent.enableColumnVirtualization) {\n            var colsInCurrentView = columns.filter(function (col1) { return (currentViewCols.some(function (col2) { return col1.field === col2.field; })); });\n            if (colsInCurrentView.length) {\n                this.parent.notify(events.columnVisibilityChanged, columns);\n            }\n        }\n        else {\n            this.parent.notify(events.columnVisibilityChanged, columns);\n        }\n        if (this.parent.columnQueryMode !== 'All') {\n            this.parent.refresh();\n        }\n    };\n    return ShowHide;\n}());\nexport { ShowHide };\n"]},"metadata":{},"sourceType":"module"}