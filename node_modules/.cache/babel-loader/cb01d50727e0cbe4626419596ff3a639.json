{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { PdfGrid } from '../pdf-grid';\nimport { PdfStringFormat } from './../../../graphics/fonts/pdf-string-format';\nimport { SizeF, RectangleF, PointF } from './../../../drawing/pdf-drawing';\nimport { PdfBorders } from '../styles/pdf-borders';\nimport { PdfLayoutType, PdfLayoutBreakType } from './../../../graphics/figures/enum';\nimport { PdfLayoutResult, PdfLayoutFormat, ElementLayouter } from './../../../graphics/figures/base/element-layouter';\nimport { PdfHorizontalOverflowType } from '../styles/style';\nimport { TemporaryDictionary } from './../../../collections/object-object-pair/dictionary';\n/**\n * Class `lay outing the text`.\n *\n */\n\nvar PdfGridLayouter =\n/** @class */\nfunction (_super) {\n  __extends(PdfGridLayouter, _super); //constructor\n\n  /**\n   * Initialize a new instance for `PdfGrid` class.\n   * @private\n   */\n\n\n  function PdfGridLayouter(baseFormat) {\n    var _this = _super.call(this, baseFormat) || this;\n    /**\n     * @hidden\n     * @private\n     */\n\n\n    _this.gridInitialWidth = 0;\n    /**\n     * @hidden\n     * @private\n     */\n\n    _this.gridSize = new SizeF(0, 0);\n    _this.parentCellIndex = 0;\n    _this.tempWidth = 0;\n    _this.childheight = 0;\n    /**\n     * Check weather it is `child grid or not`.\n     * @private\n     */\n\n    _this.isChildGrid = false;\n    /**\n     * @hidden\n     * @private\n     */\n\n    _this.hasRowSpanSpan = false;\n    /**\n     * @hidden\n     * @private\n     */\n\n    _this.isRearranged = false;\n    /**\n     * @hidden\n     * @private\n     */\n\n    _this.pageBounds = new RectangleF();\n    /**\n     * @hidden\n     * @private\n     */\n\n    _this.listOfNavigatePages = [];\n    /**\n     * @hidden\n     * @private\n     */\n\n    _this.flag = true;\n    /**\n     * @hidden\n     * @private\n     */\n\n    _this.columnRanges = [];\n    /**\n     * @hidden\n     * @private\n     */\n\n    _this.currentLocation = new PointF(0, 0);\n    /**\n     * @hidden\n     * @private\n     */\n\n    _this.breakRow = true;\n    /**\n     * Checks whether the x co-ordinate is need to set as client size or not.\n     * @hidden\n     * @private\n     */\n\n    _this.isOverloadWithPosition = false;\n    return _this;\n  }\n\n  Object.defineProperty(PdfGridLayouter.prototype, \"Grid\", {\n    //Properties\n    get: function () {\n      return this.elements;\n    },\n    enumerable: true,\n    configurable: true\n  }); // Constructors\n\n  /**\n   * Initializes a new instance of the `StringLayouter` class.\n   * @private\n   */\n  //Public methods\n\n  /**\n   * `Layouts` the text.\n   * @private\n   */\n\n  /**\n   * `Layouts` the specified graphics.\n   * @private\n   */\n\n  /**\n   * `Layouts` the specified graphics.\n   * @private\n   */\n\n  /*public layout(graphics : PdfLayoutParams) : PdfLayoutResult\n  public layout(graphics : PdfGraphics, bounds : RectangleF) : void\n  public layout(graphics : PdfGraphics, bounds : PointF) : void\n  public layout(graphics ?: PdfGraphics | PdfLayoutParams, bounds ?: PointF | RectangleF) : void | PdfLayoutResult  {\n      if (graphics instanceof PdfGraphics) {\n      if (bounds instanceof PointF) {\n          if (bounds.x === 0) {\n              bounds.x = PdfBorders.default.right.width / 2;\n          }\n          if (bounds.y === 0) {\n              bounds.y = PdfBorders.default.top.width / 2;\n          }\n          let boundaries : RectangleF = new RectangleF(bounds, new SizeF(0, 0));\n          this.layout(graphics, boundaries);\n      } else {\n          let width : number = graphics.clientSize.width;\n          let parameter : PdfLayoutParams = new PdfLayoutParams();\n          parameter.bounds = bounds;\n          this.currentGraphics = graphics;\n          if (graphics.layer != null) {\n              let index : number = 0;\n              if (this.currentGraphics.page instanceof PdfPage) {\n                  index = (this.currentGraphics.page as PdfPage).section.indexOf(this.currentGraphics.page as PdfPage);\n              } else {\n                  index = (this.currentGraphics.page as PdfPageBase).defaultLayerIndex;\n              }\n          } else {\n              this.layoutInternal(parameter);\n          }\n      }\n  }\n  }*/\n\n  /**\n   * Gets the `format`.\n   * @private\n   */\n\n  PdfGridLayouter.prototype.getFormat = function (format) {\n    var f = format;\n    return f;\n  };\n  /**\n   * `Layouts` the element.\n   * @private\n   */\n\n\n  PdfGridLayouter.prototype.layoutInternal = function (param) {\n    var format = this.getFormat(param.format);\n    this.gridLayoutFormat = this.getFormat(param.format);\n    this.currentPage = param.page;\n\n    if (this.currentPage !== null) {\n      var pageHeight = this.currentPage.getClientSize().height;\n      var pageWidth = this.currentPage.getClientSize().width; //if (pageHeight > pageWidth) {\n\n      this.currentPageBounds = this.currentPage.getClientSize(); //}\n    } else {\n      throw Error('Can not set page as null'); //this.currentPageBounds = this.currentGraphics.clientSize;\n    }\n\n    this.currentGraphics = this.currentPage.graphics; //this.currentGraphics = (this.currentPage != null ) ? this.currentPage.graphics : this.currentGraphics;\n    // if (this.currentGraphics.layer !== null) {\n    //     let index : number = 0;\n    //     if (this.currentGraphics.page instanceof PdfPage) {\n    //         index = (this.currentGraphics.page as PdfPage).section.indexOf(this.currentGraphics.page as PdfPage);\n    //     } else {\n    //         index = (this.currentGraphics.page as PdfPageBase).defaultLayerIndex;\n    //     }\n    //     this.listOfNavigatePages.push(index);\n    // }\n\n    var index = 0;\n    index = this.currentGraphics.page.section.indexOf(this.currentGraphics.page);\n    this.listOfNavigatePages.push(index);\n\n    if (format != null && format.break === PdfLayoutBreakType.FitColumnsToPage) {\n      this.currentBounds = new RectangleF(new PointF(param.bounds.x, param.bounds.y), new SizeF(this.Grid.columns.width, this.currentGraphics.clientSize.height));\n    } else {\n      this.currentBounds = new RectangleF(new PointF(param.bounds.x, param.bounds.y), this.currentGraphics.clientSize);\n    } //this.currentBounds = new RectangleF(new PointF(param.bounds.x, param.bounds.y), this.currentGraphics.clientSize);\n\n\n    if (this.Grid.rows.count !== 0) {\n      this.currentBounds.width = param.bounds.width > 0 ? param.bounds.width : this.currentBounds.width - this.Grid.rows.getRow(0).cells.getCell(0).style.borders.left.width / 2;\n    } else if (this.Grid.headers.count !== 0) {\n      // this.currentBounds.width = (param.bounds.width > 0) ? param.bounds.width : (this.currentBounds.width -\n      //                                 this.Grid.headers.getHeader(0).cells.getCell(0).style.borders.left.width / 2);\n      this.currentBounds.width = param.bounds.width;\n    } else {\n      throw Error('Please add row or header into grid');\n    }\n\n    this.startLocation = new PointF(param.bounds.x, param.bounds.y); // if (this.Grid.style.allowHorizontalOverflow && this.currentBounds.width > this.currentGraphics.clientSize.width) {\n    //     this.currentBounds.width = this.currentGraphics.clientSize.width;\n    //     this.currentBounds.width -= this.currentBounds.x;\n    // }\n    // if (this.Grid.isChildGrid) {\n    //     this.childheight = param.bounds.height;\n    // }\n    // if (param.format !== null && param.format.usePaginateBounds) {\n    //     if (param.format.paginateBounds.height > 0) {\n    //         this.currentBounds.height = param.format.paginateBounds.height;\n    //     }\n    //} else \n\n    if (param.bounds.height > 0 && !this.Grid.isChildGrid) {\n      this.currentBounds.height = param.bounds.height;\n    }\n\n    if (!this.Grid.isChildGrid) {\n      this.hType = this.Grid.style.horizontalOverflowType;\n    }\n\n    if (!this.Grid.style.allowHorizontalOverflow) {\n      this.columnRanges = [];\n      this.Grid.measureColumnsWidth(this.currentBounds);\n      this.columnRanges.push([0, this.Grid.columns.count - 1]);\n    } else {\n      this.Grid.measureColumnsWidth();\n      this.determineColumnDrawRanges();\n    }\n\n    if (this.Grid.hasRowSpanSpan) {\n      for (var i = 0; i < this.Grid.rows.count; i++) {\n        var height = this.Grid.rows.getRow(i).height;\n\n        if (!this.Grid.rows.getRow(i).isRowHeightSet) {\n          this.Grid.rows.getRow(i).isRowHeightSet = true;\n        }\n      }\n    }\n\n    var result = this.layoutOnPage(param);\n    return result;\n  }; // /* tslint:enable */\n\n  /**\n   * `Determines the column draw ranges`.\n   * @private\n   */\n\n\n  PdfGridLayouter.prototype.determineColumnDrawRanges = function () {\n    var startColumn = 0;\n    var endColumn = 0;\n    var cellWidths = 0;\n    var availableWidth = this.currentGraphics.clientSize.width - this.currentBounds.x;\n\n    for (var i = 0; i < this.Grid.columns.count; i++) {\n      cellWidths += this.Grid.columns.getColumn(i).width;\n\n      if (cellWidths >= availableWidth) {\n        var subWidths = 0;\n\n        for (var j = startColumn; j <= i; j++) {\n          subWidths += this.Grid.columns.getColumn(j).width;\n\n          if (subWidths > availableWidth) {\n            break;\n          }\n\n          endColumn = j;\n        }\n\n        this.columnRanges.push([startColumn, endColumn]);\n        startColumn = endColumn + 1;\n        endColumn = startColumn;\n        cellWidths = endColumn <= i ? this.Grid.columns.getColumn(i).width : 0;\n      }\n    } // if (startColumn !== this.columns.Count) {\n\n\n    this.columnRanges.push([startColumn, this.Grid.columns.count - 1]); // }\n  };\n  /**\n   * `Layouts the on page`.\n   * @private\n   */\n\n\n  PdfGridLayouter.prototype.layoutOnPage = function (param) {\n    /* tslint:disable */\n    this.pageBounds.x = param.bounds.x;\n    this.pageBounds.y = param.bounds.y;\n    this.pageBounds.height = param.bounds.height;\n    var format = this.getFormat(param.format);\n    var endArgs = null;\n    var result = null;\n    var layoutedPages = new TemporaryDictionary();\n    var startPage = param.page;\n    var isParentCell = false;\n    var cellBounds = [];\n\n    for (var index = 0; index < this.columnRanges.length; index++) {\n      var range = this.columnRanges[index];\n      this.cellStartIndex = range[0];\n      this.cellEndIndex = range[1];\n      var returnObject = this.raiseBeforePageLayout(this.currentPage, this.currentBounds, this.currentRowIndex);\n      this.currentBounds = returnObject.currentBounds;\n      this.currentRowIndex = returnObject.currentRowIndex; // if (returnObject.returnValue) {\n      //     result = new PdfGridLayoutResult(this.currentPage, this.currentBounds);\n      //     break;\n      // }\n      //Draw Headers.\n\n      var drawHeader = void 0;\n\n      for (var i_1 = 0; i_1 < this.Grid.headers.count; i_1++) {\n        var row = this.Grid.headers.getHeader(i_1);\n        var headerHeight = this.currentBounds.y; // RowLayoutResult\n\n        var headerResult = this.drawRow(row); // if (headerHeight === this.currentBounds.y) {\n        //     drawHeader = true;\n        //     if (PdfGrid.repeatRowIndex === -1) {\n        //         PdfGrid.repeatRowIndex = this.rows.getRow.indexOf(row);\n        //     }\n        // } else {\n\n        drawHeader = false; // }\n      }\n\n      var i = 0;\n      var length_1 = this.Grid.rows.count;\n      var repeatRow = void 0;\n      var startingHeight = 0;\n      var flag = true; //Here is to draw parent Grid and Cells\n\n      cellBounds = []; //Draw row by row with the specified cell range.\n\n      for (var j = 0; j < this.Grid.rows.count; j++) {\n        var row = this.Grid.rows.getRow(j);\n        i++;\n        this.currentRowIndex = i - 1;\n        var originalHeight = this.currentBounds.y;\n        startPage = this.currentPage;\n        PdfGridLayouter.repeatRowIndex = -1;\n\n        if (flag && row.grid.isChildGrid) {\n          startingHeight = originalHeight;\n          flag = false;\n        }\n\n        var rowResult = null; ///rowResult = this.drawRow(row);\n\n        /*if(!row.isrowFinish) {\n            if(!row.grid.isgridSplit){\n                rowResult = this.drawRow(row);\n                row.isrowFinish = true;\n                row.isrowDraw = true;\n            } else {\n                if(!row.isrowDraw){\n                    rowResult = this.drawRow(row);\n                    row.isrowFinish = true;\n                    row.isrowDraw = true;\n                    row.grid.isgridSplit = false;\n                } else {\n                    rowResult =  null;\n                    break;\n                }\n            }\n        }\n        else {\n            //row.isrowFinish = false;\n            //rowResult = this.drawRow(row);\n            rowResult = null;\n            break;\n            \n        }             */\n\n        if (this.Grid.splitChildRowIndex == -1) {\n          rowResult = this.drawRow(row);\n          row.isrowFinish = true;\n        } else {\n          if (row.grid.ParentCell.row.grid.isGridSplit && this.Grid.splitChildRowIndex <= row.rowIndex) {\n            rowResult = this.drawRow(row);\n            row.isrowFinish = true;\n          } else if (row.isrowFinish) {\n            continue;\n          } else {\n            break;\n          }\n        } //rowResult = this.drawRow(row);\n\n\n        cellBounds.push(rowResult.bounds.width);\n        /*if (row.isRowBreaksNextPage)\n            {\n                let x : number  = 0;\n                for (let l : number = 0; l < row.cells.count; l++)\n                {\n                    let isNestedRowBreak : boolean = false;\n                    if (row.height == row.cells.getCell(l).height)\n                    {\n                        let n : number;\n                        let grid : PdfGrid = row.cells.getCell(l).value as PdfGrid;\n                        for (let m : number = grid.rows.count; 0 < m; m--)\n                        {\n                            if ((grid.rows.getRow(m - 1).rowBreakHeight > 0))\n                            {\n                                isNestedRowBreak = true;\n                                break;\n                            }\n                            if (grid.rows.getRow(m - 1).isRowBreaksNextPage)\n                            {\n                                row.rowBreakHeightValue = grid.rows.getRow(m - 1).rowBreakHeightValue;\n                                break;\n                            }\n                            row.rowBreakHeightValue += grid.rows.getRow(m - 1).height;\n                        }\n                    }\n                    if (isNestedRowBreak)\n                        break;\n                }\n                for (let j : number = 0; j < row.cells.count; j++)\n                {\n                     if (row.height > row.cells.getCell(j).height)\n                    {\n                        row.cells.getCell(j).value = \" \";\n                        let rect : RectangleF ;\n                        let page : PdfPage = this.getNextPage(this.currentPage);\n                        let section : PdfSection = this.currentPage.section;\n                        let index : number = section.indexOf(page);\n                        for (let k : number = 0; k < (section.count - 1) - index; k++)\n                        {\n                            rect = new RectangleF(x, 0, row.grid.columns.getColumn(j).width, page.getClientSize().height);\n                            PdfGridLayouter.repeatRowIndex = -1;\n                            row.cells.getCell(j).draw(page.graphics, rect, false);\n                            page = this.getNextPage(page);\n                        }\n                        rect = new RectangleF(x, 0, row.grid.columns.getColumn(j).width, row.rowBreakHeightValue);\n                         row.cells.getCell(j).draw(page.graphics, rect, false);\n                    }\n                    x += row.grid.columns.getColumn(j).width;\n                }\n            }*/\n        //if height remains same, it is understood that row is not drawn in the page\n\n        if (originalHeight === this.currentBounds.y) {\n          repeatRow = true;\n          PdfGridLayouter.repeatRowIndex = this.Grid.rows.rowCollection.indexOf(row);\n        } else {\n          repeatRow = false;\n          PdfGridLayouter.repeatRowIndex = -1;\n        }\n\n        while (!rowResult.isFinish && startPage != null) {\n          var tempResult = this.getLayoutResult();\n          /*if (startPage != this.currentPage)\n              {\n                  if (row.grid.isChildGrid && row.grid.ParentCell != null)\n                  {\n                      let bounds : RectangleF= new RectangleF(new PointF(format.paginateBounds.x,format.paginateBounds.y), new SizeF(param.bounds.width, tempResult.bounds.height));\n                      bounds.x += param.bounds.x;\n                      if (row.grid.ParentCell.row.grid.style.cellPadding != null)\n                      {\n                          bounds.y += row.grid.ParentCell.row.grid.style.cellPadding.top;\n                          if (bounds.height > this.currentPageBounds.height)\n                          {\n                              bounds.height = this.currentPageBounds.height - bounds.y;\n                              bounds.height -= (row.grid.ParentCell.row.grid.style.cellPadding.bottom);\n                          }\n                      }\n                      // Draw border for cells in the nested grid cell's row.\n                      for (let c : number = 0; c < row.cells.count; c++)\n                      {\n                          let cell : PdfGridCell = row.cells.getCell(c);\n                          let cellWidth :  number= 0;\n                          if (cell.columnSpan > 1)\n                          {\n                              for (; c < cell.columnSpan; c++)\n                                  cellWidth += row.grid.columns.getColumn(c).width;\n                          }\n                          else\n                              cellWidth = Math.max(cell.width, row.grid.columns.getColumn(c).width);\n                          cell.drawCellBorders(this.currentGraphics, new RectangleF(new PointF(bounds.x,bounds.y), new SizeF(cellWidth, bounds.height)));\n                          bounds.x += cellWidth;\n                          c += (cell.columnSpan - 1);\n                      }\n                  }\n              }\n              */\n\n          endArgs = this.raisePageLayouted(tempResult);\n          if (endArgs.cancel || repeatRow) break;else if (this.Grid.allowRowBreakAcrossPages) {\n            //If there is no space in the current page, add new page and then draw the remaining row.\n            this.currentPage = this.getNextPageformat(format);\n            originalHeight = this.currentBounds.y;\n            var location_1 = new PointF(PdfBorders.default.right.width / 2, PdfBorders.default.top.width / 2); // if (format.paginateBounds == new RectangleF(0,0,0,0) && this.startLocation == location)\n            // {\n            //     this.currentBounds.x += this.startLocation.x;\n            //     this.currentBounds.y += this.startLocation.y;\n            // }\n\n            if (this.Grid.isChildGrid && row.grid.ParentCell != null) {\n              if (this.Grid.ParentCell.row.grid.style.cellPadding != null) {\n                if (row.rowBreakHeight + this.Grid.ParentCell.row.grid.style.cellPadding.top < this.currentBounds.height) {\n                  this.currentBounds.y = this.Grid.ParentCell.row.grid.style.cellPadding.top;\n                }\n              }\n            }\n\n            if (row.grid.ParentCell != null) {\n              row.grid.ParentCell.row.isRowBreaksNextPage = true;\n              row.grid.ParentCell.row.rowBreakHeightValue = row.rowBreakHeight + this.Grid.ParentCell.row.grid.style.cellPadding.top + this.Grid.ParentCell.row.grid.style.cellPadding.bottom;\n\n              for (var i_2 = row.rowIndex + 1; i_2 < row.grid.rows.count; i_2++) {\n                row.grid.ParentCell.row.rowBreakHeightValue += row.grid.rows.getRow(i_2).height;\n              } //row.rowBreakHeight = row.grid.ParentCell.row.rowBreakHeightValue;\n\n            }\n            /*if (row.noOfPageCount > 1)\n            {\n                let temp : number = row.rowBreakHeightValue;\n                for (let j : number = 1; j < row.noOfPageCount; j++)\n                {\n                    row.rowBreakHeightValue = 0;\n                    row.height = ((row.noOfPageCount - 1) * this.currentPage.getClientSize().height);\n                    this.drawRow(row);\n                    this.currentPage = this.getNextPageformat(format);\n                    startPage = this.currentPage;\n                }\n                row.rowBreakHeightValue = temp;\n                row.noOfPageCount = 1;\n                rowResult = this.drawRow(row);\n            } else {\n                rowResult = this.drawRow(row);\n            }\n            /*if(row.grid.isChildGrid){\n                row.isrowFinish = false;\n                row.isrowDraw = false;\n                row.grid.isgridSplit = true;\n                row.grid.ParentCell.row.grid.isgridSplit = true;\n                //rowResult.isFinish = false;\n                break;\n            }*/\n\n\n            if (row.grid.isChildGrid) {\n              //row.grid.isgridSplit = true;\n              row.isrowFinish = false; //row.grid.ParentCell.row.grid.isgridSplit = true;\n\n              row.grid.splitChildRowIndex = row.rowIndex;\n              row.grid.ParentCell.row.grid.splitChildRowIndex = row.grid.ParentCell.row.rowIndex;\n\n              if (row.grid.ParentCell.row.grid.isGridSplit) {\n                row.grid.ParentCell.row.noOfPageCount += 1;\n                row.grid.ParentCell.row.grid.isGridSplit = false;\n              }\n\n              break;\n            }\n\n            if (row.noOfPageCount < 1) {\n              if (row.grid.splitChildRowIndex != -1) {\n                row.grid.isGridSplit = true;\n              }\n\n              this.currentBounds.y = 0.50;\n\n              if (this.Grid.repeatHeader) {\n                for (var j_1 = 0; j_1 < this.Grid.headers.count; j_1++) {\n                  var headerRepeat = this.Grid.headers.getHeader(j_1);\n                  this.drawRow(headerRepeat);\n                }\n              }\n\n              rowResult = this.drawRow(row);\n\n              if (row.noOfPageCount >= 1) {\n                var temp = row.rowBreakHeightValue;\n\n                for (var j_2 = 0; j_2 < row.noOfPageCount; j_2++) {\n                  //this.currentPage.section.add();\n                  var tempResult1 = this.getLayoutResult();\n                  endArgs = this.raisePageLayouted(tempResult1);\n                  this.currentPage = this.getNextPageformat(format);\n                  originalHeight = this.currentBounds.y; //row.rowBreakHeightValue = 0;\n\n                  if (row.grid.splitChildRowIndex != -1) {\n                    row.grid.isGridSplit = true;\n                  }\n\n                  this.currentBounds.y = 0.5;\n\n                  if (this.Grid.repeatHeader) {\n                    for (var i_3 = 0; i_3 < this.Grid.headers.count; i_3++) {\n                      var header = this.Grid.headers.getHeader(i_3);\n                      this.drawRow(header);\n                    }\n                  } //row.height = ((row.noOfPageCount - 1) * this.currentPage.getClientSize().height);\n\n\n                  this.drawRow(row);\n                } // row.rowBreakHeight = temp;\n                // row.noOfPageCount = 1;\n                // rowResult = this.drawRow(row);\n\n              }\n\n              row.grid.splitChildRowIndex = -1;\n              row.grid.isGridSplit = false;\n              rowResult.isFinish = true; //row.NestedGridLayoutResult.bounds.height = row.rowBreakHeightValue;\n              //this.currentBounds.y = rowResult.bounds.y;\n\n              for (var i_4 = 0; i_4 < row.cells.count; i_4++) {\n                if (row.cells.getCell(i_4).value instanceof PdfGrid) {\n                  row.cells.getCell(i_4).value.splitChildRowIndex = -1;\n                }\n              }\n            }\n          } // else if (!this.Grid.allowRowBreakAcrossPages && i < length)\n          // {\n          //     this.currentPage = this.getNextPageformat(format);\n          //     break;\n          // }\n          // else if (i >= length)\n          //     break;\n        }\n\n        if (!rowResult.isFinish && startPage !== null && format.layout !== PdfLayoutType.OnePage && repeatRow) {\n          // During pagination, cell position is maintained here.\n          this.startLocation.x = this.currentBounds.x;\n          var isAddNextPage = false;\n          this.currentPage = this.getNextPageformat(format);\n          /*if (!this.Grid.isSingleGrid)\n          {\n              for ( let j : number= 0; j < this.Grid.rows.count; j++)\n              {\n                  let isWidthGreaterthanParent : boolean = false;\n                  for (let k : number = 0; k < this.Grid.rows.getRow(j).cells.count; k++)\n                  {\n                      if (this.Grid.rows.getRow(j).cells.getCell(k).width > this.currentPageBounds.width)\n                          isWidthGreaterthanParent = true;\n                  }\n                  if (isWidthGreaterthanParent && this.Grid.rows.getRow(j).cells.getCell(this.rowBreakPageHeightCellIndex).pageCount > 0)\n                  {\n                      isAddNextPage = true;\n                  }\n              }\n          }\n          if (!this.Grid.isRearranged && isAddNextPage)\n               {\n                   let section : PdfSection = this.currentPage.section;\n                   \n                   //this.currentPage = section.add();\n               \n                   this.currentGraphics = this.currentPage.graphics;\n                   this.currentBounds = new RectangleF(new PointF(0,0), this.currentPage.getClientSize());\n                \n                   let pageindex  : number = (this.currentGraphics.page as PdfPage).section.indexOf(this.currentGraphics.page as PdfPage);\n               }\n               else\n               {\n                   this.currentPage = this.getNextPageformat(format);\n               }\n               if (format.paginateBounds.y == 0)\n                   this.currentBounds.y = PdfBorders.default.top.width/2;\n               else\n               {\n                   this.currentBounds.y = format == null ? 0 : format.paginateBounds.y;\n                   \n               }\n               if (this.raiseBeforePageLayout(this.currentPage, this.currentBounds, this.currentRowIndex))\n                   break;*/\n\n          if (param.format !== null && !param.format.usePaginateBounds && param.bounds !== null && param.bounds.height > 0 && !this.Grid.isChildGrid) {\n            this.currentBounds.height = param.bounds.height;\n          }\n\n          if (param.format !== null && !param.format.usePaginateBounds && param.bounds !== null && param.bounds.y > 0 && !this.Grid.isChildGrid) {\n            this.currentBounds.y = param.bounds.y;\n          }\n\n          this.startLocation.y = this.currentBounds.y;\n\n          if (format.paginateBounds.x === format.paginateBounds.y && format.paginateBounds.y === format.paginateBounds.height && format.paginateBounds.height === format.paginateBounds.width && format.paginateBounds.width === 0) {\n            this.currentBounds.x += this.startLocation.x;\n          }\n\n          if (this.currentBounds.x === PdfBorders.default.left.width / 2) {\n            this.currentBounds.y += this.startLocation.x;\n          }\n\n          if (this.Grid.repeatHeader) {\n            for (var i_5 = 0; i_5 < this.Grid.headers.count; i_5++) {\n              var header = this.Grid.headers.getHeader(i_5);\n              this.drawRow(header);\n            }\n          }\n\n          this.drawRow(row);\n\n          if (this.currentPage !== null && !layoutedPages.containsKey(this.currentPage)) {\n            layoutedPages.add(this.currentPage, range);\n          }\n        }\n\n        if (row.NestedGridLayoutResult != null) {\n          // Position for next row in the grid.\n          this.currentPage = row.NestedGridLayoutResult.page;\n          this.currentGraphics = this.currentPage.graphics; //If not, next row will not be drawn in the layouted page.\n\n          this.startLocation = new PointF(row.NestedGridLayoutResult.bounds.x, row.NestedGridLayoutResult.bounds.y);\n          var recalHeight = this.ReCalculateHeight(row, row.NestedGridLayoutResult.bounds.height);\n          this.currentBounds.y = recalHeight; //this.currentBounds.y = row.NestedGridLayoutResult.bounds.height;\n\n          if (startPage != this.currentPage) {\n            var secion = this.currentPage.section;\n            var startIndex = secion.indexOf(startPage) + 1;\n            var endIndex = secion.indexOf(this.currentPage);\n\n            for (var page = startIndex; page < endIndex + 1; page++) {\n              var pageGraphics = this.currentPage.graphics;\n              var location_2 = new PointF(format.paginateBounds.x, format.paginateBounds.y);\n              var height = page == endIndex ? row.NestedGridLayoutResult.bounds.height - param.bounds.y : this.currentBounds.height - location_2.y;\n              if (height <= pageGraphics.clientSize.height) height += param.bounds.y; // if (row.grid.isChildGrid && row.grid.ParentCell != null)\n              //     location.x += param.bounds.x;\n\n              location_2.y = format == null ? 0.5 : format.paginateBounds.y; // Draw border for last paginated row containing nested grid.\n\n              for (var c = 0; c < row.cells.count; c++) {\n                var cell = row.cells.getCell(c);\n                var cellWidth = 0;\n                var totalwidth = 0;\n\n                if (cell.value instanceof PdfGrid) {\n                  for (var i_6 = 0; i_6 < cell.value.columns.count; i_6++) {\n                    totalwidth += cell.value.columns.getColumn(i_6).columnWidth;\n                  }\n                } else {\n                  totalwidth = cell.width;\n                } // if (cell.columnSpan > 1)\n                // {\n                //     for (; c < cell.columnSpan; c++)\n                //         cellWidth += row.grid.columns.getColumn(c).width;\n                // }\n                // else\n\n\n                cellWidth = Math.max(totalwidth, row.grid.columns.getColumn(c).width);\n                cell.drawCellBorders(pageGraphics, new RectangleF(location_2, new SizeF(cellWidth, height)));\n                location_2.x += cellWidth;\n                c += cell.columnSpan - 1;\n              }\n            } // So, nested grid drawing is completed for the current row. Update page.\n            // Otherwise, the next nested grid of the parent will draw borders from start.\n\n\n            startPage = this.currentPage;\n          }\n        }\n      }\n\n      var isPdfGrid = false;\n      var maximumCellBoundsWidth = 0;\n\n      if (cellBounds.length > 0) {\n        maximumCellBoundsWidth = cellBounds[0];\n      }\n\n      var largeNavigatePage = [[1, 2]];\n\n      for (var c = 0; c < this.Grid.rows.count; c++) {\n        if (this.cellEndIndex != -1 && this.Grid.rows.getRow(c).cells.getCell(this.cellEndIndex).value instanceof PdfGrid) {\n          var grid = this.Grid.rows.getRow(c).cells.getCell(this.cellEndIndex).value;\n          this.rowLayoutBoundsWidth = grid.rowLayoutBoundsWidth;\n          isPdfGrid = true; // if (largeNavigatePage[0][0] < grid.listOfNavigatePages.length)\n          // {\n          //     largeNavigatePage[0][0] = grid.listOfNavigatePages.length;\n          //     largeNavigatePage[0][1] = cellBounds[c];\n          // }\n          // else if ((largeNavigatePage[0][0] == grid.listOfNavigatePages.length) && (largeNavigatePage[0][1] < cellBounds[c]))\n          // {\n          //     largeNavigatePage[0][1] = cellBounds[c];\n          // }\n        }\n      }\n\n      if (!isPdfGrid && cellBounds.length > 0) {\n        for (var c = 0; c < i - 1; c++) {\n          if (maximumCellBoundsWidth < cellBounds[c]) {\n            maximumCellBoundsWidth = cellBounds[c];\n          }\n        }\n\n        this.rowLayoutBoundsWidth = maximumCellBoundsWidth;\n      } else {\n        this.rowLayoutBoundsWidth = largeNavigatePage[0][1];\n      }\n\n      if (this.columnRanges.indexOf(range) < this.columnRanges.length - 1 && startPage != null && format.layout != PdfLayoutType.OnePage) {\n        isParentCell = this.Grid.isChildGrid;\n\n        if (largeNavigatePage[0][0] != 0) {\n          var section = this.currentPage.section;\n          var pageIndex = section.indexOf(this.currentPage);\n          this.currentGraphics = this.currentPage.graphics;\n          this.currentBounds = new RectangleF(new PointF(0, 0), this.currentPage.getClientSize());\n          var pageindex = this.currentGraphics.page.section.indexOf(this.currentGraphics.page);\n        } else {\n          this.currentPage = this.getNextPageformat(format);\n        } // let locationGrid : PointF= new PointF(PdfBorders.default.right.width / 2, PdfBorders.default.top.width / 2);\n        // if (format.paginateBounds == new RectangleF(0,0,0,0) && this.startLocation == locationGrid)\n        // {\n        //     this.currentBounds.x += this.startLocation.x;\n        //     this.currentBounds.y += this.startLocation.y;\n        // }\n\n      }\n\n      if (this.columnRanges.length - 1 !== index && this.columnRanges.length > 1 && format.layout !== PdfLayoutType.OnePage) {\n        this.currentPage = this.getNextPageformat(format);\n\n        if (format.paginateBounds.x === format.paginateBounds.y && format.paginateBounds.y === format.paginateBounds.height && format.paginateBounds.height === format.paginateBounds.width && format.paginateBounds.width === 0) {\n          this.currentBounds.x += this.startLocation.x;\n          this.currentBounds.y += this.startLocation.y; //this.currentBounds.height = this.pageBounds.height;\n        }\n      }\n    }\n\n    result = this.getLayoutResult();\n\n    if (this.Grid.style.allowHorizontalOverflow && this.Grid.style.horizontalOverflowType == PdfHorizontalOverflowType.NextPage) {\n      this.reArrangePages(layoutedPages);\n    }\n\n    this.raisePageLayouted(result);\n    return result;\n  };\n  /* tslint:enable */\n\n  /**\n   * Gets the `next page`.\n   * @private\n   */\n\n\n  PdfGridLayouter.prototype.getNextPageformat = function (format) {\n    var section = this.currentPage.section;\n    var nextPage = null;\n    var index = section.indexOf(this.currentPage);\n    this.flag = false;\n\n    if (index === section.count - 1) {\n      nextPage = section.add();\n    } else {\n      nextPage = section.getPages()[index + 1];\n    }\n\n    this.currentGraphics = nextPage.graphics;\n    var pageindex = this.currentGraphics.page.section.indexOf(this.currentGraphics.page);\n\n    if (!(this.listOfNavigatePages.indexOf(pageindex) !== -1)) {\n      this.listOfNavigatePages.push(pageindex);\n    }\n\n    this.currentBounds = new RectangleF(new PointF(0, 0), nextPage.getClientSize()); // if ((format.paginateBounds.x !== format.paginateBounds.y) && (format.paginateBounds.y !== format.paginateBounds.height)\n    //     && (format.paginateBounds.height !== format.paginateBounds.width) && (format.paginateBounds.width !== 0)) {\n    //     this.currentBounds.x = format.paginateBounds.x;\n    //     this.currentBounds.y = format.paginateBounds.y;\n    //     this.currentBounds.height = format.paginateBounds.height;\n    // }\n\n    return nextPage;\n  };\n\n  PdfGridLayouter.prototype.CheckIfDefaultFormat = function (format) {\n    var defaultFormat = new PdfStringFormat();\n    return format.alignment === defaultFormat.alignment && format.characterSpacing === defaultFormat.characterSpacing && format.clipPath === defaultFormat.clipPath && format.firstLineIndent === defaultFormat.firstLineIndent && format.horizontalScalingFactor === defaultFormat.horizontalScalingFactor && format.lineAlignment === defaultFormat.lineAlignment && format.lineLimit === defaultFormat.lineLimit && format.lineSpacing === defaultFormat.lineSpacing && format.measureTrailingSpaces === defaultFormat.measureTrailingSpaces && format.noClip === defaultFormat.noClip && format.paragraphIndent === defaultFormat.paragraphIndent && format.rightToLeft === defaultFormat.rightToLeft && format.subSuperScript === defaultFormat.subSuperScript && format.wordSpacing === defaultFormat.wordSpacing && format.wordWrap === defaultFormat.wordWrap;\n  };\n  /**\n   * `Raises BeforeCellDraw event`.\n   * @private\n   */\n\n\n  PdfGridLayouter.prototype.RaiseBeforeCellDraw = function (graphics, rowIndex, cellIndex, bounds, value, style) {\n    var args = null;\n\n    if (this.Grid.raiseBeginCellDraw) {\n      args = new PdfGridBeginCellDrawEventArgs(graphics, rowIndex, cellIndex, bounds, value, style);\n      this.Grid.onBeginCellDraw(args);\n      style = args.style;\n    }\n\n    return style;\n  };\n  /**\n   * `Raises AfterCellDraw event`.\n   * @private\n   */\n\n\n  PdfGridLayouter.prototype.raiseAfterCellDraw = function (graphics, rowIndex, cellIndex, bounds, value, cellstyle) {\n    var args = null;\n\n    if (this.Grid.raiseEndCellDraw) {\n      args = new PdfGridEndCellDrawEventArgs(graphics, rowIndex, cellIndex, bounds, value, cellstyle);\n      this.Grid.onEndCellDraw(args);\n    }\n  };\n\n  PdfGridLayouter.prototype.reArrangePages = function (layoutedPages) {\n    var document = this.currentPage.document;\n    var pages = [];\n    var keys = layoutedPages.keys();\n    var values = layoutedPages.values();\n\n    for (var i = 0; i < keys.length; i++) {\n      var page = keys[i];\n      page.section = null;\n      pages.push(page);\n      document.pages.remove(page);\n    }\n    /* tslint:disable */\n\n\n    for (var i = 0; i < layoutedPages.size(); i++) {\n      var count = 0;\n\n      for (var j = i, count_1 = layoutedPages.size() / this.columnRanges.length; j < layoutedPages.size(); j += count_1) {\n        var page = pages[j];\n\n        if (document.pages.indexOf(page) === -1) {\n          document.pages.add(page);\n        }\n      }\n    }\n    /* tslint:enable */\n\n  };\n  /**\n   * Gets the `layout result`.\n   * @private\n   */\n\n\n  PdfGridLayouter.prototype.getLayoutResult = function () {\n    if (this.Grid.isChildGrid && this.Grid.allowRowBreakAcrossPages) {\n      for (var i = 0; i < this.Grid.rows.count; i++) {\n        var row = this.Grid.rows.getRow(i);\n\n        if (row.rowBreakHeight > 0 && row.repeatFlag) {\n          this.startLocation.y = this.currentPage.origin.y;\n        }\n      }\n    }\n\n    var bounds;\n\n    if (!this.isChanged) {\n      bounds = new RectangleF(this.startLocation, new SizeF(this.currentBounds.width, this.currentBounds.y - this.startLocation.y));\n    } // else {\n    //     bounds = new RectangleF(this.currentLocation, new SizeF(this.currentBounds.width, this.currentBounds.y -\n    //                              this.currentLocation.y));\n    // }\n\n    /* tslint:enable */\n\n\n    return new PdfGridLayoutResult(this.currentPage, bounds);\n  };\n  /**\n   * `Recalculate row height` for the split cell to be drawn.\n   * @private\n   */\n\n\n  PdfGridLayouter.prototype.ReCalculateHeight = function (row, height) {\n    var newHeight = 0.0;\n\n    for (var i = this.cellStartIndex; i <= this.cellEndIndex; i++) {\n      if (!(row.cells.getCell(i).remainingString === null || row.cells.getCell(i).remainingString === '' || typeof row.cells.getCell(i).remainingString === 'undefined')) {\n        newHeight = Math.max(newHeight, row.cells.getCell(i).measureHeight());\n      }\n    }\n\n    return Math.max(height, newHeight);\n  };\n  /**\n   * `Raises BeforePageLayout event`.\n   * @private\n   */\n\n\n  PdfGridLayouter.prototype.raiseBeforePageLayout = function (currentPage, currentBounds, currentRow) {\n    var cancel = false;\n\n    if (this.Grid.raiseBeginPageLayout) {\n      var args = new PdfGridBeginPageLayoutEventArgs(currentBounds, currentPage, currentRow);\n      this.Grid.onBeginPageLayout(args); // if (currentBounds !== args.Bounds) {\n      //     this.isChanged = true;\n      //     this.currentLocation = new PointF(args.Bounds.x, args.Bounds.y);\n      //     this.measureColumnsWidth(new RectangleF(new PointF(args.Bounds.x, args.Bounds.y) ,\n      //                                                  new SizeF(args.Bounds.width + args.Bounds.x ,\n      //                                                                 args.Bounds.height)));\n      // }\n\n      cancel = args.cancel;\n      currentBounds = args.bounds;\n      currentRow = args.startRowIndex;\n    }\n\n    return {\n      returnValue: cancel,\n      currentBounds: currentBounds,\n      currentRowIndex: currentRow\n    };\n  };\n  /**\n   * `Raises PageLayout event` if needed.\n   * @private\n   */\n\n\n  PdfGridLayouter.prototype.raisePageLayouted = function (result) {\n    var args = new PdfGridEndPageLayoutEventArgs(result);\n\n    if (this.Grid.raiseEndPageLayout) {\n      this.Grid.onEndPageLayout(args);\n    }\n\n    return args;\n  };\n\n  PdfGridLayouter.prototype.drawRow = function (row, result, height) {\n    if (typeof result === 'undefined') {\n      //.. Check if required space available.\n      //.....If the row conains spans which  falls through more than one page, then draw the row to next page.                        \n      var result_1 = new RowLayoutResult();\n      var rowHeightWithSpan = 0;\n      var location_3 = new PointF(0, 0);\n      var size = new SizeF(0, 0);\n      var isHeader = false;\n\n      if (row.rowSpanExists) {\n        var maxSpan = 0;\n        var currRowIndex = this.Grid.rows.rowCollection.indexOf(row);\n\n        if (currRowIndex === -1) {\n          currRowIndex = this.Grid.headers.indexOf(row);\n\n          if (currRowIndex !== -1) {\n            isHeader = true;\n          }\n        }\n\n        for (var i = 0; i < row.cells.count; i++) {\n          var cell = row.cells.getCell(i);\n          maxSpan = Math.max(maxSpan, cell.rowSpan);\n        }\n\n        for (var i = currRowIndex; i < currRowIndex + maxSpan; i++) {\n          rowHeightWithSpan += isHeader ? this.Grid.headers.getHeader(i).height : this.Grid.rows.getRow(i).height;\n        } // let rowMaxHeight : number = rowHeightWithSpan;\n        // for (let i : number = 0; i < row.cells.count; i++ ) {\n        //     rowMaxHeight = rowMaxHeight > row.cells.getCell(i).height ? rowMaxHeight : row.cells.getCell(i).height;\n        // }\n        // let flag : boolean = true;\n        // let nextRow : PdfGridRow = this.Grid.headers.getHeader(this.Grid.headers.indexOf(row) + 1);\n        // for (let i : number = 0; i < nextRow.cells.count; i++ ) {\n        //     if (nextRow.cells.getCell(i).value !== '' && nextRow.cells.getCell(i).value !== undefined) {\n        //         flag = false;\n        //         break;\n        //     }\n        // }\n        // if ((rowMaxHeight > rowHeightWithSpan) && flag) {\n        //     row.height += (rowMaxHeight - rowHeightWithSpan);\n        // }                \n\n      }\n\n      var calculatedHeight = row.rowBreakHeight > 0.0 ? row.rowBreakHeight : row.height;\n\n      if (this.Grid.isChildGrid && this.Grid.ParentCell != null) {\n        //Split row only if row height exceeds page height and AllowRowBreakAcrossPages is true.\n        // if (calculatedHeight + this.Grid.ParentCell.row.grid.style.cellPadding.bottom +\n        //             this.Grid.ParentCell.row.grid.style.cellPadding.top > this.currentPageBounds.height) {\n        //     if (this.Grid.allowRowBreakAcrossPages) {\n        //         result.isFinish = true;\n        //         if ( this.Grid.isChildGrid && row.rowBreakHeight > 0 ) {\n        //             if (this.Grid.ParentCell.row.grid.style.cellPadding !== null) {\n        //                 this.currentBounds.y += this.Grid.ParentCell.row.grid.style.cellPadding.top;\n        //             }\n        //             this.currentBounds.x = this.startLocation.x;\n        //         }\n        //         result.bounds = this.currentBounds ;\n        //         this.drawRowWithBreak(result, row, calculatedHeight);\n        //     } else {\n        //         //If AllowRowBreakAcrossPages is not true, draw the row till it fits the page.                       \n        //         if (this.Grid.ParentCell.row.grid.style.cellPadding != null) {\n        //             this.currentBounds.y += this.Grid.ParentCell.row.grid.style.cellPadding.top;\n        //             calculatedHeight = this.currentBounds.height - this.currentBounds.y -\n        //                     this.Grid.ParentCell.row.grid.style.cellPadding.bottom;\n        //         }\n        //         result.isFinish = false;\n        //         this.drawRow( row, result, calculatedHeight);\n        //     }\n        // } else\n        if (this.currentBounds.y + this.Grid.ParentCell.row.grid.style.cellPadding.bottom + calculatedHeight > this.currentPageBounds.height || this.currentBounds.y + this.Grid.ParentCell.row.grid.style.cellPadding.bottom + calculatedHeight > this.currentBounds.height || this.currentBounds.y + this.Grid.ParentCell.row.grid.style.cellPadding.bottom + rowHeightWithSpan > this.currentPageBounds.height) {\n          //If a row is repeated and still cannot fit in page, proceed draw.\n          if (this.Grid.ParentCell.row.grid.LayoutFormat.break === PdfLayoutBreakType.FitPage) {\n            PdfGridLayouter.repeatRowIndex = this.Grid.rows.rowCollection.indexOf(row);\n            this.Grid.splitChildRowIndex = this.Grid.rows.rowCollection.indexOf(row);\n          }\n\n          if (PdfGridLayouter.repeatRowIndex > -1 && PdfGridLayouter.repeatRowIndex === row.rowIndex) {\n            if (this.Grid.allowRowBreakAcrossPages) {\n              result_1.isFinish = true; // if (this.Grid.isChildGrid && row.rowBreakHeightValue > 0) {\n              //     // if (this.Grid.ParentCell.row.grid.style.cellPadding != null) {\n              //     //     this.currentBounds.y += this.Grid.ParentCell.row.grid.style.cellPadding.top;\n              //     // }\n              //     this.currentBounds.x = this.startLocation.x;\n              // }\n\n              result_1.bounds = this.currentBounds;\n              this.drawRowWithBreak(result_1, row, calculatedHeight);\n              row.repeatFlag = true;\n              row.repeatRowNumber = PdfGridLayouter.repeatRowIndex;\n            } // else {\n            //     result.isFinish = false;\n            //     row.repeatFlag = false;\n            //     this.drawRow( row, result, calculatedHeight);\n            // }\n\n          } // else {\n          //     result.isFinish = false;\n          // }\n\n        } else {\n          result_1.isFinish = true;\n\n          if (row.grid.ParentCell.row.rowBreakHeightValue > 0) {\n            row.repeatFlag = true;\n          } else {\n            row.repeatFlag = false;\n            calculatedHeight = row.height;\n          }\n\n          if (this.Grid.isChildGrid && row.rowBreakHeight > 0) {\n            if (this.Grid.ParentCell.row.grid.style.cellPadding != null) {\n              calculatedHeight += this.Grid.ParentCell.row.grid.style.cellPadding.bottom;\n            }\n          }\n\n          this.drawRow(row, result_1, calculatedHeight);\n        }\n      } else {\n        //Split row only if row height exceeds page height and AllowRowBreakAcrossPages is true.\n        if (calculatedHeight > this.currentPageBounds.height) {\n          if (this.Grid.allowRowBreakAcrossPages) {\n            result_1.isFinish = true; //result.bounds = this.currentBounds;\n\n            this.drawRowWithBreak(result_1, row, calculatedHeight);\n            row.isrowFinish = true;\n            row.repeatFlag = true;\n\n            if (row.grid.splitChildRowIndex !== -1) {\n              result_1.isFinish = false;\n            }\n          } // else {\n          //     //If AllowRowBreakAcrossPages is not true, draw the row till it fits the page.\n          //     result.isFinish = false;\n          //     this.drawRow( row, result, calculatedHeight);\n          // }\n\n        } else if (this.currentBounds.y + calculatedHeight > this.currentPageBounds.height || this.currentBounds.y + calculatedHeight > this.currentBounds.height + this.startLocation.y || this.currentBounds.y + rowHeightWithSpan > this.currentPageBounds.height) {\n          // If a row is repeated and still cannot fit in page, proceed draw.\n          if (this.Grid.LayoutFormat.break === PdfLayoutBreakType.FitPage) {\n            PdfGridLayouter.repeatRowIndex = this.Grid.rows.rowCollection.indexOf(row);\n          }\n\n          if (PdfGridLayouter.repeatRowIndex > -1 && PdfGridLayouter.repeatRowIndex === row.rowIndex) {\n            if (this.Grid.allowRowBreakAcrossPages) {\n              result_1.isFinish = true;\n              this.drawRowWithBreak(result_1, row, calculatedHeight);\n              row.repeatFlag = true;\n              row.repeatRowNumber = PdfGridLayouter.repeatRowIndex;\n\n              if (row.grid.splitChildRowIndex !== -1) {\n                result_1.isFinish = false;\n              }\n            } // else {\n            //     result.isFinish = false;\n            //     this.drawRow(row, result, calculatedHeight);\n            // }\n\n          } else {\n            result_1.isFinish = false;\n          }\n        } else {\n          result_1.isFinish = true;\n          this.drawRow(row, result_1, calculatedHeight);\n          row.repeatFlag = false;\n        }\n      }\n\n      return result_1;\n    } else {\n      var skipcell = false;\n      var location_4 = new PointF(this.currentBounds.x, this.currentBounds.y); // if (row.grid.isChildGrid && row.grid.allowRowBreakAcrossPages && this.startLocation.x !== this.currentBounds.x && row.width <\n      //                 this.currentPage.getClientSize().width) {\n      //     location.x = this.startLocation.x;\n      // }\n\n      result.bounds = new RectangleF(location_4, new SizeF(0, 0));\n      height = this.ReCalculateHeight(row, height);\n\n      for (var i = this.cellStartIndex; i <= this.cellEndIndex; i++) {\n        var cancelSpans = i > this.cellEndIndex + 1 && row.cells.getCell(i).columnSpan > 1; // let cancelSpans : boolean = false;\n\n        if (!cancelSpans) {\n          for (var j = 1; j < row.cells.getCell(i).columnSpan; j++) {\n            row.cells.getCell(i + j).isCellMergeContinue = true;\n          }\n        }\n\n        var size = new SizeF(this.Grid.columns.getColumn(i).width, height); // if (size.width > this.currentGraphics.clientSize.width) {\n        //     size.width = this.currentGraphics.clientSize.width;\n        // }\n        // if (this.Grid.isChildGrid && this.Grid.style.allowHorizontalOverflow) {\n        //     if (size.width >= this.currentGraphics.clientSize.width) {\n        //         size.width -= 2 * this.currentBounds.x;\n        //     }\n        // }\n\n        /* tslint:disable */\n\n        if (!this.CheckIfDefaultFormat(this.Grid.columns.getColumn(i).format) && this.CheckIfDefaultFormat(row.cells.getCell(i).stringFormat)) {\n          row.cells.getCell(i).stringFormat = this.Grid.columns.getColumn(i).format;\n        }\n\n        var cellstyle = row.cells.getCell(i).style;\n        var tempValue = typeof row.cells.getCell(i).value === 'string' && row.cells.getCell(i).value !== null ? row.cells.getCell(i).value : '';\n        row.cells.getCell(i).style = this.RaiseBeforeCellDraw(this.currentGraphics, this.currentRowIndex, i, new RectangleF(location_4, size), tempValue, cellstyle); //row.cells.getCell(i).style = cellstyle;\n\n        if (!skipcell) {\n          if (row.cells.getCell(i).value instanceof PdfGrid) {\n            var grid = row.cells.getCell(i).value;\n            grid.parentCellIndex = i;\n          }\n\n          var stringResult = row.cells.getCell(i).draw(this.currentGraphics, new RectangleF(location_4, size), cancelSpans);\n\n          if (row.grid.style.allowHorizontalOverflow && (row.cells.getCell(i).columnSpan > this.cellEndIndex || i + row.cells.getCell(i).columnSpan > this.cellEndIndex + 1) && this.cellEndIndex < row.cells.count - 1) {\n            row.rowOverflowIndex = this.cellEndIndex;\n          }\n\n          if (row.grid.style.allowHorizontalOverflow && row.rowOverflowIndex > 0 && (row.cells.getCell(i).columnSpan > this.cellEndIndex || i + row.cells.getCell(i).columnSpan > this.cellEndIndex + 1) && row.cells.getCell(i).columnSpan - this.cellEndIndex + i - 1 > 0) {\n            row.cells.getCell(row.rowOverflowIndex + 1).value = stringResult !== null ? stringResult.remainder !== undefined ? stringResult.remainder : '' : '';\n            row.cells.getCell(row.rowOverflowIndex + 1).stringFormat = row.cells.getCell(i).stringFormat;\n            row.cells.getCell(row.rowOverflowIndex + 1).style = row.cells.getCell(i).style;\n            row.cells.getCell(row.rowOverflowIndex + 1).columnSpan = row.cells.getCell(i).columnSpan - this.cellEndIndex + i - 1;\n          }\n        }\n        /* tslint:enable */\n\n\n        tempValue = typeof row.cells.getCell(i).value === 'string' && row.cells.getCell(i).value !== null ? row.cells.getCell(i).value : '';\n\n        if (!cancelSpans) {\n          this.raiseAfterCellDraw(this.currentGraphics, this.currentRowIndex, i, new RectangleF(location_4, size), tempValue, row.cells.getCell(i).style);\n        }\n\n        if (row.cells.getCell(i).value instanceof PdfGrid) {\n          var grid = row.cells.getCell(i).value;\n\n          if (this.Grid.columns.getColumn(i).width >= this.currentGraphics.clientSize.width) {\n            location_4.x = grid.rowLayoutBoundsWidth;\n            location_4.x += grid.style.cellSpacing;\n          } else {\n            location_4.x += this.Grid.columns.getColumn(i).width;\n          }\n        } else {\n          location_4.x += this.Grid.columns.getColumn(i).width;\n        }\n      }\n\n      if (!row.rowMergeComplete || row.isRowHeightSet) {\n        this.currentBounds.y += height;\n      }\n\n      result.bounds = new RectangleF(new PointF(result.bounds.x, result.bounds.y), new SizeF(location_4.x, location_4.y));\n    }\n  };\n\n  PdfGridLayouter.prototype.drawRowWithBreak = function (result, row, calculateHeight) {\n    var location = new PointF(this.currentBounds.x, this.currentBounds.y);\n\n    if (row.grid.isChildGrid && row.grid.allowRowBreakAcrossPages && this.startLocation.x !== this.currentBounds.x) {\n      location.x = this.startLocation.x;\n    }\n\n    result.bounds = new RectangleF(location, new SizeF(0, 0));\n    this.gridHeight = row.rowBreakHeight > 0 ? this.currentPageBounds.height : 0; // Calculate the remaining height.\n\n    if (row.grid.style.cellPadding.top + this.currentBounds.y + row.grid.style.cellPadding.bottom < this.currentPageBounds.height) {\n      row.rowBreakHeight = this.currentBounds.y + calculateHeight - this.currentPageBounds.height;\n    } // else {\n    //     row.rowBreakHeight = calculateHeight;\n    //     result.isFinish = false;\n    //     return;\n    // }\n    // No need to explicit break if the row height is equal to grid height.\n\n\n    for (var i = 0; i < row.cells.count; i++) {\n      var cell = row.cells.getCell(i);\n      var cellHeight = cell.measureHeight();\n\n      if (cellHeight === calculateHeight && cell.value instanceof PdfGrid) {\n        row.rowBreakHeight = 0;\n      } // else if (cellHeight === calculateHeight && (cell.value as PdfGrid) === null) {\n      //     row.rowBreakHeight = this.currentBounds.y + calculateHeight - this.currentPageBounds.height;\n      // }\n\n    }\n\n    for (var i = this.cellStartIndex; i <= this.cellEndIndex; i++) {\n      var cancelSpans = row.cells.getCell(i).columnSpan + i > this.cellEndIndex + 1 && row.cells.getCell(i).columnSpan > 1; // if (!cancelSpans) {\n      //     for (let k : number = 1; k < row.cells.getCell(i).columnSpan; k++) {\n      //         row.cells.getCell(i + k).isCellMergeContinue = true;\n      //     }\n      //}\n\n      var size = new SizeF(this.Grid.columns.getColumn(i).width, this.gridHeight > 0.0 ? this.gridHeight : this.currentPageBounds.height); // if (size.width === 0) {\n      //     size = new SizeF(row.cells.getCell(i).width, size.height);\n      // }\n      // if (!this.CheckIfDefaultFormat(this.Grid.columns.getColumn(i).format) &&\n      //         this.CheckIfDefaultFormat((row.cells.getCell(i).stringFormat))) {\n      //     row.cells.getCell(i).stringFormat = this.Grid.columns.getColumn(i).format;\n      // }\n\n      var cellstyle1 = row.cells.getCell(i).style;\n      row.cells.getCell(i).style = cellstyle1;\n      var skipcell = false;\n      var stringResult = null;\n\n      if (!skipcell) {\n        stringResult = row.cells.getCell(i).draw(this.currentGraphics, new RectangleF(location, size), cancelSpans);\n      } //If still row is to be drawn, set cell finished drawing cell as false and update the text to be drawn.\n\n\n      if (row.rowBreakHeight > 0.0) {\n        if (stringResult != null) {\n          row.cells.getCell(i).FinishedDrawingCell = false;\n          row.cells.getCell(i).remainingString = stringResult.remainder == null ? ' ' : stringResult.remainder;\n\n          if (row.grid.isChildGrid) {\n            row.rowBreakHeight = calculateHeight - stringResult.actualSize.height;\n          }\n        }\n      }\n\n      result.isFinish = !result.isFinish ? result.isFinish : row.cells.getCell(i).FinishedDrawingCell; // let tempValue : string = ((typeof row.cells.getCell(i).value === 'string' &&\n      //row.cells.getCell(i).value !== null) ? row.cells.getCell(i).value : '') as string;\n      // if (!cancelSpans) {\n      //     // this.raiseAfterCellDraw(this.currentGraphics, this.currentRowIndex, i,\n      //     //           new RectangleF(location, size), tempValue, row.cells.getCell(i).style);            \n      //     this.raiseAfterCellDraw(this.currentGraphics, this.currentRowIndex, i, new RectangleF(location, size),\n      //                             (row.cells.getCell(i).value as string) ? row.cells.getCell(i).value.toString() : ' ',\n      //                             row.cells.getCell(i).style);\n      //     }                \n\n      if (row.cells.getCell(i).value instanceof PdfGrid) {\n        var grid = row.cells.getCell(i).value;\n        this.rowBreakPageHeightCellIndex = i; // row.cells.getCell(i).pageCount = grid.listOfNavigatePages.length;\n        // for (let j : number = 0;j<grid.listOfNavigatePages.length;j++){\n        //     let pageIndex : number =grid.listOfNavigatePages.indexOf(j);\n        //             this.Grid.listOfNavigatePages.push(pageIndex);\n        //     }\n\n        if (this.Grid.columns.getColumn(i).width >= this.currentGraphics.clientSize.width) {\n          location.x = this.rowLayoutBoundsWidth;\n          location.x += grid.style.cellSpacing;\n        } else {\n          location.x += this.Grid.columns.getColumn(i).width;\n        }\n      } else {\n        location.x += this.Grid.columns.getColumn(i).width;\n      }\n    }\n\n    this.currentBounds.y += this.gridHeight > 0.0 ? this.gridHeight : calculateHeight;\n    result.bounds = new RectangleF(new PointF(result.bounds.x, result.bounds.y), new SizeF(location.x, location.y));\n  };\n  /**\n   * @hidden\n   * @private\n   */\n\n\n  PdfGridLayouter.repeatRowIndex = -1;\n  return PdfGridLayouter;\n}(ElementLayouter);\n\nexport { PdfGridLayouter }; // recalculateBounds : boolean, clientSize : SizeF\n//Implementation\n\n/**\n * `Initializes` internal data.\n * @private\n */\n//Internal declaration\n\nvar PdfGridLayoutResult =\n/** @class */\nfunction (_super) {\n  __extends(PdfGridLayoutResult, _super);\n  /**\n   * Constructor\n   * @private\n   */\n\n\n  function PdfGridLayoutResult(page, bounds) {\n    return _super.call(this, page, bounds) || this;\n  }\n\n  return PdfGridLayoutResult;\n}(PdfLayoutResult);\n\nexport { PdfGridLayoutResult };\n/**\n * `PdfGridLayoutFormat` class represents a flexible grid that consists of columns and rows.\n */\n\nvar PdfGridLayoutFormat =\n/** @class */\nfunction (_super) {\n  __extends(PdfGridLayoutFormat, _super);\n  /**\n   * Initializes a new instance of the `PdfGridLayoutFormat` class.\n   * @private\n   */\n\n\n  function PdfGridLayoutFormat(baseFormat) {\n    return _super.call(this, baseFormat) || this;\n  }\n\n  return PdfGridLayoutFormat;\n}(PdfLayoutFormat);\n\nexport { PdfGridLayoutFormat };\n\nvar GridCellEventArgs =\n/** @class */\nfunction () {\n  // Constructors\n\n  /**\n   * Initialize a new instance for `GridCellEventArgs` class.\n   * @private\n   */\n  function GridCellEventArgs(graphics, rowIndex, cellIndex, bounds, value) {\n    this.gridRowIndex = rowIndex;\n    this.gridCellIndex = cellIndex;\n    this.internalValue = value;\n    this.gridBounds = bounds;\n    this.pdfGraphics = graphics;\n  }\n\n  Object.defineProperty(GridCellEventArgs.prototype, \"rowIndex\", {\n    // Properties\n\n    /**\n     * Gets the value of current `row index`.\n     * @private\n     */\n    get: function () {\n      return this.gridRowIndex;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(GridCellEventArgs.prototype, \"cellIndex\", {\n    /**\n     * Gets the value of current `cell index`.\n     * @private\n     */\n    get: function () {\n      return this.gridCellIndex;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(GridCellEventArgs.prototype, \"value\", {\n    /**\n     * Gets the actual `value` of current cell.\n     * @private\n     */\n    get: function () {\n      return this.internalValue;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(GridCellEventArgs.prototype, \"bounds\", {\n    /**\n     * Gets the `bounds` of current cell.\n     * @private\n     */\n    get: function () {\n      return this.gridBounds;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(GridCellEventArgs.prototype, \"graphics\", {\n    /**\n     * Gets the instance of `current graphics`.\n     * @private\n     */\n    get: function () {\n      return this.pdfGraphics;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return GridCellEventArgs;\n}();\n\nexport { GridCellEventArgs };\n\nvar PdfGridBeginCellDrawEventArgs =\n/** @class */\nfunction (_super) {\n  __extends(PdfGridBeginCellDrawEventArgs, _super); // Constructors\n\n  /**\n   * Initializes a new instance of the `StartCellLayoutEventArgs` class.\n   * @private\n   */\n\n\n  function PdfGridBeginCellDrawEventArgs(graphics, rowIndex, cellIndex, bounds, value, style) {\n    var _this = _super.call(this, graphics, rowIndex, cellIndex, bounds, value) || this;\n\n    _this.style = style;\n    return _this;\n  }\n\n  Object.defineProperty(PdfGridBeginCellDrawEventArgs.prototype, \"skip\", {\n    // Properties\n\n    /**\n     * Gets or sets a value indicating whether the value of this cell should be `skipped`.\n     * @private\n     */\n    get: function () {\n      return this.bSkip;\n    },\n    set: function (value) {\n      this.bSkip = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridBeginCellDrawEventArgs.prototype, \"style\", {\n    /**\n     * Gets or sets a `style` value of the cell.\n     * @private\n     */\n    get: function () {\n      return this.cellStyle;\n    },\n    set: function (value) {\n      this.cellStyle = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PdfGridBeginCellDrawEventArgs;\n}(GridCellEventArgs);\n\nexport { PdfGridBeginCellDrawEventArgs };\n\nvar PdfGridEndCellDrawEventArgs =\n/** @class */\nfunction (_super) {\n  __extends(PdfGridEndCellDrawEventArgs, _super); // Constructors\n\n  /**\n   * Initializes a new instance of the `PdfGridEndCellLayoutEventArgs` class.\n   * @private\n   */\n\n\n  function PdfGridEndCellDrawEventArgs(graphics, rowIndex, cellIndex, bounds, value, style) {\n    var _this = _super.call(this, graphics, rowIndex, cellIndex, bounds, value) || this;\n\n    _this.cellStyle = style;\n    return _this;\n  }\n\n  Object.defineProperty(PdfGridEndCellDrawEventArgs.prototype, \"style\", {\n    // Propertise\n\n    /**\n     * Get the `PdfGridCellStyle`.\n     * @private\n     */\n    get: function () {\n      return this.cellStyle;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PdfGridEndCellDrawEventArgs;\n}(GridCellEventArgs);\n\nexport { PdfGridEndCellDrawEventArgs };\n\nvar PdfCancelEventArgs =\n/** @class */\nfunction () {\n  function PdfCancelEventArgs() {}\n\n  Object.defineProperty(PdfCancelEventArgs.prototype, \"cancel\", {\n    // Properties\n\n    /**\n     * Gets and Sets the value of `cancel`.\n     * @private\n     */\n    get: function () {\n      return this.isCancel;\n    },\n    set: function (value) {\n      this.isCancel = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PdfCancelEventArgs;\n}();\n\nexport { PdfCancelEventArgs };\n\nvar BeginPageLayoutEventArgs =\n/** @class */\nfunction (_super) {\n  __extends(BeginPageLayoutEventArgs, _super); // Constructors\n\n  /**\n   * Initializes a new instance of the `BeginPageLayoutEventArgs` class with the specified rectangle and page.\n   * @private\n   */\n\n\n  function BeginPageLayoutEventArgs(bounds, page) {\n    var _this = _super.call(this) || this;\n\n    _this.bounds = bounds;\n    _this.pdfPage = page;\n    return _this;\n  }\n\n  Object.defineProperty(BeginPageLayoutEventArgs.prototype, \"bounds\", {\n    // Properties\n\n    /**\n     * Gets or sets value that indicates the lay outing `bounds` on the page.\n     * @private\n     */\n    get: function () {\n      return this.cellBounds;\n    },\n    set: function (value) {\n      this.cellBounds = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BeginPageLayoutEventArgs.prototype, \"page\", {\n    /**\n     * Gets the `page` where the lay outing should start.\n     * @private\n     */\n    get: function () {\n      return this.pdfPage;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return BeginPageLayoutEventArgs;\n}(PdfCancelEventArgs);\n\nexport { BeginPageLayoutEventArgs };\n/**\n * `EndPageLayoutEventArgs` class is alternate for end page layout events.\n */\n\nvar EndPageLayoutEventArgs =\n/** @class */\nfunction (_super) {\n  __extends(EndPageLayoutEventArgs, _super); // Constructors\n\n  /**\n   * Initializes a new instance of the `EndPageLayoutEventArgs` class. with the specified 'PdfLayoutResult'.\n   * @private\n   */\n\n\n  function EndPageLayoutEventArgs(result) {\n    var _this = _super.call(this) || this;\n\n    _this.layoutResult = result;\n    return _this;\n  }\n\n  Object.defineProperty(EndPageLayoutEventArgs.prototype, \"result\", {\n    // Properties\n\n    /**\n     * Gets the lay outing `result` of the page.\n     * @private\n     */\n    get: function () {\n      return this.layoutResult;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(EndPageLayoutEventArgs.prototype, \"nextPage\", {\n    /**\n     * Gets or sets a value indicating the `next page` where the element should be layout.\n     * @private\n     */\n    get: function () {\n      return this.nextPdfPage;\n    },\n    set: function (value) {\n      this.nextPdfPage = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return EndPageLayoutEventArgs;\n}(PdfCancelEventArgs);\n\nexport { EndPageLayoutEventArgs };\n/**\n * `PdfGridBeginPageLayoutEventArgs` class is alternate for begin page layout events.\n */\n\nvar PdfGridBeginPageLayoutEventArgs =\n/** @class */\nfunction (_super) {\n  __extends(PdfGridBeginPageLayoutEventArgs, _super); // Constructors\n\n  /**\n   * Initialize a new instance of `PdfGridBeginPageLayoutEventArgs` class.\n   * @private\n   */\n\n\n  function PdfGridBeginPageLayoutEventArgs(bounds, page, startRow) {\n    var _this = _super.call(this, bounds, page) || this;\n\n    _this.startRow = startRow;\n    return _this;\n  }\n\n  Object.defineProperty(PdfGridBeginPageLayoutEventArgs.prototype, \"startRowIndex\", {\n    // Properties\n\n    /**\n     * Gets the `start row index`.\n     * @private\n     */\n    get: function () {\n      return this.startRow;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PdfGridBeginPageLayoutEventArgs;\n}(BeginPageLayoutEventArgs);\n\nexport { PdfGridBeginPageLayoutEventArgs };\n/**\n * `PdfGridEndPageLayoutEventArgs` class is alternate for begin page layout events.\n */\n\nvar PdfGridEndPageLayoutEventArgs =\n/** @class */\nfunction (_super) {\n  __extends(PdfGridEndPageLayoutEventArgs, _super); // Constructors\n\n  /**\n   * Initialize a new instance of `PdfGridEndPageLayoutEventArgs` class.\n   * @private\n   */\n\n\n  function PdfGridEndPageLayoutEventArgs(result) {\n    return _super.call(this, result) || this;\n  }\n\n  return PdfGridEndPageLayoutEventArgs;\n}(EndPageLayoutEventArgs);\n\nexport { PdfGridEndPageLayoutEventArgs };\n\nvar RowLayoutResult =\n/** @class */\nfunction () {\n  //Constructors\n\n  /**\n   * Initializes a new instance of the `RowLayoutResult` class.\n   * @private\n   */\n  function RowLayoutResult() {\n    this.layoutedBounds = new RectangleF(0, 0, 0, 0);\n  }\n\n  Object.defineProperty(RowLayoutResult.prototype, \"isFinish\", {\n    /**\n     * Gets or sets a value indicating whether this instance `is finish`.\n     * @private\n     */\n    get: function () {\n      return this.bIsFinished;\n    },\n    set: function (value) {\n      this.bIsFinished = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(RowLayoutResult.prototype, \"bounds\", {\n    /**\n     * Gets or sets the `bounds`.\n     * @private\n     */\n    get: function () {\n      return this.layoutedBounds;\n    },\n    set: function (value) {\n      this.layoutedBounds = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return RowLayoutResult;\n}();\n\nexport { RowLayoutResult };","map":{"version":3,"sources":["C:/CN2/workspace-trunk/kain-front-end/node_modules/@syncfusion/ej2-pdf-export/src/implementation/structured-elements/grid/layout/grid-layouter.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","PdfGrid","PdfStringFormat","SizeF","RectangleF","PointF","PdfBorders","PdfLayoutType","PdfLayoutBreakType","PdfLayoutResult","PdfLayoutFormat","ElementLayouter","PdfHorizontalOverflowType","TemporaryDictionary","PdfGridLayouter","_super","baseFormat","_this","call","gridInitialWidth","gridSize","parentCellIndex","tempWidth","childheight","isChildGrid","hasRowSpanSpan","isRearranged","pageBounds","listOfNavigatePages","flag","columnRanges","currentLocation","breakRow","isOverloadWithPosition","defineProperty","get","elements","enumerable","configurable","getFormat","format","f","layoutInternal","param","gridLayoutFormat","currentPage","page","pageHeight","getClientSize","height","pageWidth","width","currentPageBounds","Error","currentGraphics","graphics","index","section","indexOf","push","break","FitColumnsToPage","currentBounds","bounds","x","y","Grid","columns","clientSize","rows","count","getRow","cells","getCell","style","borders","left","headers","startLocation","hType","horizontalOverflowType","allowHorizontalOverflow","measureColumnsWidth","determineColumnDrawRanges","i","isRowHeightSet","result","layoutOnPage","startColumn","endColumn","cellWidths","availableWidth","getColumn","subWidths","j","endArgs","layoutedPages","startPage","isParentCell","cellBounds","length","range","cellStartIndex","cellEndIndex","returnObject","raiseBeforePageLayout","currentRowIndex","drawHeader","i_1","row","getHeader","headerHeight","headerResult","drawRow","length_1","repeatRow","startingHeight","originalHeight","repeatRowIndex","grid","rowResult","splitChildRowIndex","isrowFinish","ParentCell","isGridSplit","rowIndex","rowCollection","isFinish","tempResult","getLayoutResult","raisePageLayouted","cancel","allowRowBreakAcrossPages","getNextPageformat","location_1","default","right","top","cellPadding","rowBreakHeight","isRowBreaksNextPage","rowBreakHeightValue","bottom","i_2","noOfPageCount","repeatHeader","j_1","headerRepeat","temp","j_2","tempResult1","i_3","header","i_4","value","layout","OnePage","isAddNextPage","usePaginateBounds","paginateBounds","i_5","containsKey","add","NestedGridLayoutResult","recalHeight","ReCalculateHeight","secion","startIndex","endIndex","pageGraphics","location_2","c","cell","cellWidth","totalwidth","i_6","columnWidth","Math","max","drawCellBorders","columnSpan","isPdfGrid","maximumCellBoundsWidth","largeNavigatePage","rowLayoutBoundsWidth","pageIndex","pageindex","NextPage","reArrangePages","nextPage","getPages","CheckIfDefaultFormat","defaultFormat","alignment","characterSpacing","clipPath","firstLineIndent","horizontalScalingFactor","lineAlignment","lineLimit","lineSpacing","measureTrailingSpaces","noClip","paragraphIndent","rightToLeft","subSuperScript","wordSpacing","wordWrap","RaiseBeforeCellDraw","cellIndex","args","raiseBeginCellDraw","PdfGridBeginCellDrawEventArgs","onBeginCellDraw","raiseAfterCellDraw","cellstyle","raiseEndCellDraw","PdfGridEndCellDrawEventArgs","onEndCellDraw","document","pages","keys","values","remove","size","count_1","repeatFlag","origin","isChanged","PdfGridLayoutResult","newHeight","remainingString","measureHeight","currentRow","raiseBeginPageLayout","PdfGridBeginPageLayoutEventArgs","onBeginPageLayout","startRowIndex","returnValue","PdfGridEndPageLayoutEventArgs","raiseEndPageLayout","onEndPageLayout","result_1","RowLayoutResult","rowHeightWithSpan","location_3","isHeader","rowSpanExists","maxSpan","currRowIndex","rowSpan","calculatedHeight","LayoutFormat","FitPage","drawRowWithBreak","repeatRowNumber","skipcell","location_4","cancelSpans","isCellMergeContinue","stringFormat","tempValue","stringResult","draw","rowOverflowIndex","remainder","undefined","cellSpacing","rowMergeComplete","calculateHeight","location","gridHeight","cellHeight","cellstyle1","FinishedDrawingCell","actualSize","rowBreakPageHeightCellIndex","PdfGridLayoutFormat","GridCellEventArgs","gridRowIndex","gridCellIndex","internalValue","gridBounds","pdfGraphics","bSkip","set","cellStyle","PdfCancelEventArgs","isCancel","BeginPageLayoutEventArgs","pdfPage","EndPageLayoutEventArgs","layoutResult","nextPdfPage","startRow","layoutedBounds","bIsFinished"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { PdfGrid } from '../pdf-grid';\nimport { PdfStringFormat } from './../../../graphics/fonts/pdf-string-format';\nimport { SizeF, RectangleF, PointF } from './../../../drawing/pdf-drawing';\nimport { PdfBorders } from '../styles/pdf-borders';\nimport { PdfLayoutType, PdfLayoutBreakType } from './../../../graphics/figures/enum';\nimport { PdfLayoutResult, PdfLayoutFormat, ElementLayouter } from './../../../graphics/figures/base/element-layouter';\nimport { PdfHorizontalOverflowType } from '../styles/style';\nimport { TemporaryDictionary } from './../../../collections/object-object-pair/dictionary';\n/**\n * Class `lay outing the text`.\n *\n */\nvar PdfGridLayouter = /** @class */ (function (_super) {\n    __extends(PdfGridLayouter, _super);\n    //constructor\n    /**\n     * Initialize a new instance for `PdfGrid` class.\n     * @private\n     */\n    function PdfGridLayouter(baseFormat) {\n        var _this = _super.call(this, baseFormat) || this;\n        /**\n         * @hidden\n         * @private\n         */\n        _this.gridInitialWidth = 0;\n        /**\n         * @hidden\n         * @private\n         */\n        _this.gridSize = new SizeF(0, 0);\n        _this.parentCellIndex = 0;\n        _this.tempWidth = 0;\n        _this.childheight = 0;\n        /**\n         * Check weather it is `child grid or not`.\n         * @private\n         */\n        _this.isChildGrid = false;\n        /**\n         * @hidden\n         * @private\n         */\n        _this.hasRowSpanSpan = false;\n        /**\n         * @hidden\n         * @private\n         */\n        _this.isRearranged = false;\n        /**\n         * @hidden\n         * @private\n         */\n        _this.pageBounds = new RectangleF();\n        /**\n         * @hidden\n         * @private\n         */\n        _this.listOfNavigatePages = [];\n        /**\n         * @hidden\n         * @private\n         */\n        _this.flag = true;\n        /**\n         * @hidden\n         * @private\n         */\n        _this.columnRanges = [];\n        /**\n         * @hidden\n         * @private\n         */\n        _this.currentLocation = new PointF(0, 0);\n        /**\n         * @hidden\n         * @private\n         */\n        _this.breakRow = true;\n        /**\n         * Checks whether the x co-ordinate is need to set as client size or not.\n         * @hidden\n         * @private\n         */\n        _this.isOverloadWithPosition = false;\n        return _this;\n    }\n    Object.defineProperty(PdfGridLayouter.prototype, \"Grid\", {\n        //Properties\n        get: function () {\n            return this.elements;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // Constructors\n    /**\n     * Initializes a new instance of the `StringLayouter` class.\n     * @private\n     */\n    //Public methods\n    /**\n     * `Layouts` the text.\n     * @private\n     */\n    /**\n     * `Layouts` the specified graphics.\n     * @private\n     */\n    /**\n     * `Layouts` the specified graphics.\n     * @private\n     */\n    /*public layout(graphics : PdfLayoutParams) : PdfLayoutResult\n    public layout(graphics : PdfGraphics, bounds : RectangleF) : void\n    public layout(graphics : PdfGraphics, bounds : PointF) : void\n    public layout(graphics ?: PdfGraphics | PdfLayoutParams, bounds ?: PointF | RectangleF) : void | PdfLayoutResult  {\n        if (graphics instanceof PdfGraphics) {\n        if (bounds instanceof PointF) {\n            if (bounds.x === 0) {\n                bounds.x = PdfBorders.default.right.width / 2;\n            }\n            if (bounds.y === 0) {\n                bounds.y = PdfBorders.default.top.width / 2;\n            }\n            let boundaries : RectangleF = new RectangleF(bounds, new SizeF(0, 0));\n            this.layout(graphics, boundaries);\n        } else {\n            let width : number = graphics.clientSize.width;\n            let parameter : PdfLayoutParams = new PdfLayoutParams();\n            parameter.bounds = bounds;\n            this.currentGraphics = graphics;\n            if (graphics.layer != null) {\n                let index : number = 0;\n                if (this.currentGraphics.page instanceof PdfPage) {\n                    index = (this.currentGraphics.page as PdfPage).section.indexOf(this.currentGraphics.page as PdfPage);\n                } else {\n                    index = (this.currentGraphics.page as PdfPageBase).defaultLayerIndex;\n                }\n            } else {\n                this.layoutInternal(parameter);\n            }\n        }\n    }\n    }*/\n    /**\n     * Gets the `format`.\n     * @private\n     */\n    PdfGridLayouter.prototype.getFormat = function (format) {\n        var f = format;\n        return f;\n    };\n    /**\n     * `Layouts` the element.\n     * @private\n     */\n    PdfGridLayouter.prototype.layoutInternal = function (param) {\n        var format = this.getFormat(param.format);\n        this.gridLayoutFormat = this.getFormat(param.format);\n        this.currentPage = param.page;\n        if (this.currentPage !== null) {\n            var pageHeight = this.currentPage.getClientSize().height;\n            var pageWidth = this.currentPage.getClientSize().width;\n            //if (pageHeight > pageWidth) {\n            this.currentPageBounds = this.currentPage.getClientSize();\n            //}\n        }\n        else {\n            throw Error('Can not set page as null');\n            //this.currentPageBounds = this.currentGraphics.clientSize;\n        }\n        this.currentGraphics = this.currentPage.graphics;\n        //this.currentGraphics = (this.currentPage != null ) ? this.currentPage.graphics : this.currentGraphics;\n        // if (this.currentGraphics.layer !== null) {\n        //     let index : number = 0;\n        //     if (this.currentGraphics.page instanceof PdfPage) {\n        //         index = (this.currentGraphics.page as PdfPage).section.indexOf(this.currentGraphics.page as PdfPage);\n        //     } else {\n        //         index = (this.currentGraphics.page as PdfPageBase).defaultLayerIndex;\n        //     }\n        //     this.listOfNavigatePages.push(index);\n        // }\n        var index = 0;\n        index = this.currentGraphics.page.section.indexOf(this.currentGraphics.page);\n        this.listOfNavigatePages.push(index);\n        if (format != null && format.break === PdfLayoutBreakType.FitColumnsToPage) {\n            this.currentBounds = new RectangleF(new PointF(param.bounds.x, param.bounds.y), new SizeF(this.Grid.columns.width, this.currentGraphics.clientSize.height));\n        }\n        else {\n            this.currentBounds = new RectangleF(new PointF(param.bounds.x, param.bounds.y), this.currentGraphics.clientSize);\n        }\n        //this.currentBounds = new RectangleF(new PointF(param.bounds.x, param.bounds.y), this.currentGraphics.clientSize);\n        if (this.Grid.rows.count !== 0) {\n            this.currentBounds.width = (param.bounds.width > 0) ? param.bounds.width :\n                (this.currentBounds.width - this.Grid.rows.getRow(0).cells.getCell(0).style.borders.left.width / 2);\n        }\n        else if (this.Grid.headers.count !== 0) {\n            // this.currentBounds.width = (param.bounds.width > 0) ? param.bounds.width : (this.currentBounds.width -\n            //                                 this.Grid.headers.getHeader(0).cells.getCell(0).style.borders.left.width / 2);\n            this.currentBounds.width = param.bounds.width;\n        }\n        else {\n            throw Error('Please add row or header into grid');\n        }\n        this.startLocation = new PointF(param.bounds.x, param.bounds.y);\n        // if (this.Grid.style.allowHorizontalOverflow && this.currentBounds.width > this.currentGraphics.clientSize.width) {\n        //     this.currentBounds.width = this.currentGraphics.clientSize.width;\n        //     this.currentBounds.width -= this.currentBounds.x;\n        // }\n        // if (this.Grid.isChildGrid) {\n        //     this.childheight = param.bounds.height;\n        // }\n        // if (param.format !== null && param.format.usePaginateBounds) {\n        //     if (param.format.paginateBounds.height > 0) {\n        //         this.currentBounds.height = param.format.paginateBounds.height;\n        //     }\n        //} else \n        if (param.bounds.height > 0 && !this.Grid.isChildGrid) {\n            this.currentBounds.height = param.bounds.height;\n        }\n        if (!this.Grid.isChildGrid) {\n            this.hType = this.Grid.style.horizontalOverflowType;\n        }\n        if (!this.Grid.style.allowHorizontalOverflow) {\n            this.columnRanges = [];\n            this.Grid.measureColumnsWidth(this.currentBounds);\n            this.columnRanges.push([0, this.Grid.columns.count - 1]);\n        }\n        else {\n            this.Grid.measureColumnsWidth();\n            this.determineColumnDrawRanges();\n        }\n        if (this.Grid.hasRowSpanSpan) {\n            for (var i = 0; i < this.Grid.rows.count; i++) {\n                var height = this.Grid.rows.getRow(i).height;\n                if (!this.Grid.rows.getRow(i).isRowHeightSet) {\n                    this.Grid.rows.getRow(i).isRowHeightSet = true;\n                }\n            }\n        }\n        var result = this.layoutOnPage(param);\n        return result;\n    };\n    // /* tslint:enable */\n    /**\n     * `Determines the column draw ranges`.\n     * @private\n     */\n    PdfGridLayouter.prototype.determineColumnDrawRanges = function () {\n        var startColumn = 0;\n        var endColumn = 0;\n        var cellWidths = 0;\n        var availableWidth = this.currentGraphics.clientSize.width - this.currentBounds.x;\n        for (var i = 0; i < this.Grid.columns.count; i++) {\n            cellWidths += this.Grid.columns.getColumn(i).width;\n            if (cellWidths >= availableWidth) {\n                var subWidths = 0;\n                for (var j = startColumn; j <= i; j++) {\n                    subWidths += this.Grid.columns.getColumn(j).width;\n                    if (subWidths > availableWidth) {\n                        break;\n                    }\n                    endColumn = j;\n                }\n                this.columnRanges.push([startColumn, endColumn]);\n                startColumn = endColumn + 1;\n                endColumn = startColumn;\n                cellWidths = (endColumn <= i) ? this.Grid.columns.getColumn(i).width : 0;\n            }\n        }\n        // if (startColumn !== this.columns.Count) {\n        this.columnRanges.push([startColumn, this.Grid.columns.count - 1]);\n        // }\n    };\n    /**\n     * `Layouts the on page`.\n     * @private\n     */\n    PdfGridLayouter.prototype.layoutOnPage = function (param) {\n        /* tslint:disable */\n        this.pageBounds.x = param.bounds.x;\n        this.pageBounds.y = param.bounds.y;\n        this.pageBounds.height = param.bounds.height;\n        var format = this.getFormat(param.format);\n        var endArgs = null;\n        var result = null;\n        var layoutedPages = new TemporaryDictionary();\n        var startPage = param.page;\n        var isParentCell = false;\n        var cellBounds = [];\n        for (var index = 0; index < this.columnRanges.length; index++) {\n            var range = this.columnRanges[index];\n            this.cellStartIndex = range[0];\n            this.cellEndIndex = range[1];\n            var returnObject = this.raiseBeforePageLayout(this.currentPage, this.currentBounds, this.currentRowIndex);\n            this.currentBounds = returnObject.currentBounds;\n            this.currentRowIndex = returnObject.currentRowIndex;\n            // if (returnObject.returnValue) {\n            //     result = new PdfGridLayoutResult(this.currentPage, this.currentBounds);\n            //     break;\n            // }\n            //Draw Headers.\n            var drawHeader = void 0;\n            for (var i_1 = 0; i_1 < this.Grid.headers.count; i_1++) {\n                var row = this.Grid.headers.getHeader(i_1);\n                var headerHeight = this.currentBounds.y;\n                // RowLayoutResult\n                var headerResult = this.drawRow(row);\n                // if (headerHeight === this.currentBounds.y) {\n                //     drawHeader = true;\n                //     if (PdfGrid.repeatRowIndex === -1) {\n                //         PdfGrid.repeatRowIndex = this.rows.getRow.indexOf(row);\n                //     }\n                // } else {\n                drawHeader = false;\n                // }\n            }\n            var i = 0;\n            var length_1 = this.Grid.rows.count;\n            var repeatRow = void 0;\n            var startingHeight = 0;\n            var flag = true;\n            //Here is to draw parent Grid and Cells\n            cellBounds = [];\n            //Draw row by row with the specified cell range.\n            for (var j = 0; j < this.Grid.rows.count; j++) {\n                var row = this.Grid.rows.getRow(j);\n                i++;\n                this.currentRowIndex = i - 1;\n                var originalHeight = this.currentBounds.y;\n                startPage = this.currentPage;\n                PdfGridLayouter.repeatRowIndex = -1;\n                if (flag && row.grid.isChildGrid) {\n                    startingHeight = originalHeight;\n                    flag = false;\n                }\n                var rowResult = null;\n                ///rowResult = this.drawRow(row);\n                /*if(!row.isrowFinish) {\n                    if(!row.grid.isgridSplit){\n                        rowResult = this.drawRow(row);\n                        row.isrowFinish = true;\n                        row.isrowDraw = true;\n                    } else {\n                        if(!row.isrowDraw){\n                            rowResult = this.drawRow(row);\n                            row.isrowFinish = true;\n                            row.isrowDraw = true;\n                            row.grid.isgridSplit = false;\n                        } else {\n                            rowResult =  null;\n                            break;\n                        }\n                    }\n                }\n                else {\n                    //row.isrowFinish = false;\n                    //rowResult = this.drawRow(row);\n                    rowResult = null;\n                    break;\n                    \n                }             */\n                if (this.Grid.splitChildRowIndex == -1) {\n                    rowResult = this.drawRow(row);\n                    row.isrowFinish = true;\n                }\n                else {\n                    if (row.grid.ParentCell.row.grid.isGridSplit && this.Grid.splitChildRowIndex <= row.rowIndex) {\n                        rowResult = this.drawRow(row);\n                        row.isrowFinish = true;\n                    }\n                    else if (row.isrowFinish) {\n                        continue;\n                    }\n                    else {\n                        break;\n                    }\n                }\n                //rowResult = this.drawRow(row);\n                cellBounds.push(rowResult.bounds.width);\n                /*if (row.isRowBreaksNextPage)\n                    {\n                        let x : number  = 0;\n                        for (let l : number = 0; l < row.cells.count; l++)\n                        {\n                            let isNestedRowBreak : boolean = false;\n                            if (row.height == row.cells.getCell(l).height)\n                            {\n                                let n : number;\n                                let grid : PdfGrid = row.cells.getCell(l).value as PdfGrid;\n                                for (let m : number = grid.rows.count; 0 < m; m--)\n                                {\n                                    if ((grid.rows.getRow(m - 1).rowBreakHeight > 0))\n                                    {\n                                        isNestedRowBreak = true;\n                                        break;\n                                    }\n                                    if (grid.rows.getRow(m - 1).isRowBreaksNextPage)\n                                    {\n                                        row.rowBreakHeightValue = grid.rows.getRow(m - 1).rowBreakHeightValue;\n                                        break;\n                                    }\n                                    row.rowBreakHeightValue += grid.rows.getRow(m - 1).height;\n                                }\n                            }\n                            if (isNestedRowBreak)\n                                break;\n                        }\n                        for (let j : number = 0; j < row.cells.count; j++)\n                        {\n\n                            if (row.height > row.cells.getCell(j).height)\n                            {\n                                row.cells.getCell(j).value = \" \";\n                                let rect : RectangleF ;\n                                let page : PdfPage = this.getNextPage(this.currentPage);\n                                let section : PdfSection = this.currentPage.section;\n                                let index : number = section.indexOf(page);\n                                for (let k : number = 0; k < (section.count - 1) - index; k++)\n                                {\n                                    rect = new RectangleF(x, 0, row.grid.columns.getColumn(j).width, page.getClientSize().height);\n                                    PdfGridLayouter.repeatRowIndex = -1;\n                                    row.cells.getCell(j).draw(page.graphics, rect, false);\n                                    page = this.getNextPage(page);\n                                }\n                                rect = new RectangleF(x, 0, row.grid.columns.getColumn(j).width, row.rowBreakHeightValue);\n\n                                row.cells.getCell(j).draw(page.graphics, rect, false);\n                            }\n                            x += row.grid.columns.getColumn(j).width;\n                        }\n                    }*/\n                //if height remains same, it is understood that row is not drawn in the page\n                if (originalHeight === this.currentBounds.y) {\n                    repeatRow = true;\n                    PdfGridLayouter.repeatRowIndex = this.Grid.rows.rowCollection.indexOf(row);\n                }\n                else {\n                    repeatRow = false;\n                    PdfGridLayouter.repeatRowIndex = -1;\n                }\n                while (!rowResult.isFinish && startPage != null) {\n                    var tempResult = this.getLayoutResult();\n                    /*if (startPage != this.currentPage)\n                        {\n                            if (row.grid.isChildGrid && row.grid.ParentCell != null)\n                            {\n                                let bounds : RectangleF= new RectangleF(new PointF(format.paginateBounds.x,format.paginateBounds.y), new SizeF(param.bounds.width, tempResult.bounds.height));\n                                bounds.x += param.bounds.x;\n                                if (row.grid.ParentCell.row.grid.style.cellPadding != null)\n                                {\n                                    bounds.y += row.grid.ParentCell.row.grid.style.cellPadding.top;\n                                    if (bounds.height > this.currentPageBounds.height)\n                                    {\n                                        bounds.height = this.currentPageBounds.height - bounds.y;\n                                        bounds.height -= (row.grid.ParentCell.row.grid.style.cellPadding.bottom);\n                                    }\n                                }\n                                // Draw border for cells in the nested grid cell's row.\n                                for (let c : number = 0; c < row.cells.count; c++)\n                                {\n                                    let cell : PdfGridCell = row.cells.getCell(c);\n                                    let cellWidth :  number= 0;\n                                    if (cell.columnSpan > 1)\n                                    {\n                                        for (; c < cell.columnSpan; c++)\n                                            cellWidth += row.grid.columns.getColumn(c).width;\n                                    }\n                                    else\n                                        cellWidth = Math.max(cell.width, row.grid.columns.getColumn(c).width);\n                                    cell.drawCellBorders(this.currentGraphics, new RectangleF(new PointF(bounds.x,bounds.y), new SizeF(cellWidth, bounds.height)));\n                                    bounds.x += cellWidth;\n                                    c += (cell.columnSpan - 1);\n                                }\n                            }\n                        }\n                        */\n                    endArgs = this.raisePageLayouted(tempResult);\n                    if (endArgs.cancel || repeatRow)\n                        break;\n                    else if (this.Grid.allowRowBreakAcrossPages) {\n                        //If there is no space in the current page, add new page and then draw the remaining row.\n                        this.currentPage = this.getNextPageformat(format);\n                        originalHeight = this.currentBounds.y;\n                        var location_1 = new PointF(PdfBorders.default.right.width / 2, PdfBorders.default.top.width / 2);\n                        // if (format.paginateBounds == new RectangleF(0,0,0,0) && this.startLocation == location)\n                        // {\n                        //     this.currentBounds.x += this.startLocation.x;\n                        //     this.currentBounds.y += this.startLocation.y;\n                        // }\n                        if (this.Grid.isChildGrid && row.grid.ParentCell != null) {\n                            if (this.Grid.ParentCell.row.grid.style.cellPadding != null) {\n                                if (row.rowBreakHeight + this.Grid.ParentCell.row.grid.style.cellPadding.top < this.currentBounds.height) {\n                                    this.currentBounds.y = this.Grid.ParentCell.row.grid.style.cellPadding.top;\n                                }\n                            }\n                        }\n                        if (row.grid.ParentCell != null) {\n                            row.grid.ParentCell.row.isRowBreaksNextPage = true;\n                            row.grid.ParentCell.row.rowBreakHeightValue = row.rowBreakHeight + this.Grid.ParentCell.row.grid.style.cellPadding.top + this.Grid.ParentCell.row.grid.style.cellPadding.bottom;\n                            for (var i_2 = row.rowIndex + 1; i_2 < row.grid.rows.count; i_2++) {\n                                row.grid.ParentCell.row.rowBreakHeightValue += row.grid.rows.getRow(i_2).height;\n                            }\n                            //row.rowBreakHeight = row.grid.ParentCell.row.rowBreakHeightValue;\n                        }\n                        /*if (row.noOfPageCount > 1)\n                        {\n                            let temp : number = row.rowBreakHeightValue;\n                            for (let j : number = 1; j < row.noOfPageCount; j++)\n                            {\n                                row.rowBreakHeightValue = 0;\n                                row.height = ((row.noOfPageCount - 1) * this.currentPage.getClientSize().height);\n                                this.drawRow(row);\n                                this.currentPage = this.getNextPageformat(format);\n                                startPage = this.currentPage;\n                            }\n                            row.rowBreakHeightValue = temp;\n                            row.noOfPageCount = 1;\n                            rowResult = this.drawRow(row);\n                        } else {\n                            rowResult = this.drawRow(row);\n                        }\n                        /*if(row.grid.isChildGrid){\n                            row.isrowFinish = false;\n                            row.isrowDraw = false;\n                            row.grid.isgridSplit = true;\n                            row.grid.ParentCell.row.grid.isgridSplit = true;\n                            //rowResult.isFinish = false;\n                            break;\n                        }*/\n                        if (row.grid.isChildGrid) {\n                            //row.grid.isgridSplit = true;\n                            row.isrowFinish = false;\n                            //row.grid.ParentCell.row.grid.isgridSplit = true;\n                            row.grid.splitChildRowIndex = row.rowIndex;\n                            row.grid.ParentCell.row.grid.splitChildRowIndex = row.grid.ParentCell.row.rowIndex;\n                            if (row.grid.ParentCell.row.grid.isGridSplit) {\n                                row.grid.ParentCell.row.noOfPageCount += 1;\n                                row.grid.ParentCell.row.grid.isGridSplit = false;\n                            }\n                            break;\n                        }\n                        if (row.noOfPageCount < 1) {\n                            if (row.grid.splitChildRowIndex != -1) {\n                                row.grid.isGridSplit = true;\n                            }\n                            this.currentBounds.y = 0.50;\n                            if (this.Grid.repeatHeader) {\n                                for (var j_1 = 0; j_1 < this.Grid.headers.count; j_1++) {\n                                    var headerRepeat = this.Grid.headers.getHeader(j_1);\n                                    this.drawRow(headerRepeat);\n                                }\n                            }\n                            rowResult = this.drawRow(row);\n                            if (row.noOfPageCount >= 1) {\n                                var temp = row.rowBreakHeightValue;\n                                for (var j_2 = 0; j_2 < row.noOfPageCount; j_2++) {\n                                    //this.currentPage.section.add();\n                                    var tempResult1 = this.getLayoutResult();\n                                    endArgs = this.raisePageLayouted(tempResult1);\n                                    this.currentPage = this.getNextPageformat(format);\n                                    originalHeight = this.currentBounds.y;\n                                    //row.rowBreakHeightValue = 0;\n                                    if (row.grid.splitChildRowIndex != -1) {\n                                        row.grid.isGridSplit = true;\n                                    }\n                                    this.currentBounds.y = 0.5;\n                                    if (this.Grid.repeatHeader) {\n                                        for (var i_3 = 0; i_3 < this.Grid.headers.count; i_3++) {\n                                            var header = this.Grid.headers.getHeader(i_3);\n                                            this.drawRow(header);\n                                        }\n                                    }\n                                    //row.height = ((row.noOfPageCount - 1) * this.currentPage.getClientSize().height);\n                                    this.drawRow(row);\n                                }\n                                // row.rowBreakHeight = temp;\n                                // row.noOfPageCount = 1;\n                                // rowResult = this.drawRow(row);\n                            }\n                            row.grid.splitChildRowIndex = -1;\n                            row.grid.isGridSplit = false;\n                            rowResult.isFinish = true;\n                            //row.NestedGridLayoutResult.bounds.height = row.rowBreakHeightValue;\n                            //this.currentBounds.y = rowResult.bounds.y;\n                            for (var i_4 = 0; i_4 < row.cells.count; i_4++) {\n                                if (row.cells.getCell(i_4).value instanceof PdfGrid) {\n                                    row.cells.getCell(i_4).value.splitChildRowIndex = -1;\n                                }\n                            }\n                        }\n                    }\n                    // else if (!this.Grid.allowRowBreakAcrossPages && i < length)\n                    // {\n                    //     this.currentPage = this.getNextPageformat(format);\n                    //     break;\n                    // }\n                    // else if (i >= length)\n                    //     break;\n                }\n                if (!rowResult.isFinish && startPage !== null && format.layout !== PdfLayoutType.OnePage && repeatRow) {\n                    // During pagination, cell position is maintained here.\n                    this.startLocation.x = this.currentBounds.x;\n                    var isAddNextPage = false;\n                    this.currentPage = this.getNextPageformat(format);\n                    /*if (!this.Grid.isSingleGrid)\n                    {\n                        for ( let j : number= 0; j < this.Grid.rows.count; j++)\n                        {\n                            let isWidthGreaterthanParent : boolean = false;\n                            for (let k : number = 0; k < this.Grid.rows.getRow(j).cells.count; k++)\n                            {\n                                if (this.Grid.rows.getRow(j).cells.getCell(k).width > this.currentPageBounds.width)\n                                    isWidthGreaterthanParent = true;\n                            }\n                            if (isWidthGreaterthanParent && this.Grid.rows.getRow(j).cells.getCell(this.rowBreakPageHeightCellIndex).pageCount > 0)\n                            {\n                                isAddNextPage = true;\n                            }\n                        }\n                    }\n                    if (!this.Grid.isRearranged && isAddNextPage)\n                         {\n                             let section : PdfSection = this.currentPage.section;\n                             \n                             //this.currentPage = section.add();\n                         \n                             this.currentGraphics = this.currentPage.graphics;\n                             this.currentBounds = new RectangleF(new PointF(0,0), this.currentPage.getClientSize());\n                          \n                             let pageindex  : number = (this.currentGraphics.page as PdfPage).section.indexOf(this.currentGraphics.page as PdfPage);\n                         }\n                         else\n                         {\n                             this.currentPage = this.getNextPageformat(format);\n                         }\n                         if (format.paginateBounds.y == 0)\n                             this.currentBounds.y = PdfBorders.default.top.width/2;\n                         else\n                         {\n                             this.currentBounds.y = format == null ? 0 : format.paginateBounds.y;\n                             \n                         }\n                         if (this.raiseBeforePageLayout(this.currentPage, this.currentBounds, this.currentRowIndex))\n                             break;*/\n                    if ((param.format !== null) && !param.format.usePaginateBounds && param.bounds !== null &&\n                        param.bounds.height > 0 && !this.Grid.isChildGrid) {\n                        this.currentBounds.height = param.bounds.height;\n                    }\n                    if ((param.format !== null) && !param.format.usePaginateBounds && param.bounds !== null &&\n                        param.bounds.y > 0 && !this.Grid.isChildGrid) {\n                        this.currentBounds.y = param.bounds.y;\n                    }\n                    this.startLocation.y = this.currentBounds.y;\n                    if ((format.paginateBounds.x === format.paginateBounds.y) &&\n                        (format.paginateBounds.y === format.paginateBounds.height) &&\n                        (format.paginateBounds.height === format.paginateBounds.width) && (format.paginateBounds.width === 0)) {\n                        this.currentBounds.x += this.startLocation.x;\n                    }\n                    if (this.currentBounds.x === PdfBorders.default.left.width / 2) {\n                        this.currentBounds.y += this.startLocation.x;\n                    }\n                    if (this.Grid.repeatHeader) {\n                        for (var i_5 = 0; i_5 < this.Grid.headers.count; i_5++) {\n                            var header = this.Grid.headers.getHeader(i_5);\n                            this.drawRow(header);\n                        }\n                    }\n                    this.drawRow(row);\n                    if (this.currentPage !== null && !layoutedPages.containsKey(this.currentPage)) {\n                        layoutedPages.add(this.currentPage, range);\n                    }\n                }\n                if (row.NestedGridLayoutResult != null) {\n                    // Position for next row in the grid.\n                    this.currentPage = row.NestedGridLayoutResult.page;\n                    this.currentGraphics = this.currentPage.graphics; //If not, next row will not be drawn in the layouted page.\n                    this.startLocation = new PointF(row.NestedGridLayoutResult.bounds.x, row.NestedGridLayoutResult.bounds.y);\n                    var recalHeight = this.ReCalculateHeight(row, row.NestedGridLayoutResult.bounds.height);\n                    this.currentBounds.y = recalHeight;\n                    //this.currentBounds.y = row.NestedGridLayoutResult.bounds.height;\n                    if (startPage != this.currentPage) {\n                        var secion = this.currentPage.section;\n                        var startIndex = secion.indexOf(startPage) + 1;\n                        var endIndex = secion.indexOf(this.currentPage);\n                        for (var page = startIndex; page < endIndex + 1; page++) {\n                            var pageGraphics = this.currentPage.graphics;\n                            var location_2 = new PointF(format.paginateBounds.x, format.paginateBounds.y);\n                            var height = page == endIndex ? (row.NestedGridLayoutResult.bounds.height - param.bounds.y) :\n                                (this.currentBounds.height - location_2.y);\n                            if (height <= pageGraphics.clientSize.height)\n                                height += param.bounds.y;\n                            // if (row.grid.isChildGrid && row.grid.ParentCell != null)\n                            //     location.x += param.bounds.x;\n                            location_2.y = format == null ? 0.5 : format.paginateBounds.y;\n                            // Draw border for last paginated row containing nested grid.\n                            for (var c = 0; c < row.cells.count; c++) {\n                                var cell = row.cells.getCell(c);\n                                var cellWidth = 0;\n                                var totalwidth = 0;\n                                if (cell.value instanceof PdfGrid) {\n                                    for (var i_6 = 0; i_6 < cell.value.columns.count; i_6++) {\n                                        totalwidth += cell.value.columns.getColumn(i_6).columnWidth;\n                                    }\n                                }\n                                else {\n                                    totalwidth = cell.width;\n                                }\n                                // if (cell.columnSpan > 1)\n                                // {\n                                //     for (; c < cell.columnSpan; c++)\n                                //         cellWidth += row.grid.columns.getColumn(c).width;\n                                // }\n                                // else\n                                cellWidth = Math.max(totalwidth, row.grid.columns.getColumn(c).width);\n                                cell.drawCellBorders(pageGraphics, new RectangleF(location_2, new SizeF(cellWidth, height)));\n                                location_2.x += cellWidth;\n                                c += (cell.columnSpan - 1);\n                            }\n                        }\n                        // So, nested grid drawing is completed for the current row. Update page.\n                        // Otherwise, the next nested grid of the parent will draw borders from start.\n                        startPage = this.currentPage;\n                    }\n                }\n            }\n            var isPdfGrid = false;\n            var maximumCellBoundsWidth = 0;\n            if (cellBounds.length > 0) {\n                maximumCellBoundsWidth = cellBounds[0];\n            }\n            var largeNavigatePage = [[1, 2]];\n            for (var c = 0; c < this.Grid.rows.count; c++) {\n                if (this.cellEndIndex != -1 && this.Grid.rows.getRow(c).cells.getCell(this.cellEndIndex).value instanceof PdfGrid) {\n                    var grid = this.Grid.rows.getRow(c).cells.getCell(this.cellEndIndex).value;\n                    this.rowLayoutBoundsWidth = grid.rowLayoutBoundsWidth;\n                    isPdfGrid = true;\n                    // if (largeNavigatePage[0][0] < grid.listOfNavigatePages.length)\n                    // {\n                    //     largeNavigatePage[0][0] = grid.listOfNavigatePages.length;\n                    //     largeNavigatePage[0][1] = cellBounds[c];\n                    // }\n                    // else if ((largeNavigatePage[0][0] == grid.listOfNavigatePages.length) && (largeNavigatePage[0][1] < cellBounds[c]))\n                    // {\n                    //     largeNavigatePage[0][1] = cellBounds[c];\n                    // }\n                }\n            }\n            if (!isPdfGrid && cellBounds.length > 0) {\n                for (var c = 0; c < i - 1; c++) {\n                    if (maximumCellBoundsWidth < cellBounds[c]) {\n                        maximumCellBoundsWidth = cellBounds[c];\n                    }\n                }\n                this.rowLayoutBoundsWidth = maximumCellBoundsWidth;\n            }\n            else {\n                this.rowLayoutBoundsWidth = largeNavigatePage[0][1];\n            }\n            if (this.columnRanges.indexOf(range) < this.columnRanges.length - 1\n                && startPage != null && format.layout != PdfLayoutType.OnePage) {\n                isParentCell = this.Grid.isChildGrid;\n                if (largeNavigatePage[0][0] != 0) {\n                    var section = this.currentPage.section;\n                    var pageIndex = section.indexOf(this.currentPage);\n                    this.currentGraphics = this.currentPage.graphics;\n                    this.currentBounds = new RectangleF(new PointF(0, 0), this.currentPage.getClientSize());\n                    var pageindex = this.currentGraphics.page.section.indexOf(this.currentGraphics.page);\n                }\n                else {\n                    this.currentPage = this.getNextPageformat(format);\n                }\n                // let locationGrid : PointF= new PointF(PdfBorders.default.right.width / 2, PdfBorders.default.top.width / 2);\n                // if (format.paginateBounds == new RectangleF(0,0,0,0) && this.startLocation == locationGrid)\n                // {\n                //     this.currentBounds.x += this.startLocation.x;\n                //     this.currentBounds.y += this.startLocation.y;\n                // }\n            }\n            if (this.columnRanges.length - 1 !== index && this.columnRanges.length > 1 && format.layout !== PdfLayoutType.OnePage) {\n                this.currentPage = this.getNextPageformat(format);\n                if ((format.paginateBounds.x === format.paginateBounds.y) && (format.paginateBounds.y === format.paginateBounds.height)\n                    && (format.paginateBounds.height === format.paginateBounds.width) && (format.paginateBounds.width === 0)) {\n                    this.currentBounds.x += this.startLocation.x;\n                    this.currentBounds.y += this.startLocation.y;\n                    //this.currentBounds.height = this.pageBounds.height;\n                }\n            }\n        }\n        result = this.getLayoutResult();\n        if (this.Grid.style.allowHorizontalOverflow && this.Grid.style.horizontalOverflowType == PdfHorizontalOverflowType.NextPage) {\n            this.reArrangePages(layoutedPages);\n        }\n        this.raisePageLayouted(result);\n        return result;\n    };\n    /* tslint:enable */\n    /**\n     * Gets the `next page`.\n     * @private\n     */\n    PdfGridLayouter.prototype.getNextPageformat = function (format) {\n        var section = this.currentPage.section;\n        var nextPage = null;\n        var index = section.indexOf(this.currentPage);\n        this.flag = false;\n        if (index === section.count - 1) {\n            nextPage = section.add();\n        }\n        else {\n            nextPage = section.getPages()[index + 1];\n        }\n        this.currentGraphics = nextPage.graphics;\n        var pageindex = this.currentGraphics.page.section.indexOf(this.currentGraphics.page);\n        if (!(this.listOfNavigatePages.indexOf(pageindex) !== -1)) {\n            this.listOfNavigatePages.push(pageindex);\n        }\n        this.currentBounds = new RectangleF(new PointF(0, 0), nextPage.getClientSize());\n        // if ((format.paginateBounds.x !== format.paginateBounds.y) && (format.paginateBounds.y !== format.paginateBounds.height)\n        //     && (format.paginateBounds.height !== format.paginateBounds.width) && (format.paginateBounds.width !== 0)) {\n        //     this.currentBounds.x = format.paginateBounds.x;\n        //     this.currentBounds.y = format.paginateBounds.y;\n        //     this.currentBounds.height = format.paginateBounds.height;\n        // }\n        return nextPage;\n    };\n    PdfGridLayouter.prototype.CheckIfDefaultFormat = function (format) {\n        var defaultFormat = new PdfStringFormat();\n        return (format.alignment === defaultFormat.alignment && format.characterSpacing === defaultFormat.characterSpacing &&\n            format.clipPath === defaultFormat.clipPath && format.firstLineIndent === defaultFormat.firstLineIndent &&\n            format.horizontalScalingFactor === defaultFormat.horizontalScalingFactor &&\n            format.lineAlignment === defaultFormat.lineAlignment\n            && format.lineLimit === defaultFormat.lineLimit && format.lineSpacing === defaultFormat.lineSpacing &&\n            format.measureTrailingSpaces === defaultFormat.measureTrailingSpaces && format.noClip === defaultFormat.noClip &&\n            format.paragraphIndent === defaultFormat.paragraphIndent && format.rightToLeft === defaultFormat.rightToLeft &&\n            format.subSuperScript === defaultFormat.subSuperScript && format.wordSpacing === defaultFormat.wordSpacing &&\n            format.wordWrap === defaultFormat.wordWrap);\n    };\n    /**\n     * `Raises BeforeCellDraw event`.\n     * @private\n     */\n    PdfGridLayouter.prototype.RaiseBeforeCellDraw = function (graphics, rowIndex, cellIndex, bounds, value, style) {\n        var args = null;\n        if (this.Grid.raiseBeginCellDraw) {\n            args = new PdfGridBeginCellDrawEventArgs(graphics, rowIndex, cellIndex, bounds, value, style);\n            this.Grid.onBeginCellDraw(args);\n            style = args.style;\n        }\n        return style;\n    };\n    /**\n     * `Raises AfterCellDraw event`.\n     * @private\n     */\n    PdfGridLayouter.prototype.raiseAfterCellDraw = function (graphics, rowIndex, cellIndex, bounds, value, cellstyle) {\n        var args = null;\n        if (this.Grid.raiseEndCellDraw) {\n            args = new PdfGridEndCellDrawEventArgs(graphics, rowIndex, cellIndex, bounds, value, cellstyle);\n            this.Grid.onEndCellDraw(args);\n        }\n    };\n    PdfGridLayouter.prototype.reArrangePages = function (layoutedPages) {\n        var document = this.currentPage.document;\n        var pages = [];\n        var keys = layoutedPages.keys();\n        var values = layoutedPages.values();\n        for (var i = 0; i < keys.length; i++) {\n            var page = keys[i];\n            page.section = null;\n            pages.push(page);\n            document.pages.remove(page);\n        }\n        /* tslint:disable */\n        for (var i = 0; i < layoutedPages.size(); i++) {\n            var count = 0;\n            for (var j = i, count_1 = (layoutedPages.size() / this.columnRanges.length); j < layoutedPages.size(); j += count_1) {\n                var page = pages[j];\n                if (document.pages.indexOf(page) === -1) {\n                    document.pages.add(page);\n                }\n            }\n        }\n        /* tslint:enable */\n    };\n    /**\n     * Gets the `layout result`.\n     * @private\n     */\n    PdfGridLayouter.prototype.getLayoutResult = function () {\n        if (this.Grid.isChildGrid && this.Grid.allowRowBreakAcrossPages) {\n            for (var i = 0; i < this.Grid.rows.count; i++) {\n                var row = this.Grid.rows.getRow(i);\n                if (row.rowBreakHeight > 0 && row.repeatFlag) {\n                    this.startLocation.y = this.currentPage.origin.y;\n                }\n            }\n        }\n        var bounds;\n        if (!this.isChanged) {\n            bounds = new RectangleF(this.startLocation, new SizeF(this.currentBounds.width, this.currentBounds.y -\n                this.startLocation.y));\n        }\n        // else {\n        //     bounds = new RectangleF(this.currentLocation, new SizeF(this.currentBounds.width, this.currentBounds.y -\n        //                              this.currentLocation.y));\n        // }\n        /* tslint:enable */\n        return new PdfGridLayoutResult(this.currentPage, bounds);\n    };\n    /**\n     * `Recalculate row height` for the split cell to be drawn.\n     * @private\n     */\n    PdfGridLayouter.prototype.ReCalculateHeight = function (row, height) {\n        var newHeight = 0.0;\n        for (var i = this.cellStartIndex; i <= this.cellEndIndex; i++) {\n            if (!(row.cells.getCell(i).remainingString === null || row.cells.getCell(i).remainingString === '' ||\n                typeof row.cells.getCell(i).remainingString === 'undefined')) {\n                newHeight = Math.max(newHeight, row.cells.getCell(i).measureHeight());\n            }\n        }\n        return Math.max(height, newHeight);\n    };\n    /**\n     * `Raises BeforePageLayout event`.\n     * @private\n     */\n    PdfGridLayouter.prototype.raiseBeforePageLayout = function (currentPage, currentBounds, currentRow) {\n        var cancel = false;\n        if (this.Grid.raiseBeginPageLayout) {\n            var args = new PdfGridBeginPageLayoutEventArgs(currentBounds, currentPage, currentRow);\n            this.Grid.onBeginPageLayout(args);\n            // if (currentBounds !== args.Bounds) {\n            //     this.isChanged = true;\n            //     this.currentLocation = new PointF(args.Bounds.x, args.Bounds.y);\n            //     this.measureColumnsWidth(new RectangleF(new PointF(args.Bounds.x, args.Bounds.y) ,\n            //                                                  new SizeF(args.Bounds.width + args.Bounds.x ,\n            //                                                                 args.Bounds.height)));\n            // }\n            cancel = args.cancel;\n            currentBounds = args.bounds;\n            currentRow = args.startRowIndex;\n        }\n        return { returnValue: cancel, currentBounds: currentBounds, currentRowIndex: currentRow };\n    };\n    /**\n     * `Raises PageLayout event` if needed.\n     * @private\n     */\n    PdfGridLayouter.prototype.raisePageLayouted = function (result) {\n        var args = new PdfGridEndPageLayoutEventArgs(result);\n        if (this.Grid.raiseEndPageLayout) {\n            this.Grid.onEndPageLayout(args);\n        }\n        return args;\n    };\n    PdfGridLayouter.prototype.drawRow = function (row, result, height) {\n        if (typeof result === 'undefined') {\n            //.. Check if required space available.\n            //.....If the row conains spans which  falls through more than one page, then draw the row to next page.                        \n            var result_1 = new RowLayoutResult();\n            var rowHeightWithSpan = 0;\n            var location_3 = new PointF(0, 0);\n            var size = new SizeF(0, 0);\n            var isHeader = false;\n            if (row.rowSpanExists) {\n                var maxSpan = 0;\n                var currRowIndex = this.Grid.rows.rowCollection.indexOf(row);\n                if (currRowIndex === -1) {\n                    currRowIndex = this.Grid.headers.indexOf(row);\n                    if (currRowIndex !== -1) {\n                        isHeader = true;\n                    }\n                }\n                for (var i = 0; i < row.cells.count; i++) {\n                    var cell = row.cells.getCell(i);\n                    maxSpan = Math.max(maxSpan, cell.rowSpan);\n                }\n                for (var i = currRowIndex; i < currRowIndex + maxSpan; i++) {\n                    rowHeightWithSpan += (isHeader ? this.Grid.headers.getHeader(i).height : this.Grid.rows.getRow(i).height);\n                }\n                // let rowMaxHeight : number = rowHeightWithSpan;\n                // for (let i : number = 0; i < row.cells.count; i++ ) {\n                //     rowMaxHeight = rowMaxHeight > row.cells.getCell(i).height ? rowMaxHeight : row.cells.getCell(i).height;\n                // }\n                // let flag : boolean = true;\n                // let nextRow : PdfGridRow = this.Grid.headers.getHeader(this.Grid.headers.indexOf(row) + 1);\n                // for (let i : number = 0; i < nextRow.cells.count; i++ ) {\n                //     if (nextRow.cells.getCell(i).value !== '' && nextRow.cells.getCell(i).value !== undefined) {\n                //         flag = false;\n                //         break;\n                //     }\n                // }\n                // if ((rowMaxHeight > rowHeightWithSpan) && flag) {\n                //     row.height += (rowMaxHeight - rowHeightWithSpan);\n                // }                \n            }\n            var calculatedHeight = row.rowBreakHeight > 0.0 ? row.rowBreakHeight : row.height;\n            if (this.Grid.isChildGrid && this.Grid.ParentCell != null) {\n                //Split row only if row height exceeds page height and AllowRowBreakAcrossPages is true.\n                // if (calculatedHeight + this.Grid.ParentCell.row.grid.style.cellPadding.bottom +\n                //             this.Grid.ParentCell.row.grid.style.cellPadding.top > this.currentPageBounds.height) {\n                //     if (this.Grid.allowRowBreakAcrossPages) {\n                //         result.isFinish = true;\n                //         if ( this.Grid.isChildGrid && row.rowBreakHeight > 0 ) {\n                //             if (this.Grid.ParentCell.row.grid.style.cellPadding !== null) {\n                //                 this.currentBounds.y += this.Grid.ParentCell.row.grid.style.cellPadding.top;\n                //             }\n                //             this.currentBounds.x = this.startLocation.x;\n                //         }\n                //         result.bounds = this.currentBounds ;\n                //         this.drawRowWithBreak(result, row, calculatedHeight);\n                //     } else {\n                //         //If AllowRowBreakAcrossPages is not true, draw the row till it fits the page.                       \n                //         if (this.Grid.ParentCell.row.grid.style.cellPadding != null) {\n                //             this.currentBounds.y += this.Grid.ParentCell.row.grid.style.cellPadding.top;\n                //             calculatedHeight = this.currentBounds.height - this.currentBounds.y -\n                //                     this.Grid.ParentCell.row.grid.style.cellPadding.bottom;\n                //         }\n                //         result.isFinish = false;\n                //         this.drawRow( row, result, calculatedHeight);\n                //     }\n                // } else\n                if (this.currentBounds.y + this.Grid.ParentCell.row.grid.style.cellPadding.bottom + calculatedHeight >\n                    this.currentPageBounds.height || this.currentBounds.y + this.Grid.ParentCell.row.grid.style.cellPadding.bottom\n                    + calculatedHeight > this.currentBounds.height || this.currentBounds.y +\n                    this.Grid.ParentCell.row.grid.style.cellPadding.bottom + rowHeightWithSpan > this.currentPageBounds.height) {\n                    //If a row is repeated and still cannot fit in page, proceed draw.\n                    if (this.Grid.ParentCell.row.grid.LayoutFormat.break === PdfLayoutBreakType.FitPage) {\n                        PdfGridLayouter.repeatRowIndex = this.Grid.rows.rowCollection.indexOf(row);\n                        this.Grid.splitChildRowIndex = this.Grid.rows.rowCollection.indexOf(row);\n                    }\n                    if (PdfGridLayouter.repeatRowIndex > -1 && PdfGridLayouter.repeatRowIndex === row.rowIndex) {\n                        if (this.Grid.allowRowBreakAcrossPages) {\n                            result_1.isFinish = true;\n                            // if (this.Grid.isChildGrid && row.rowBreakHeightValue > 0) {\n                            //     // if (this.Grid.ParentCell.row.grid.style.cellPadding != null) {\n                            //     //     this.currentBounds.y += this.Grid.ParentCell.row.grid.style.cellPadding.top;\n                            //     // }\n                            //     this.currentBounds.x = this.startLocation.x;\n                            // }\n                            result_1.bounds = this.currentBounds;\n                            this.drawRowWithBreak(result_1, row, calculatedHeight);\n                            row.repeatFlag = true;\n                            row.repeatRowNumber = PdfGridLayouter.repeatRowIndex;\n                        }\n                        // else {\n                        //     result.isFinish = false;\n                        //     row.repeatFlag = false;\n                        //     this.drawRow( row, result, calculatedHeight);\n                        // }\n                    }\n                    // else {\n                    //     result.isFinish = false;\n                    // }\n                }\n                else {\n                    result_1.isFinish = true;\n                    if (row.grid.ParentCell.row.rowBreakHeightValue > 0) {\n                        row.repeatFlag = true;\n                    }\n                    else {\n                        row.repeatFlag = false;\n                        calculatedHeight = row.height;\n                    }\n                    if (this.Grid.isChildGrid && row.rowBreakHeight > 0) {\n                        if (this.Grid.ParentCell.row.grid.style.cellPadding != null) {\n                            calculatedHeight += this.Grid.ParentCell.row.grid.style.cellPadding.bottom;\n                        }\n                    }\n                    this.drawRow(row, result_1, calculatedHeight);\n                }\n            }\n            else {\n                //Split row only if row height exceeds page height and AllowRowBreakAcrossPages is true.\n                if (calculatedHeight > this.currentPageBounds.height) {\n                    if (this.Grid.allowRowBreakAcrossPages) {\n                        result_1.isFinish = true;\n                        //result.bounds = this.currentBounds;\n                        this.drawRowWithBreak(result_1, row, calculatedHeight);\n                        row.isrowFinish = true;\n                        row.repeatFlag = true;\n                        if (row.grid.splitChildRowIndex !== -1) {\n                            result_1.isFinish = false;\n                        }\n                    }\n                    // else {\n                    //     //If AllowRowBreakAcrossPages is not true, draw the row till it fits the page.\n                    //     result.isFinish = false;\n                    //     this.drawRow( row, result, calculatedHeight);\n                    // }\n                }\n                else if (this.currentBounds.y + calculatedHeight > this.currentPageBounds.height ||\n                    this.currentBounds.y + calculatedHeight > (this.currentBounds.height + this.startLocation.y) ||\n                    this.currentBounds.y + rowHeightWithSpan > this.currentPageBounds.height) {\n                    // If a row is repeated and still cannot fit in page, proceed draw.\n                    if (this.Grid.LayoutFormat.break === PdfLayoutBreakType.FitPage) {\n                        PdfGridLayouter.repeatRowIndex = this.Grid.rows.rowCollection.indexOf(row);\n                    }\n                    if (PdfGridLayouter.repeatRowIndex > -1 && PdfGridLayouter.repeatRowIndex === row.rowIndex) {\n                        if (this.Grid.allowRowBreakAcrossPages) {\n                            result_1.isFinish = true;\n                            this.drawRowWithBreak(result_1, row, calculatedHeight);\n                            row.repeatFlag = true;\n                            row.repeatRowNumber = PdfGridLayouter.repeatRowIndex;\n                            if (row.grid.splitChildRowIndex !== -1) {\n                                result_1.isFinish = false;\n                            }\n                        }\n                        // else {\n                        //     result.isFinish = false;\n                        //     this.drawRow(row, result, calculatedHeight);\n                        // }\n                    }\n                    else {\n                        result_1.isFinish = false;\n                    }\n                }\n                else {\n                    result_1.isFinish = true;\n                    this.drawRow(row, result_1, calculatedHeight);\n                    row.repeatFlag = false;\n                }\n            }\n            return result_1;\n        }\n        else {\n            var skipcell = false;\n            var location_4 = new PointF(this.currentBounds.x, this.currentBounds.y);\n            // if (row.grid.isChildGrid && row.grid.allowRowBreakAcrossPages && this.startLocation.x !== this.currentBounds.x && row.width <\n            //                 this.currentPage.getClientSize().width) {\n            //     location.x = this.startLocation.x;\n            // }\n            result.bounds = new RectangleF(location_4, new SizeF(0, 0));\n            height = this.ReCalculateHeight(row, height);\n            for (var i = this.cellStartIndex; i <= this.cellEndIndex; i++) {\n                var cancelSpans = ((i > this.cellEndIndex + 1) && (row.cells.getCell(i).columnSpan > 1));\n                // let cancelSpans : boolean = false;\n                if (!cancelSpans) {\n                    for (var j = 1; j < row.cells.getCell(i).columnSpan; j++) {\n                        row.cells.getCell(i + j).isCellMergeContinue = true;\n                    }\n                }\n                var size = new SizeF(this.Grid.columns.getColumn(i).width, height);\n                // if (size.width > this.currentGraphics.clientSize.width) {\n                //     size.width = this.currentGraphics.clientSize.width;\n                // }\n                // if (this.Grid.isChildGrid && this.Grid.style.allowHorizontalOverflow) {\n                //     if (size.width >= this.currentGraphics.clientSize.width) {\n                //         size.width -= 2 * this.currentBounds.x;\n                //     }\n                // }\n                /* tslint:disable */\n                if (!this.CheckIfDefaultFormat(this.Grid.columns.getColumn(i).format) &&\n                    this.CheckIfDefaultFormat(row.cells.getCell(i).stringFormat)) {\n                    row.cells.getCell(i).stringFormat = this.Grid.columns.getColumn(i).format;\n                }\n                var cellstyle = row.cells.getCell(i).style;\n                var tempValue = ((typeof row.cells.getCell(i).value === 'string' &&\n                    row.cells.getCell(i).value !== null) ? row.cells.getCell(i).value : '');\n                row.cells.getCell(i).style = this.RaiseBeforeCellDraw(this.currentGraphics, this.currentRowIndex, i, new RectangleF(location_4, size), tempValue, cellstyle);\n                //row.cells.getCell(i).style = cellstyle;\n                if (!skipcell) {\n                    if (row.cells.getCell(i).value instanceof PdfGrid) {\n                        var grid = row.cells.getCell(i).value;\n                        grid.parentCellIndex = i;\n                    }\n                    var stringResult = row.cells.getCell(i).draw(this.currentGraphics, new RectangleF(location_4, size), cancelSpans);\n                    if (row.grid.style.allowHorizontalOverflow && (row.cells.getCell(i).columnSpan > this.cellEndIndex ||\n                        i + row.cells.getCell(i).columnSpan > this.cellEndIndex + 1) && this.cellEndIndex < row.cells.count - 1) {\n                        row.rowOverflowIndex = this.cellEndIndex;\n                    }\n                    if (row.grid.style.allowHorizontalOverflow && (row.rowOverflowIndex > 0 && (row.cells.getCell(i).columnSpan >\n                        this.cellEndIndex || i + row.cells.getCell(i).columnSpan > this.cellEndIndex + 1)) &&\n                        row.cells.getCell(i).columnSpan - this.cellEndIndex + i - 1 > 0) {\n                        row.cells.getCell(row.rowOverflowIndex + 1).value = stringResult !== null ? (stringResult.remainder !== undefined) ?\n                            stringResult.remainder : '' : '';\n                        row.cells.getCell(row.rowOverflowIndex + 1).stringFormat = row.cells.getCell(i).stringFormat;\n                        row.cells.getCell(row.rowOverflowIndex + 1).style = row.cells.getCell(i).style;\n                        row.cells.getCell(row.rowOverflowIndex + 1).columnSpan = row.cells.getCell(i).columnSpan - this.cellEndIndex + i - 1;\n                    }\n                }\n                /* tslint:enable */\n                tempValue = ((typeof row.cells.getCell(i).value === 'string' &&\n                    row.cells.getCell(i).value !== null) ? row.cells.getCell(i).value : '');\n                if (!cancelSpans) {\n                    this.raiseAfterCellDraw(this.currentGraphics, this.currentRowIndex, i, new RectangleF(location_4, size), tempValue, row.cells.getCell(i).style);\n                }\n                if (row.cells.getCell(i).value instanceof PdfGrid) {\n                    var grid = row.cells.getCell(i).value;\n                    if (this.Grid.columns.getColumn(i).width >= this.currentGraphics.clientSize.width) {\n                        location_4.x = grid.rowLayoutBoundsWidth;\n                        location_4.x += grid.style.cellSpacing;\n                    }\n                    else {\n                        location_4.x += this.Grid.columns.getColumn(i).width;\n                    }\n                }\n                else {\n                    location_4.x += this.Grid.columns.getColumn(i).width;\n                }\n            }\n            if (!row.rowMergeComplete || row.isRowHeightSet) {\n                this.currentBounds.y += height;\n            }\n            result.bounds = new RectangleF(new PointF(result.bounds.x, result.bounds.y), new SizeF(location_4.x, location_4.y));\n        }\n    };\n    PdfGridLayouter.prototype.drawRowWithBreak = function (result, row, calculateHeight) {\n        var location = new PointF(this.currentBounds.x, this.currentBounds.y);\n        if (row.grid.isChildGrid && row.grid.allowRowBreakAcrossPages && this.startLocation.x !== this.currentBounds.x) {\n            location.x = this.startLocation.x;\n        }\n        result.bounds = new RectangleF(location, new SizeF(0, 0));\n        this.gridHeight = row.rowBreakHeight > 0 ? this.currentPageBounds.height : 0;\n        // Calculate the remaining height.\n        if (row.grid.style.cellPadding.top + this.currentBounds.y + row.grid.style.cellPadding.bottom < this.currentPageBounds.height) {\n            row.rowBreakHeight = this.currentBounds.y + calculateHeight - this.currentPageBounds.height;\n        }\n        // else {\n        //     row.rowBreakHeight = calculateHeight;\n        //     result.isFinish = false;\n        //     return;\n        // }\n        // No need to explicit break if the row height is equal to grid height.\n        for (var i = 0; i < row.cells.count; i++) {\n            var cell = row.cells.getCell(i);\n            var cellHeight = cell.measureHeight();\n            if (cellHeight === calculateHeight && cell.value instanceof PdfGrid) {\n                row.rowBreakHeight = 0;\n            }\n            // else if (cellHeight === calculateHeight && (cell.value as PdfGrid) === null) {\n            //     row.rowBreakHeight = this.currentBounds.y + calculateHeight - this.currentPageBounds.height;\n            // }\n        }\n        for (var i = this.cellStartIndex; i <= this.cellEndIndex; i++) {\n            var cancelSpans = ((row.cells.getCell(i).columnSpan + i > this.cellEndIndex + 1) &&\n                (row.cells.getCell(i).columnSpan > 1));\n            // if (!cancelSpans) {\n            //     for (let k : number = 1; k < row.cells.getCell(i).columnSpan; k++) {\n            //         row.cells.getCell(i + k).isCellMergeContinue = true;\n            //     }\n            //}\n            var size = new SizeF(this.Grid.columns.getColumn(i).width, this.gridHeight > 0.0 ? this.gridHeight :\n                this.currentPageBounds.height);\n            // if (size.width === 0) {\n            //     size = new SizeF(row.cells.getCell(i).width, size.height);\n            // }\n            // if (!this.CheckIfDefaultFormat(this.Grid.columns.getColumn(i).format) &&\n            //         this.CheckIfDefaultFormat((row.cells.getCell(i).stringFormat))) {\n            //     row.cells.getCell(i).stringFormat = this.Grid.columns.getColumn(i).format;\n            // }\n            var cellstyle1 = row.cells.getCell(i).style;\n            row.cells.getCell(i).style = cellstyle1;\n            var skipcell = false;\n            var stringResult = null;\n            if (!skipcell) {\n                stringResult = row.cells.getCell(i).draw(this.currentGraphics, new RectangleF(location, size), cancelSpans);\n            }\n            //If still row is to be drawn, set cell finished drawing cell as false and update the text to be drawn.\n            if (row.rowBreakHeight > 0.0) {\n                if (stringResult != null) {\n                    row.cells.getCell(i).FinishedDrawingCell = false;\n                    row.cells.getCell(i).remainingString = stringResult.remainder == null ? ' ' : stringResult.remainder;\n                    if (row.grid.isChildGrid) {\n                        row.rowBreakHeight = calculateHeight - stringResult.actualSize.height;\n                    }\n                }\n            }\n            result.isFinish = (!result.isFinish) ? result.isFinish : row.cells.getCell(i).FinishedDrawingCell;\n            // let tempValue : string = ((typeof row.cells.getCell(i).value === 'string' &&\n            //row.cells.getCell(i).value !== null) ? row.cells.getCell(i).value : '') as string;\n            // if (!cancelSpans) {\n            //     // this.raiseAfterCellDraw(this.currentGraphics, this.currentRowIndex, i,\n            //     //           new RectangleF(location, size), tempValue, row.cells.getCell(i).style);            \n            //     this.raiseAfterCellDraw(this.currentGraphics, this.currentRowIndex, i, new RectangleF(location, size),\n            //                             (row.cells.getCell(i).value as string) ? row.cells.getCell(i).value.toString() : ' ',\n            //                             row.cells.getCell(i).style);\n            //     }                \n            if (row.cells.getCell(i).value instanceof PdfGrid) {\n                var grid = row.cells.getCell(i).value;\n                this.rowBreakPageHeightCellIndex = i;\n                // row.cells.getCell(i).pageCount = grid.listOfNavigatePages.length;\n                // for (let j : number = 0;j<grid.listOfNavigatePages.length;j++){\n                //     let pageIndex : number =grid.listOfNavigatePages.indexOf(j);\n                //             this.Grid.listOfNavigatePages.push(pageIndex);\n                //     }\n                if (this.Grid.columns.getColumn(i).width >= this.currentGraphics.clientSize.width) {\n                    location.x = this.rowLayoutBoundsWidth;\n                    location.x += grid.style.cellSpacing;\n                }\n                else {\n                    location.x += this.Grid.columns.getColumn(i).width;\n                }\n            }\n            else {\n                location.x += this.Grid.columns.getColumn(i).width;\n            }\n        }\n        this.currentBounds.y += this.gridHeight > 0.0 ? this.gridHeight : calculateHeight;\n        result.bounds = new RectangleF(new PointF(result.bounds.x, result.bounds.y), new SizeF(location.x, location.y));\n    };\n    /**\n     * @hidden\n     * @private\n     */\n    PdfGridLayouter.repeatRowIndex = -1;\n    return PdfGridLayouter;\n}(ElementLayouter));\nexport { PdfGridLayouter };\n// recalculateBounds : boolean, clientSize : SizeF\n//Implementation\n/**\n * `Initializes` internal data.\n * @private\n */\n//Internal declaration\nvar PdfGridLayoutResult = /** @class */ (function (_super) {\n    __extends(PdfGridLayoutResult, _super);\n    /**\n     * Constructor\n     * @private\n     */\n    function PdfGridLayoutResult(page, bounds) {\n        return _super.call(this, page, bounds) || this;\n    }\n    return PdfGridLayoutResult;\n}(PdfLayoutResult));\nexport { PdfGridLayoutResult };\n/**\n * `PdfGridLayoutFormat` class represents a flexible grid that consists of columns and rows.\n */\nvar PdfGridLayoutFormat = /** @class */ (function (_super) {\n    __extends(PdfGridLayoutFormat, _super);\n    /**\n     * Initializes a new instance of the `PdfGridLayoutFormat` class.\n     * @private\n     */\n    function PdfGridLayoutFormat(baseFormat) {\n        return _super.call(this, baseFormat) || this;\n    }\n    return PdfGridLayoutFormat;\n}(PdfLayoutFormat));\nexport { PdfGridLayoutFormat };\nvar GridCellEventArgs = /** @class */ (function () {\n    // Constructors\n    /**\n     * Initialize a new instance for `GridCellEventArgs` class.\n     * @private\n     */\n    function GridCellEventArgs(graphics, rowIndex, cellIndex, bounds, value) {\n        this.gridRowIndex = rowIndex;\n        this.gridCellIndex = cellIndex;\n        this.internalValue = value;\n        this.gridBounds = bounds;\n        this.pdfGraphics = graphics;\n    }\n    Object.defineProperty(GridCellEventArgs.prototype, \"rowIndex\", {\n        // Properties\n        /**\n         * Gets the value of current `row index`.\n         * @private\n         */\n        get: function () {\n            return this.gridRowIndex;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridCellEventArgs.prototype, \"cellIndex\", {\n        /**\n         * Gets the value of current `cell index`.\n         * @private\n         */\n        get: function () {\n            return this.gridCellIndex;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridCellEventArgs.prototype, \"value\", {\n        /**\n         * Gets the actual `value` of current cell.\n         * @private\n         */\n        get: function () {\n            return this.internalValue;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridCellEventArgs.prototype, \"bounds\", {\n        /**\n         * Gets the `bounds` of current cell.\n         * @private\n         */\n        get: function () {\n            return this.gridBounds;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GridCellEventArgs.prototype, \"graphics\", {\n        /**\n         * Gets the instance of `current graphics`.\n         * @private\n         */\n        get: function () {\n            return this.pdfGraphics;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return GridCellEventArgs;\n}());\nexport { GridCellEventArgs };\nvar PdfGridBeginCellDrawEventArgs = /** @class */ (function (_super) {\n    __extends(PdfGridBeginCellDrawEventArgs, _super);\n    // Constructors\n    /**\n     * Initializes a new instance of the `StartCellLayoutEventArgs` class.\n     * @private\n     */\n    function PdfGridBeginCellDrawEventArgs(graphics, rowIndex, cellIndex, bounds, value, style) {\n        var _this = _super.call(this, graphics, rowIndex, cellIndex, bounds, value) || this;\n        _this.style = style;\n        return _this;\n    }\n    Object.defineProperty(PdfGridBeginCellDrawEventArgs.prototype, \"skip\", {\n        // Properties\n        /**\n         * Gets or sets a value indicating whether the value of this cell should be `skipped`.\n         * @private\n         */\n        get: function () {\n            return this.bSkip;\n        },\n        set: function (value) {\n            this.bSkip = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridBeginCellDrawEventArgs.prototype, \"style\", {\n        /**\n         * Gets or sets a `style` value of the cell.\n         * @private\n         */\n        get: function () {\n            return this.cellStyle;\n        },\n        set: function (value) {\n            this.cellStyle = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return PdfGridBeginCellDrawEventArgs;\n}(GridCellEventArgs));\nexport { PdfGridBeginCellDrawEventArgs };\nvar PdfGridEndCellDrawEventArgs = /** @class */ (function (_super) {\n    __extends(PdfGridEndCellDrawEventArgs, _super);\n    // Constructors\n    /**\n     * Initializes a new instance of the `PdfGridEndCellLayoutEventArgs` class.\n     * @private\n     */\n    function PdfGridEndCellDrawEventArgs(graphics, rowIndex, cellIndex, bounds, value, style) {\n        var _this = _super.call(this, graphics, rowIndex, cellIndex, bounds, value) || this;\n        _this.cellStyle = style;\n        return _this;\n    }\n    Object.defineProperty(PdfGridEndCellDrawEventArgs.prototype, \"style\", {\n        // Propertise\n        /**\n         * Get the `PdfGridCellStyle`.\n         * @private\n         */\n        get: function () {\n            return this.cellStyle;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return PdfGridEndCellDrawEventArgs;\n}(GridCellEventArgs));\nexport { PdfGridEndCellDrawEventArgs };\nvar PdfCancelEventArgs = /** @class */ (function () {\n    function PdfCancelEventArgs() {\n    }\n    Object.defineProperty(PdfCancelEventArgs.prototype, \"cancel\", {\n        // Properties\n        /**\n         * Gets and Sets the value of `cancel`.\n         * @private\n         */\n        get: function () {\n            return this.isCancel;\n        },\n        set: function (value) {\n            this.isCancel = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return PdfCancelEventArgs;\n}());\nexport { PdfCancelEventArgs };\nvar BeginPageLayoutEventArgs = /** @class */ (function (_super) {\n    __extends(BeginPageLayoutEventArgs, _super);\n    // Constructors\n    /**\n     * Initializes a new instance of the `BeginPageLayoutEventArgs` class with the specified rectangle and page.\n     * @private\n     */\n    function BeginPageLayoutEventArgs(bounds, page) {\n        var _this = _super.call(this) || this;\n        _this.bounds = bounds;\n        _this.pdfPage = page;\n        return _this;\n    }\n    Object.defineProperty(BeginPageLayoutEventArgs.prototype, \"bounds\", {\n        // Properties\n        /**\n         * Gets or sets value that indicates the lay outing `bounds` on the page.\n         * @private\n         */\n        get: function () {\n            return this.cellBounds;\n        },\n        set: function (value) {\n            this.cellBounds = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BeginPageLayoutEventArgs.prototype, \"page\", {\n        /**\n         * Gets the `page` where the lay outing should start.\n         * @private\n         */\n        get: function () {\n            return this.pdfPage;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return BeginPageLayoutEventArgs;\n}(PdfCancelEventArgs));\nexport { BeginPageLayoutEventArgs };\n/**\n * `EndPageLayoutEventArgs` class is alternate for end page layout events.\n */\nvar EndPageLayoutEventArgs = /** @class */ (function (_super) {\n    __extends(EndPageLayoutEventArgs, _super);\n    // Constructors\n    /**\n     * Initializes a new instance of the `EndPageLayoutEventArgs` class. with the specified 'PdfLayoutResult'.\n     * @private\n     */\n    function EndPageLayoutEventArgs(result) {\n        var _this = _super.call(this) || this;\n        _this.layoutResult = result;\n        return _this;\n    }\n    Object.defineProperty(EndPageLayoutEventArgs.prototype, \"result\", {\n        // Properties\n        /**\n         * Gets the lay outing `result` of the page.\n         * @private\n         */\n        get: function () {\n            return this.layoutResult;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EndPageLayoutEventArgs.prototype, \"nextPage\", {\n        /**\n         * Gets or sets a value indicating the `next page` where the element should be layout.\n         * @private\n         */\n        get: function () {\n            return this.nextPdfPage;\n        },\n        set: function (value) {\n            this.nextPdfPage = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return EndPageLayoutEventArgs;\n}(PdfCancelEventArgs));\nexport { EndPageLayoutEventArgs };\n/**\n * `PdfGridBeginPageLayoutEventArgs` class is alternate for begin page layout events.\n */\nvar PdfGridBeginPageLayoutEventArgs = /** @class */ (function (_super) {\n    __extends(PdfGridBeginPageLayoutEventArgs, _super);\n    // Constructors\n    /**\n     * Initialize a new instance of `PdfGridBeginPageLayoutEventArgs` class.\n     * @private\n     */\n    function PdfGridBeginPageLayoutEventArgs(bounds, page, startRow) {\n        var _this = _super.call(this, bounds, page) || this;\n        _this.startRow = startRow;\n        return _this;\n    }\n    Object.defineProperty(PdfGridBeginPageLayoutEventArgs.prototype, \"startRowIndex\", {\n        // Properties\n        /**\n         * Gets the `start row index`.\n         * @private\n         */\n        get: function () {\n            return this.startRow;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return PdfGridBeginPageLayoutEventArgs;\n}(BeginPageLayoutEventArgs));\nexport { PdfGridBeginPageLayoutEventArgs };\n/**\n * `PdfGridEndPageLayoutEventArgs` class is alternate for begin page layout events.\n */\nvar PdfGridEndPageLayoutEventArgs = /** @class */ (function (_super) {\n    __extends(PdfGridEndPageLayoutEventArgs, _super);\n    // Constructors\n    /**\n     * Initialize a new instance of `PdfGridEndPageLayoutEventArgs` class.\n     * @private\n     */\n    function PdfGridEndPageLayoutEventArgs(result) {\n        return _super.call(this, result) || this;\n    }\n    return PdfGridEndPageLayoutEventArgs;\n}(EndPageLayoutEventArgs));\nexport { PdfGridEndPageLayoutEventArgs };\nvar RowLayoutResult = /** @class */ (function () {\n    //Constructors\n    /**\n     * Initializes a new instance of the `RowLayoutResult` class.\n     * @private\n     */\n    function RowLayoutResult() {\n        this.layoutedBounds = new RectangleF(0, 0, 0, 0);\n    }\n    Object.defineProperty(RowLayoutResult.prototype, \"isFinish\", {\n        /**\n         * Gets or sets a value indicating whether this instance `is finish`.\n         * @private\n         */\n        get: function () {\n            return this.bIsFinished;\n        },\n        set: function (value) {\n            this.bIsFinished = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RowLayoutResult.prototype, \"bounds\", {\n        /**\n         * Gets or sets the `bounds`.\n         * @private\n         */\n        get: function () {\n            return this.layoutedBounds;\n        },\n        set: function (value) {\n            this.layoutedBounds = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return RowLayoutResult;\n}());\nexport { RowLayoutResult };\n"]},"metadata":{},"sourceType":"module"}