{"ast":null,"code":"/**\n * PdfGraphics.ts class for EJ2-PDF\n */\nimport { PdfColorSpace, TextRenderingMode, PdfFillMode, PdfTextAlignment } from './enum';\nimport { PdfVerticalAlignment, PdfBlendMode } from './enum';\nimport { PdfSubSuperScript } from './fonts/enum';\nimport { PdfStreamWriter } from './../input-output/pdf-stream-writer';\nimport { PdfPen } from './pdf-pen';\nimport { PdfBrush } from './brushes/pdf-brush';\nimport { PdfSolidBrush } from './brushes/pdf-solid-brush';\nimport { PdfFont } from './fonts/pdf-font';\nimport { PdfTransformationMatrix } from './pdf-transformation-matrix';\nimport { PointF, SizeF, RectangleF } from './../drawing/pdf-drawing';\nimport { ProcedureSets } from './constants';\nimport { PdfString } from './../primitives/pdf-string';\nimport { PdfStringFormat } from './fonts/pdf-string-format';\nimport { TemporaryDictionary } from './../collections/object-object-pair/dictionary';\nimport { PdfTransparency } from './pdf-transparency';\nimport { PdfStringLayouter, LineType } from './fonts/string-layouter';\nimport { DictionaryProperties } from './../input-output/pdf-dictionary-properties';\nimport { StringTokenizer } from './fonts/string-tokenizer';\nimport { PdfAutomaticFieldInfoCollection } from './../document/automatic-fields/automatic-field-info-collection';\nimport { PdfAutomaticFieldInfo } from './../document/automatic-fields/automatic-field-info';\nimport { Operators } from './../input-output/pdf-operators';\nimport { UnicodeTrueTypeFont } from './fonts/unicode-true-type-font';\nimport { InternalEnum } from './../primitives/pdf-string';\nimport { RtlRenderer } from './fonts/rtl-renderer';\nimport { PdfTextDirection } from './enum';\n/**\n * `PdfGraphics` class represents a graphics context of the objects.\n * It's used for performing all the graphics operations.\n * ```typescript\n * // create a new PDF document\n * let document : PdfDocument = new PdfDocument();\n * // add a new page to the document\n * let page1 : PdfPage = document.pages.add();\n * // set the font\n * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n * // create black brush\n * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n * //\n * //graphics of the page\n * let page1Graphics : PdfGraphics = page1.graphics;\n * // draw the text on the page1 graphics\n * page1Graphics.drawString('Hello World', font, blackBrush, new PointF(0, 0));\n * //\n * // save the document\n * document.save('output.pdf');\n * // destroy the document\n * document.destroy();\n * ```\n */\n\nvar PdfGraphics =\n/** @class */\nfunction () {\n  function PdfGraphics(arg1, arg2, arg3) {\n    /**\n     * Represents the `Current color space`.\n     * @private\n     */\n    this.currentColorSpace = PdfColorSpace.Rgb;\n    /**\n     * Stores `previous rendering mode`.\n     * @private\n     */\n\n    this.previousTextRenderingMode = TextRenderingMode.Fill;\n    /**\n     * Previous `character spacing` value or 0.\n     * @private\n     */\n\n    this.previousCharacterSpacing = 0.0;\n    /**\n     * Previous `word spacing` value or 0.\n     * @private\n     */\n\n    this.previousWordSpacing = 0.0;\n    /**\n     * The `previously used text scaling` value.\n     * @private\n     */\n\n    this.previousTextScaling = 100.0;\n    /**\n     * Instance of `ProcedureSets` class.\n     * @private\n     */\n\n    this.procedureSets = new ProcedureSets();\n    /**\n     * To check wihether it is a `direct text rendering`.\n     * @default true\n     * @private\n     */\n\n    this.isNormalRender = true;\n    /**\n     * check whether to `use font size` to calculate the shift.\n     * @default false\n     * @private\n     */\n\n    this.isUseFontSize = false;\n    /**\n     * check whether the font is in `italic type`.\n     * @default false\n     * @private\n     */\n\n    this.isItalic = false;\n    /**\n     * Check whether it is an `emf Text Matrix`.\n     * @default false\n     * @private\n     */\n\n    this.isEmfTextScaled = false;\n    /**\n     * Check whether it is an `emf` call.\n     * @default false\n     * @private\n     */\n\n    this.isEmf = false;\n    /**\n     * Check whether it is an `emf plus` call.\n     * @default false\n     * @private\n     */\n\n    this.isEmfPlus = false;\n    /**\n     * Check whether it is in `base line format`.\n     * @default true\n     * @private\n     */\n\n    this.isBaselineFormat = true;\n    /**\n     * Emf Text `Scaling Factor`.\n     * @private\n     */\n\n    this.emfScalingFactor = new SizeF(0, 0);\n    /**\n     * To check whether the `last color space` of document and garphics is saved.\n     * @private\n     */\n\n    this.colorSpaceChanged = false;\n    /**\n     * Stores an instance of `DictionaryProperties`.\n     * @private\n     */\n\n    this.dictionaryProperties = new DictionaryProperties();\n    /**\n     * Checks whether the x co-ordinate is need to set as client size or not.\n     * @hidden\n     * @private\n     */\n\n    this.isOverloadWithPosition = false;\n    /**\n     * Checks whether the x co-ordinate is need to set as client size or not.\n     * @hidden\n     * @private\n     */\n\n    this.isPointOverload = false;\n    /**\n     * Current colorspaces.\n     * @hidden\n     * @private\n     */\n\n    this.currentColorSpaces = ['RGB', 'CMYK', 'GrayScale', 'Indexed'];\n    /**\n     * Checks the current image `is optimized` or not.\n     * @default false.\n     * @private\n     */\n\n    this.isImageOptimized = false;\n    /**\n     * Stores the `graphics states`.\n     * @private\n     */\n\n    this.graphicsState = [];\n    /**\n     * Indicates whether the object `had trasparency`.\n     * @default false\n     * @private\n     */\n\n    this.istransparencySet = false;\n    /**\n     * Stores the instance of `PdfAutomaticFieldInfoCollection` class .\n     * @default null\n     * @private\n     */\n\n    this.internalAutomaticFields = null;\n    /**\n     * Stores the index of the start line that should draw with in the next page.\n     * @private\n     */\n\n    this.startCutIndex = -1;\n    this.getResources = arg2;\n    this.canvasSize = arg1;\n\n    if (arg3 instanceof PdfStreamWriter) {\n      this.pdfStreamWriter = arg3;\n    } else {\n      this.pdfStreamWriter = new PdfStreamWriter(arg3);\n    }\n\n    this.initialize();\n  }\n\n  Object.defineProperty(PdfGraphics.prototype, \"stringLayoutResult\", {\n    //  Properties\n\n    /**\n     * Returns the `result` after drawing string.\n     * @private\n     */\n    get: function () {\n      return this.pdfStringLayoutResult;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGraphics.prototype, \"size\", {\n    /**\n     * Gets the `size` of the canvas.\n     * @private\n     */\n    get: function () {\n      return this.canvasSize;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGraphics.prototype, \"mediaBoxUpperRightBound\", {\n    /**\n     * Gets and Sets the value of `MediaBox upper right bound`.\n     * @private\n     */\n    get: function () {\n      if (typeof this.internalMediaBoxUpperRightBound === 'undefined') {\n        this.internalMediaBoxUpperRightBound = 0;\n      }\n\n      return this.internalMediaBoxUpperRightBound;\n    },\n    set: function (value) {\n      this.internalMediaBoxUpperRightBound = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGraphics.prototype, \"clientSize\", {\n    /**\n     * Gets the `size` of the canvas reduced by margins and page templates.\n     * @private\n     */\n    get: function () {\n      return new SizeF(this.clipBounds.width, this.clipBounds.height);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGraphics.prototype, \"colorSpace\", {\n    /**\n     * Gets or sets the current `color space` of the document\n     * @private\n     */\n    get: function () {\n      return this.currentColorSpace;\n    },\n    set: function (value) {\n      this.currentColorSpace = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGraphics.prototype, \"streamWriter\", {\n    /**\n     * Gets the `stream writer`.\n     * @private\n     */\n    get: function () {\n      return this.pdfStreamWriter;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGraphics.prototype, \"matrix\", {\n    /**\n     * Gets the `transformation matrix` reflecting current transformation.\n     * @private\n     */\n    get: function () {\n      if (this.transformationMatrix == null) {\n        this.transformationMatrix = new PdfTransformationMatrix();\n      }\n\n      return this.transformationMatrix;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGraphics.prototype, \"layer\", {\n    /**\n     * Gets the `layer` for the graphics, if exists.\n     * @private\n     */\n    get: function () {\n      return this.pageLayer;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGraphics.prototype, \"page\", {\n    /**\n     * Gets the `page` for this graphics, if exists.\n     * @private\n     */\n    get: function () {\n      return this.pageLayer.page;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGraphics.prototype, \"automaticFields\", {\n    get: function () {\n      if (this.internalAutomaticFields == null || typeof this.internalAutomaticFields === 'undefined') {\n        this.internalAutomaticFields = new PdfAutomaticFieldInfoCollection();\n      }\n\n      return this.internalAutomaticFields;\n    },\n    enumerable: true,\n    configurable: true\n  }); //Implementation\n\n  /**\n   * `Initializes` this instance.\n   * @private\n   */\n\n  PdfGraphics.prototype.initialize = function () {\n    this.bStateSaved = false;\n    this.currentPen = null;\n    this.currentBrush = null;\n    this.currentFont = null;\n    this.currentColorSpace = PdfColorSpace.Rgb;\n    this.bCSInitialized = false;\n    this.transformationMatrix = null;\n    this.previousTextRenderingMode = -1; //.Fill;\n\n    this.previousCharacterSpacing = -1.0;\n    this.previousWordSpacing = -1.0;\n    this.previousTextScaling = -100.0; // this.m_trasparencies = null;\n\n    this.currentStringFormat = null;\n    this.clipBounds = new RectangleF(new PointF(0, 0), this.size);\n    this.getResources.getResources().requireProcedureSet(this.procedureSets.pdf);\n  };\n\n  PdfGraphics.prototype.drawPdfTemplate = function (template, location, size) {\n    if (typeof size === 'undefined') {\n      if (template == null) {\n        throw Error('ArgumentNullException-template');\n      }\n\n      this.drawPdfTemplate(template, location, template.size);\n    } else {\n      // let crossTable : PdfCrossTable = null;\n      // if (this.pageLayer != null) {\n      //     crossTable = (this.page as PdfPage).section.parentDocument.crossTable;\n      // }\n      if (template == null) {\n        throw Error('ArgumentNullException-template');\n      }\n\n      var scaleX = template.width > 0 ? size.width / template.width : 1;\n      var scaleY = template.height > 0 ? size.height / template.height : 1;\n      var bNeedScale = !(scaleX === 1 && scaleY === 1); // Save state.\n\n      var state = this.save(); // Take into consideration that rect location is bottom/left.\n\n      var matrix = new PdfTransformationMatrix();\n\n      if (this.pageLayer != null) {\n        this.getTranslateTransform(location.x, location.y + size.height, matrix);\n      }\n\n      if (bNeedScale) {\n        this.getScaleTransform(scaleX, scaleY, matrix);\n      }\n\n      this.pdfStreamWriter.modifyCtm(matrix); // Output template.\n\n      var resources = this.getResources.getResources();\n      var name_1 = resources.getName(template);\n      this.pdfStreamWriter.executeObject(name_1); // Restore state.\n\n      this.restore(state); //Transfer automatic fields from template.\n\n      var g = template.graphics;\n\n      if (g != null) {\n        for (var index = 0; index < g.automaticFields.automaticFields.length; index++) {\n          var fieldInfo = g.automaticFields.automaticFields[index];\n          var newLocation = new PointF(fieldInfo.location.x + location.x, fieldInfo.location.y + location.y);\n          var scalingX = template.size.width == 0 ? 0 : size.width / template.size.width;\n          var scalingY = template.size.height == 0 ? 0 : size.height / template.size.height;\n          this.automaticFields.add(new PdfAutomaticFieldInfo(fieldInfo.field, newLocation, scalingX, scalingY));\n          this.page.dictionary.modify();\n        }\n      }\n\n      this.getResources.getResources().requireProcedureSet(this.procedureSets.imageB);\n      this.getResources.getResources().requireProcedureSet(this.procedureSets.imageC);\n      this.getResources.getResources().requireProcedureSet(this.procedureSets.imageI);\n      this.getResources.getResources().requireProcedureSet(this.procedureSets.text);\n    }\n  };\n  /* tslint:disable */\n\n  /**\n   * @public\n   */\n\n\n  PdfGraphics.prototype.drawString = function (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9) {\n    if (typeof arg1 === 'string' && arg2 instanceof PdfFont && (arg3 instanceof PdfPen || arg3 === null) && (arg4 instanceof PdfBrush || arg4 === null) && typeof arg5 === 'number' && typeof arg6 === 'number' && (arg7 instanceof PdfStringFormat || arg7 === null) && typeof arg8 === 'undefined') {\n      this.isOverloadWithPosition = true;\n      this.drawString(arg1, arg2, arg3, arg4, arg5, arg6, this.clientSize.width - arg5, 0, arg7);\n    } else {\n      var temparg3 = arg3;\n      var temparg4 = arg4;\n      var temparg5 = arg5;\n      var temparg6 = arg6;\n      var temparg7 = arg7;\n      var temparg8 = arg8;\n      var temparg9 = arg9;\n      var layouter = new PdfStringLayouter();\n      var result = layouter.layout(arg1, arg2, temparg9, new SizeF(temparg7, temparg8), this.isOverloadWithPosition, this.clientSize);\n\n      if (!result.empty) {\n        var rect = this.checkCorrectLayoutRectangle(result.actualSize, temparg5, temparg6, temparg9);\n\n        if (temparg7 <= 0) {\n          temparg5 = rect.x;\n          temparg7 = rect.width;\n        }\n\n        if (temparg8 <= 0) {\n          temparg6 = rect.y;\n          temparg8 = rect.height;\n        }\n\n        this.drawStringLayoutResult(result, arg2, temparg3, temparg4, new RectangleF(temparg5, temparg6, temparg7, temparg8), temparg9);\n        this.isEmfTextScaled = false;\n        this.emfScalingFactor = new SizeF(0, 0);\n      }\n\n      this.getResources.getResources().requireProcedureSet(this.procedureSets.text);\n      this.isNormalRender = true;\n      this.pdfStringLayoutResult = result;\n      this.isUseFontSize = false;\n    }\n  };\n  /* tslint:enable */\n\n\n  PdfGraphics.prototype.drawLine = function (arg1, arg2, arg3, arg4, arg5) {\n    if (arg2 instanceof PointF) {\n      var temparg2 = arg2;\n      var temparg3 = arg3;\n      this.drawLine(arg1, temparg2.x, temparg2.y, temparg3.x, temparg3.y);\n    } else {\n      var temparg2 = arg2;\n      var temparg3 = arg3;\n      var temparg4 = arg4;\n      var temparg5 = arg5;\n      this.stateControl(arg1, null, null);\n      var sw = this.streamWriter;\n      sw.beginPath(temparg2, temparg3);\n      sw.appendLineSegment(temparg4, temparg5);\n      sw.strokePath();\n      this.getResources.getResources().requireProcedureSet(this.procedureSets.pdf);\n    }\n  };\n  /* tslint:disable */\n\n\n  PdfGraphics.prototype.drawRectangle = function (arg1, arg2, arg3, arg4, arg5, arg6) {\n    if (arg1 instanceof PdfPen && typeof arg2 === 'number') {\n      var temparg3 = arg3;\n      this.drawRectangle(arg1, null, arg2, temparg3, arg4, arg5);\n    } else if (arg1 instanceof PdfBrush && typeof arg2 === 'number') {\n      var temparg3 = arg3;\n      this.drawRectangle(null, arg1, arg2, temparg3, arg4, arg5);\n    } else {\n      var temparg3 = arg3;\n      var temparg4 = arg4;\n      var temparg5 = arg5;\n      var temparg6 = arg6;\n\n      if (arg2 instanceof PdfSolidBrush && arg2.color.isEmpty) {\n        arg2 = null;\n      }\n\n      var temparg1 = arg1;\n      var temparg2 = arg2;\n      this.stateControl(temparg1, temparg2, null);\n      this.streamWriter.appendRectangle(temparg3, temparg4, temparg5, temparg6);\n      this.drawPath(temparg1, temparg2, false);\n    }\n  };\n\n  PdfGraphics.prototype.drawPath = function (arg1, arg2, arg3, arg4) {\n    if (typeof arg3 === 'boolean') {\n      var temparg3 = arg3;\n      this.drawPath(arg1, arg2, PdfFillMode.Winding, temparg3);\n    } else {\n      var temparg3 = arg3;\n      var temparg4 = arg4;\n      var isPen = arg1 != null;\n      var isBrush = arg2 != null;\n      var isEvenOdd = temparg3 === PdfFillMode.Alternate;\n\n      if (isPen && isBrush) {\n        this.streamWriter.fillStrokePath(isEvenOdd);\n      } else if (!isPen && !isBrush) {\n        this.streamWriter.endPath();\n      } else if (isPen) {\n        this.streamWriter.strokePath();\n      } else {\n        this.streamWriter.fillPath(isEvenOdd);\n      }\n    }\n  };\n  /* tslint:disable */\n\n\n  PdfGraphics.prototype.drawImage = function (arg1, arg2, arg3, arg4, arg5) {\n    if (typeof arg2 === 'number' && typeof arg3 === 'number' && typeof arg4 === 'undefined') {\n      var size = arg1.physicalDimension;\n      this.drawImage(arg1, arg2, arg3, size.width, size.height);\n    } else {\n      var temparg2 = arg2;\n      var temparg3 = arg3;\n      var temparg4 = arg4;\n      var temparg5 = arg5;\n      arg1.save();\n      var matrix = new PdfTransformationMatrix();\n      this.getTranslateTransform(temparg2, temparg3 + temparg5, matrix);\n      this.getScaleTransform(arg4, arg5, matrix);\n      this.pdfStreamWriter.write('q');\n      this.pdfStreamWriter.modifyCtm(matrix); // Output template.\n\n      var resources = this.getResources.getResources();\n\n      if (typeof this.pageLayer !== 'undefined' && this.page != null) {\n        resources.document = this.page.document;\n      }\n\n      var name_2 = resources.getName(arg1);\n\n      if (typeof this.pageLayer !== 'undefined') {\n        this.page.setResources(resources);\n      }\n\n      this.pdfStreamWriter.executeObject(name_2);\n      this.pdfStreamWriter.write(Operators.restoreState);\n      this.pdfStreamWriter.write(Operators.newLine);\n      var resource = this.getResources.getResources();\n      resource.requireProcedureSet(this.procedureSets.imageB);\n      resource.requireProcedureSet(this.procedureSets.imageC);\n      resource.requireProcedureSet(this.procedureSets.imageI);\n      resource.requireProcedureSet(this.procedureSets.text);\n    }\n  }; //Implementation\n\n  /* tslint:disable */\n\n  /**\n   * Returns `bounds` of the line info.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.getLineBounds = function (lineIndex, result, font, layoutRectangle, format) {\n    var bounds;\n\n    if (!result.empty && lineIndex < result.lineCount && lineIndex >= 0) {\n      var line = result.lines[lineIndex];\n      var vShift = this.getTextVerticalAlignShift(result.actualSize.height, layoutRectangle.height, format);\n      var y = vShift + layoutRectangle.y + result.lineHeight * lineIndex;\n      var lineWidth = line.width;\n      var hShift = this.getHorizontalAlignShift(lineWidth, layoutRectangle.width, format);\n      var lineIndent = this.getLineIndent(line, format, layoutRectangle, lineIndex === 0);\n      hShift += !this.rightToLeft(format) ? lineIndent : 0;\n      var x = layoutRectangle.x + hShift;\n      /* tslint:disable */\n\n      var width = !this.shouldJustify(line, layoutRectangle.width, format) ? lineWidth - lineIndent : layoutRectangle.width - lineIndent;\n      /* tslint:enable */\n\n      var height = result.lineHeight;\n      bounds = new RectangleF(x, y, width, height);\n    } else {\n      bounds = new RectangleF(0, 0, 0, 0);\n    }\n\n    return bounds;\n  };\n  /**\n   * Creates `lay outed rectangle` depending on the text settings.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.checkCorrectLayoutRectangle = function (textSize, x, y, format) {\n    var layoutedRectangle = new RectangleF(x, y, textSize.width, textSize.width);\n\n    if (format != null) {\n      switch (format.alignment) {\n        case PdfTextAlignment.Center:\n          layoutedRectangle.x -= layoutedRectangle.width / 2;\n          break;\n\n        case PdfTextAlignment.Right:\n          layoutedRectangle.x -= layoutedRectangle.width;\n          break;\n      }\n\n      switch (format.lineAlignment) {\n        case PdfVerticalAlignment.Middle:\n          layoutedRectangle.y -= layoutedRectangle.height / 2;\n          break;\n\n        case PdfVerticalAlignment.Bottom:\n          layoutedRectangle.y -= layoutedRectangle.height;\n          break;\n      }\n    }\n\n    return layoutedRectangle;\n  };\n  /**\n   * Sets the `layer` for the graphics.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.setLayer = function (layer) {\n    this.pageLayer = layer;\n    var page = layer.page;\n\n    if (page != null && typeof page !== 'undefined') {\n      page.beginSave = this.pageSave;\n    }\n  };\n  /**\n   * Adding page number field before page saving.\n   * @private\n   */\n\n  /* tslint:disable */\n\n\n  PdfGraphics.prototype.pageSave = function (page) {\n    if (page.graphics.automaticFields != null) {\n      for (var i = 0; i < page.graphics.automaticFields.automaticFields.length; i++) {\n        var fieldInfo = page.graphics.automaticFields.automaticFields[i];\n        fieldInfo.field.performDraw(page.graphics, fieldInfo.location, fieldInfo.scalingX, fieldInfo.scalingY);\n      }\n    }\n  };\n  /**\n   * `Draws a layout result`.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.drawStringLayoutResult = function (result, font, pen, brush, layoutRectangle, format) {\n    if (!result.empty) {\n      this.applyStringSettings(font, pen, brush, format, layoutRectangle); // Set text scaling\n\n      var textScaling = format != null ? format.horizontalScalingFactor : 100.0;\n\n      if (textScaling !== this.previousTextScaling && !this.isEmfTextScaled) {\n        this.pdfStreamWriter.setTextScaling(textScaling);\n        this.previousTextScaling = textScaling;\n      }\n\n      var height = format == null || format.lineSpacing === 0 ? font.height : format.lineSpacing + font.height;\n      var subScript = format != null && format.subSuperScript === PdfSubSuperScript.SubScript;\n      var shift = 0;\n      shift = subScript ? height - (font.height + font.metrics.getDescent(format)) : height - font.metrics.getAscent(format);\n      this.shift = shift;\n      this.pdfStreamWriter.startNextLine(layoutRectangle.x, layoutRectangle.y - shift);\n      this.pdfStreamWriter.setLeading(+height);\n      var resultHeight = 0;\n      var remainingString = '';\n\n      for (var i = 0; i < result.lines.length; i++) {\n        resultHeight += result.lineHeight;\n\n        if (layoutRectangle.y + resultHeight > this.clientSize.height) {\n          this.startCutIndex = i;\n          break;\n        }\n      }\n\n      for (var j = this.startCutIndex; j < result.lines.length && j >= 0; j++) {\n        remainingString += result.lines[j].text;\n      }\n\n      var bounds = new RectangleF(layoutRectangle.x, layoutRectangle.y, layoutRectangle.width, layoutRectangle.height);\n      this.drawLayoutResult(result, font, format, layoutRectangle);\n      this.underlineStrikeoutText(pen, brush, result, font, bounds, format);\n      this.isEmfPlus = false;\n      this.isUseFontSize = false;\n\n      if (this.startCutIndex !== -1) {\n        var page = this.getNextPage();\n        page.graphics.drawString(remainingString, font, pen, brush, layoutRectangle.x, 0, layoutRectangle.width, 0, format);\n      }\n    } else {\n      throw new Error('ArgumentNullException:result');\n    }\n  };\n  /**\n   * Gets the `next page`.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.getNextPage = function () {\n    var section = this.currentPage.section;\n    var nextPage = null;\n    var index = section.indexOf(this.currentPage);\n\n    if (index === section.count - 1) {\n      nextPage = section.add();\n    } else {\n      nextPage = section.getPages()[index + 1];\n    }\n\n    return nextPage;\n  };\n\n  PdfGraphics.prototype.setClip = function (rectangle, mode) {\n    if (typeof mode === 'undefined') {\n      this.setClip(rectangle, PdfFillMode.Winding);\n    } else {\n      this.pdfStreamWriter.appendRectangle(rectangle);\n      this.pdfStreamWriter.clipPath(mode === PdfFillMode.Alternate);\n    }\n  };\n  /**\n   * Applies all the `text settings`.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.applyStringSettings = function (font, pen, brush, format, bounds) {\n    var setLineWidth = false;\n    var tm = this.getTextRenderingMode(pen, brush, format);\n    this.stateControl(pen, brush, font, format);\n    this.pdfStreamWriter.beginText();\n\n    if (tm !== this.previousTextRenderingMode) {\n      this.pdfStreamWriter.setTextRenderingMode(tm);\n      this.previousTextRenderingMode = tm;\n    } // Set character spacing.\n\n\n    var cs = format != null ? format.characterSpacing : 0;\n\n    if (cs !== this.previousCharacterSpacing && !this.isEmfTextScaled) {\n      this.pdfStreamWriter.setCharacterSpacing(cs);\n      this.previousCharacterSpacing = cs;\n    } // Set word spacing.\n    // NOTE: it works only if the space code is equal to 32 (0x20).\n\n\n    var ws = format != null ? format.wordSpacing : 0;\n\n    if (ws !== this.previousWordSpacing) {\n      this.pdfStreamWriter.setWordSpacing(ws);\n      this.previousWordSpacing = ws;\n    }\n  };\n  /**\n   * Calculates `shift value` if the text is vertically aligned.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.getTextVerticalAlignShift = function (textHeight, boundsHeight, format) {\n    var shift = 0;\n\n    if (boundsHeight >= 0 && format != null && format.lineAlignment !== PdfVerticalAlignment.Top) {\n      switch (format.lineAlignment) {\n        case PdfVerticalAlignment.Middle:\n          shift = (boundsHeight - textHeight) / 2;\n          break;\n\n        case PdfVerticalAlignment.Bottom:\n          shift = boundsHeight - textHeight;\n          break;\n      }\n    }\n\n    return shift;\n  };\n  /* tslint:disable */\n\n  /**\n   * `Draws layout result`.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.drawLayoutResult = function (result, font, format, layoutRectangle) {\n    var vAlignShift = this.getTextVerticalAlignShift(result.actualSize.height, layoutRectangle.height, format);\n\n    if (vAlignShift !== 0) {\n      this.pdfStreamWriter.startNextLine(0, vAlignShift);\n    }\n\n    var ttfFont = font;\n    var unicode = ttfFont != null && ttfFont.isUnicode;\n    var embed = ttfFont != null && ttfFont.isEmbedFont;\n    var lines = result.lines;\n\n    for (var i = 0, len = lines.length; i < len && i !== this.startCutIndex; i++) {\n      var lineInfo = lines[i];\n      var line = lineInfo.text;\n      var lineWidth = lineInfo.width;\n      var hAlignShift = this.getHorizontalAlignShift(lineWidth, layoutRectangle.width, format);\n      var lineIndent = this.getLineIndent(lineInfo, format, layoutRectangle, i === 0);\n      hAlignShift += !this.rightToLeft(format) ? lineIndent : 0;\n\n      if (hAlignShift !== 0 && !this.isEmfTextScaled) {\n        this.pdfStreamWriter.startNextLine(hAlignShift, 0);\n      }\n\n      if (unicode) {\n        this.drawUnicodeLine(lineInfo, layoutRectangle, font, format);\n      } else {\n        this.drawAsciiLine(lineInfo, layoutRectangle, font, format);\n      }\n\n      if (hAlignShift !== 0 && !this.isEmfTextScaled) {\n        this.pdfStreamWriter.startNextLine(-hAlignShift, 0);\n      }\n\n      if (this.isOverloadWithPosition && lines.length > 1) {\n        this.pdfStreamWriter.startNextLine(-layoutRectangle.x, 0);\n        layoutRectangle.x = 0;\n        layoutRectangle.width = this.clientSize.width;\n        this.isOverloadWithPosition = false;\n        this.isPointOverload = true;\n      }\n    }\n\n    this.getResources.getResources().requireProcedureSet(this.procedureSets.text);\n\n    if (vAlignShift !== 0) {\n      this.pdfStreamWriter.startNextLine(0, -(vAlignShift - result.lineHeight));\n    }\n\n    this.pdfStreamWriter.endText();\n  };\n  /**\n   * `Draws Ascii line`.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.drawAsciiLine = function (lineInfo, layoutRectangle, font, format) {\n    this.justifyLine(lineInfo, layoutRectangle.width, format);\n    var value = '';\n\n    if (lineInfo.text.indexOf('(') !== -1 || lineInfo.text.indexOf(')') !== -1) {\n      for (var i = 0; i < lineInfo.text.length; i++) {\n        if (lineInfo.text[i] === '(') {\n          value += '\\\\\\(';\n        } else if (lineInfo.text[i] === ')') {\n          value += '\\\\\\)';\n        } else {\n          value += lineInfo.text[i];\n        }\n      }\n    }\n\n    if (value === '') {\n      value = lineInfo.text;\n    }\n\n    var line = '(' + value + ')';\n    this.pdfStreamWriter.showNextLineText(new PdfString(line));\n  };\n  /**\n   * Draws unicode line.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.drawUnicodeLine = function (lineInfo, layoutRectangle, font, format) {\n    var line = lineInfo.text;\n    var lineWidth = lineInfo.width;\n    var rtl = format !== null && format.rightToLeft;\n    var useWordSpace = format !== null && (format.wordSpacing !== 0 || format.alignment === PdfTextAlignment.Justify);\n    var ttfFont = font;\n    var wordSpacing = this.justifyLine(lineInfo, layoutRectangle.width, format);\n    var rtlRender = new RtlRenderer();\n\n    if (rtl || format !== null && format.textDirection !== PdfTextDirection.None) {\n      var blocks = null;\n      var rightAlign = format !== null && format.alignment === PdfTextAlignment.Right;\n\n      if (format !== null && format.textDirection !== PdfTextDirection.None) {\n        /* tslint:disable-next-line:max-line-length */\n        blocks = rtlRender.layout(line, ttfFont, format.textDirection === PdfTextDirection.RightToLeft ? true : false, useWordSpace, format);\n      } else {\n        blocks = rtlRender.layout(line, ttfFont, rightAlign, useWordSpace, format);\n      }\n\n      var words = null;\n\n      if (blocks.length > 1) {\n        if (format !== null && format.textDirection !== PdfTextDirection.None) {\n          /* tslint:disable-next-line:max-line-length */\n          words = rtlRender.splitLayout(line, ttfFont, format.textDirection === PdfTextDirection.RightToLeft ? true : false, useWordSpace, format);\n        } else {\n          words = rtlRender.splitLayout(line, ttfFont, rightAlign, useWordSpace, format);\n        }\n      } else {\n        words = [line];\n      }\n\n      this.drawUnicodeBlocks(blocks, words, ttfFont, format, wordSpacing);\n    } else {\n      if (useWordSpace) {\n        var result = this.breakUnicodeLine(line, ttfFont, null);\n        var blocks = result.tokens;\n        var words = result.words;\n        this.drawUnicodeBlocks(blocks, words, ttfFont, format, wordSpacing);\n      } else {\n        var token = this.convertToUnicode(line, ttfFont);\n        var value = this.getUnicodeString(token);\n        this.streamWriter.showNextLineText(value);\n      }\n    }\n  };\n  /**\n   * Draws array of unicode tokens.\n   */\n\n  /* tslint:disable */\n\n\n  PdfGraphics.prototype.drawUnicodeBlocks = function (blocks, words, font, format, wordSpacing) {\n    /* tslint:enable */\n    if (blocks == null) {\n      throw new Error('Argument Null Exception : blocks');\n    }\n\n    if (words == null) {\n      throw new Error('Argument Null Exception : words');\n    }\n\n    if (font == null) {\n      throw new Error('Argument Null Exception : font');\n    }\n\n    this.streamWriter.startNextLine();\n    var x = 0;\n    var xShift = 0;\n    var firstLineIndent = 0;\n    var paragraphIndent = 0;\n\n    try {\n      if (format !== null) {\n        firstLineIndent = format.firstLineIndent;\n        paragraphIndent = format.paragraphIndent;\n        format.firstLineIndent = 0;\n        format.paragraphIndent = 0;\n      }\n\n      var spaceWidth = font.getCharWidth(StringTokenizer.whiteSpace, format) + wordSpacing;\n      var characterSpacing = format != null ? format.characterSpacing : 0;\n      var wordSpace = format !== null && wordSpacing === 0 ? format.wordSpacing : 0;\n      spaceWidth += characterSpacing + wordSpace;\n\n      for (var i = 0; i < blocks.length; i++) {\n        var token = blocks[i];\n        var word = words[i];\n        var tokenWidth = 0;\n\n        if (x !== 0) {\n          this.streamWriter.startNextLine(x, 0);\n        }\n\n        if (word.length > 0) {\n          tokenWidth +=\n          /*Utils.Round(*/\n          font.measureString(word, format).width\n          /*)*/\n          ;\n          tokenWidth += characterSpacing;\n          var val = this.getUnicodeString(token);\n          this.streamWriter.showText(val);\n        }\n\n        if (i !== blocks.length - 1) {\n          x = tokenWidth + spaceWidth;\n          xShift += x;\n        }\n      } // Rolback current line position.\n\n\n      if (xShift > 0) {\n        this.streamWriter.startNextLine(-xShift, 0);\n      }\n    } finally {\n      if (format !== null) {\n        format.firstLineIndent = firstLineIndent;\n        format.paragraphIndent = paragraphIndent;\n      }\n    }\n  };\n  /**\n   * Breakes the unicode line to the words and converts symbols to glyphs.\n   */\n\n\n  PdfGraphics.prototype.breakUnicodeLine = function (line, ttfFont, words) {\n    if (line === null) {\n      throw new Error('Argument Null Exception : line');\n    }\n\n    words = line.split(null);\n    var tokens = [];\n\n    for (var i = 0; i < words.length; i++) {\n      // Reconvert string according to unicode standard.\n      var word = words[i];\n      var token = this.convertToUnicode(word, ttfFont);\n      tokens[i] = token;\n    }\n\n    return {\n      tokens: tokens,\n      words: words\n    };\n  };\n  /**\n   * Creates PdfString from the unicode text.\n   */\n\n\n  PdfGraphics.prototype.getUnicodeString = function (token) {\n    if (token === null) {\n      throw new Error('Argument Null Exception : token');\n    }\n\n    var val = new PdfString(token);\n    val.converted = true;\n    val.encode = InternalEnum.ForceEncoding.Ascii;\n    return val;\n  };\n  /**\n   * Converts to unicode format.\n   */\n\n\n  PdfGraphics.prototype.convertToUnicode = function (text, ttfFont) {\n    var token = null;\n\n    if (text == null) {\n      throw new Error('Argument Null Exception : text');\n    }\n\n    if (ttfFont == null) {\n      throw new Error('Argument Null Exception : ttfFont');\n    }\n\n    if (ttfFont.fontInternal instanceof UnicodeTrueTypeFont) {\n      var ttfReader = ttfFont.fontInternal.ttfReader;\n      ttfFont.setSymbols(text);\n      token = ttfReader.convertString(text);\n      var bytes = PdfString.toUnicodeArray(token, false);\n      token = PdfString.byteToString(bytes);\n    }\n\n    return token;\n  };\n  /**\n   * `Justifies` the line if needed.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.justifyLine = function (lineInfo, boundsWidth, format) {\n    var line = lineInfo.text;\n    var lineWidth = lineInfo.width;\n    var shouldJustify = this.shouldJustify(lineInfo, boundsWidth, format);\n    var hasWordSpacing = format != null && format.wordSpacing !== 0;\n    var symbols = StringTokenizer.spaces;\n    var whitespacesCount = StringTokenizer.getCharsCount(line, symbols);\n    var wordSpace = 0;\n\n    if (shouldJustify) {\n      // Correct line width.\n      if (hasWordSpacing) {\n        lineWidth -= whitespacesCount * format.wordSpacing;\n      }\n\n      var difference = boundsWidth - lineWidth;\n      wordSpace = difference / whitespacesCount;\n      this.pdfStreamWriter.setWordSpacing(wordSpace);\n    } else {\n      // If there is justifying, but the line shouldn't be justified, restore default word spacing.\n      if (hasWordSpacing) {\n        this.pdfStreamWriter.setWordSpacing(format.wordSpacing);\n      } else {\n        this.pdfStreamWriter.setWordSpacing(0);\n      }\n    }\n\n    return wordSpace;\n  };\n  /**\n   * `Reset` or reinitialize the current graphic value.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.reset = function (size) {\n    this.canvasSize = size;\n    this.streamWriter.clear();\n    this.initialize();\n    this.initializeCoordinates();\n  };\n  /**\n   * Checks whether the line should be `justified`.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.shouldJustify = function (lineInfo, boundsWidth, format) {\n    var line = lineInfo.text;\n    var lineWidth = lineInfo.width;\n    var justifyStyle = format != null && format.alignment === PdfTextAlignment.Justify;\n    var goodWidth = boundsWidth >= 0 && lineWidth < boundsWidth;\n    var symbols = StringTokenizer.spaces;\n    var whitespacesCount = StringTokenizer.getCharsCount(line, symbols);\n    var hasSpaces = whitespacesCount > 0 && line[0] !== StringTokenizer.whiteSpace;\n    var goodLineBreakStyle = (lineInfo.lineType & LineType.LayoutBreak) > 0;\n    /* tslint:disable */\n\n    var shouldJustify = justifyStyle && goodWidth && hasSpaces && (goodLineBreakStyle || format.alignment === PdfTextAlignment.Justify);\n    /* tslint:enable */\n\n    return shouldJustify;\n  };\n  /* tslint:disable */\n\n  /**\n   * Emulates `Underline, Strikeout` of the text if needed.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.underlineStrikeoutText = function (pen, brush, result, font, layoutRectangle, format) {\n    if (font.underline || font.strikeout) {\n      // Calculate line width.\n      var linePen = this.createUnderlineStikeoutPen(pen, brush, font, format);\n\n      if (linePen != null) {\n        // Approximate line positions.\n        var vShift = this.getTextVerticalAlignShift(result.actualSize.height, layoutRectangle.height, format);\n        var underlineYOffset = 0;\n        underlineYOffset = layoutRectangle.y + vShift + font.metrics.getAscent(format) + 1.5 * linePen.width;\n        var strikeoutYOffset = layoutRectangle.y + vShift + font.metrics.getHeight(format) / 2 + 1.5 * linePen.width;\n        var lines = result.lines; // Run through the text and draw lines.\n\n        for (var i = 0, len = result.lineCount; i < len; i++) {\n          var lineInfo = lines[i];\n          var line = lineInfo.text;\n          var lineWidth = lineInfo.width;\n          var hShift = this.getHorizontalAlignShift(lineWidth, layoutRectangle.width, format);\n          var lineIndent = this.getLineIndent(lineInfo, format, layoutRectangle, i === 0);\n          hShift += !this.rightToLeft(format) ? lineIndent : 0;\n          var x1 = layoutRectangle.x + hShift;\n          /* tslint:disable */\n\n          var x2 = !this.shouldJustify(lineInfo, layoutRectangle.width, format) ? x1 + lineWidth - lineIndent : x1 + layoutRectangle.width - lineIndent;\n          /* tslint:enable */\n\n          if (font.underline) {\n            var y = underlineYOffset;\n            this.drawLine(linePen, x1, y, x2, y);\n            underlineYOffset += result.lineHeight;\n          }\n\n          if (font.strikeout) {\n            var y = strikeoutYOffset;\n            this.drawLine(linePen, x1, y, x2, y);\n            strikeoutYOffset += result.lineHeight;\n          }\n\n          if (this.isPointOverload && lines.length > 1) {\n            layoutRectangle.x = 0;\n            layoutRectangle.width = this.clientSize.width;\n          }\n        }\n\n        this.isPointOverload = false;\n      }\n    }\n  };\n  /**\n   * `Creates a pen` for drawing lines in the text.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.createUnderlineStikeoutPen = function (pen, brush, font, format) {\n    // Calculate line width.\n    var lineWidth = font.metrics.getSize(format) / 20;\n    var linePen = null; // Create a pen fo the lines.\n\n    if (pen != null) {\n      linePen = new PdfPen(pen.color, lineWidth);\n    } else if (brush != null) {\n      linePen = new PdfPen(brush, lineWidth);\n    }\n\n    return linePen;\n  };\n  /**\n   * Return `text rendering mode`.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.getTextRenderingMode = function (pen, brush, format) {\n    var tm = TextRenderingMode.None;\n\n    if (pen != null && brush != null) {\n      tm = TextRenderingMode.FillStroke;\n    } else if (pen != null) {\n      tm = TextRenderingMode.Stroke;\n    } else {\n      tm = TextRenderingMode.Fill;\n    }\n\n    if (format != null && format.clipPath) {\n      tm |= TextRenderingMode.ClipFlag;\n    }\n\n    return tm;\n  };\n  /**\n   * Returns `line indent` for the line.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.getLineIndent = function (lineInfo, format, layoutBounds, firstLine) {\n    var lineIndent = 0;\n    var firstParagraphLine = (lineInfo.lineType & LineType.FirstParagraphLine) > 0;\n\n    if (format != null && firstParagraphLine) {\n      lineIndent = firstLine ? format.firstLineIndent : format.paragraphIndent;\n      lineIndent = layoutBounds.width > 0 ? Math.min(layoutBounds.width, lineIndent) : lineIndent;\n    }\n\n    return lineIndent;\n  };\n  /**\n   * Calculates shift value if the line is `horizontaly aligned`.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.getHorizontalAlignShift = function (lineWidth, boundsWidth, format) {\n    var shift = 0;\n\n    if (boundsWidth >= 0 && format != null && format.alignment !== PdfTextAlignment.Left) {\n      switch (format.alignment) {\n        case PdfTextAlignment.Center:\n          shift = (boundsWidth - lineWidth) / 2;\n          break;\n\n        case PdfTextAlignment.Right:\n          shift = boundsWidth - lineWidth;\n          break;\n      }\n    }\n\n    return shift;\n  };\n  /**\n   * Gets or sets the value that indicates `text direction` mode.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.rightToLeft = function (format) {\n    var rtl = format != null && format.rightToLeft;\n\n    if (format !== null && typeof format !== 'undefined') {\n      if (format.textDirection !== PdfTextDirection.None && typeof format.textDirection !== 'undefined') {\n        rtl = true;\n      }\n    }\n\n    return rtl;\n  };\n\n  PdfGraphics.prototype.stateControl = function (pen, brush, font, format) {\n    if (typeof format === 'undefined') {\n      this.stateControl(pen, brush, font, null);\n    } else {\n      var saveState = false;\n\n      if (brush !== null) {\n        var solidBrush = brush;\n\n        if (typeof this.pageLayer !== 'undefined' && this.pageLayer != null) {\n          if (this.colorSpaceChanged === false) {\n            this.lastDocumentCS = this.pageLayer.page.document.colorSpace;\n            this.lastGraphicsCS = this.pageLayer.page.graphics.colorSpace;\n            this.colorSpace = this.pageLayer.page.document.colorSpace;\n            this.currentColorSpace = this.pageLayer.page.document.colorSpace;\n            this.colorSpaceChanged = true;\n          }\n        }\n\n        this.initCurrentColorSpace(this.currentColorSpace);\n      } else if (pen != null) {\n        var pdfPen = pen;\n\n        if (typeof this.pageLayer !== 'undefined' && this.pageLayer != null) {\n          /* tslint:disable */\n          this.colorSpace = this.pageLayer.page.document.colorSpace;\n          this.currentColorSpace = this.pageLayer.page.document.colorSpace;\n        }\n\n        this.initCurrentColorSpace(this.currentColorSpace);\n      }\n\n      this.penControl(pen, saveState);\n      this.brushControl(brush, saveState);\n      this.fontControl(font, format, saveState);\n    }\n  };\n  /**\n   * Initializes the `current color space`.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.initCurrentColorSpace = function (colorspace) {\n    var re = this.getResources.getResources();\n\n    if (!this.bCSInitialized) {\n      this.pdfStreamWriter.setColorSpace('Device' + this.currentColorSpaces[this.currentColorSpace], true);\n      this.pdfStreamWriter.setColorSpace('Device' + this.currentColorSpaces[this.currentColorSpace], false);\n      this.bCSInitialized = true;\n    }\n  };\n  /**\n   * Controls the `pen state`.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.penControl = function (pen, saveState) {\n    if (pen != null) {\n      this.currentPen = pen;\n      this.colorSpace = PdfColorSpace.Rgb;\n      /* tslint:disable */\n\n      pen.monitorChanges(this.currentPen, this.pdfStreamWriter, this.getResources, saveState, this.colorSpace, this.matrix.clone());\n      /* tslint:enable */\n\n      this.currentPen = pen.clone();\n    }\n  };\n  /**\n   * Controls the `brush state`.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.brushControl = function (brush, saveState) {\n    if (brush != null) {\n      this.currentBrush = brush;\n      /* tslint:disable */\n\n      brush.monitorChanges(this.currentBrush, this.pdfStreamWriter, this.getResources, saveState, this.colorSpace);\n      /* tslint:enable */\n\n      this.currentBrush = brush;\n      brush = null;\n    }\n  };\n  /**\n   * Saves the font and other `font settings`.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.fontControl = function (font, format, saveState) {\n    if (font != null) {\n      var curSubSuper = format != null ? format.subSuperScript : PdfSubSuperScript.None;\n      /* tslint:disable */\n\n      var prevSubSuper = this.currentStringFormat != null ? this.currentStringFormat.subSuperScript : PdfSubSuperScript.None;\n      /* tslint:enable */\n\n      if (saveState || font !== this.currentFont || curSubSuper !== prevSubSuper) {\n        var resources = this.getResources.getResources();\n        this.currentFont = font;\n        this.currentStringFormat = format;\n        var size = font.metrics.getSize(format);\n        /* tslint:disable */\n\n        this.isEmfTextScaled = false;\n        var fontName = resources.getName(font);\n        this.pdfStreamWriter.setFont(font, fontName, size);\n      }\n    }\n  };\n\n  PdfGraphics.prototype.setTransparency = function (arg1, arg2, arg3) {\n    if (typeof arg2 === 'undefined') {\n      this.istransparencySet = true;\n      this.setTransparency(arg1, arg1, PdfBlendMode.Normal);\n    } else if (typeof arg2 === 'number' && typeof arg3 === 'undefined') {\n      this.setTransparency(arg1, arg2, PdfBlendMode.Normal);\n    } else {\n      if (this.trasparencies == null) {\n        this.trasparencies = new TemporaryDictionary();\n      }\n\n      var transp = null;\n      var td = new TransparencyData(arg1, arg2, arg3);\n\n      if (this.trasparencies.containsKey(td)) {\n        transp = this.trasparencies.getValue(td);\n      }\n\n      if (transp == null) {\n        transp = new PdfTransparency(arg1, arg2, arg3);\n        this.trasparencies.setValue(td, transp);\n      }\n\n      var resources = this.getResources.getResources();\n      var name_3 = resources.getName(transp);\n      var sw = this.streamWriter;\n      sw.setGraphicsState(name_3);\n    }\n  };\n\n  PdfGraphics.prototype.clipTranslateMargins = function (x, y, left, top, right, bottom) {\n    if (x instanceof RectangleF && typeof y === 'undefined') {\n      this.clipBounds = x;\n      this.pdfStreamWriter.writeComment('Clip margins.');\n      this.pdfStreamWriter.appendRectangle(x);\n      this.pdfStreamWriter.closePath();\n      this.pdfStreamWriter.clipPath(false);\n      this.pdfStreamWriter.writeComment('Translate co-ordinate system.');\n      this.translateTransform(x.x, x.y);\n    } else if (typeof x === 'number') {\n      var clipArea = new RectangleF(left, top, this.size.width - left - right, this.size.height - top - bottom);\n      this.clipBounds = clipArea;\n      this.pdfStreamWriter.writeComment(\"Clip margins.\");\n      this.pdfStreamWriter.appendRectangle(clipArea);\n      this.pdfStreamWriter.closePath();\n      this.pdfStreamWriter.clipPath(false);\n      this.pdfStreamWriter.writeComment(\"Translate co-ordinate system.\");\n      this.translateTransform(x, y);\n    }\n  };\n  /**\n   * `Updates y` co-ordinate.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.updateY = function (y) {\n    return -y;\n  };\n  /**\n   * Used to `translate the transformation`.\n   * ```typescript\n   * // create a new PDF document\n   * let document : PdfDocument = new PdfDocument();\n   * // create a new page\n   * let page1 : PdfPage = document.pages.add();\n   * // set pen\n   * let pen : PdfPen = new PdfPen(new PdfColor(0, 0, 0));\n   * //\n   * // set translate transform\n   * page1.graphics.translateTransform(100, 100);\n   * //\n   * // draw the rectangle after applying translate transform\n   * page1.graphics.drawRectangle(pen, new RectangleF({x : 0, y : 0}, {width : 100, height : 50}));\n   * // save the document.\n   * document.save('output.pdf');\n   * // destroy the document\n   * document.destroy();\n   * ```\n   * @param offsetX The x-coordinate of the translation.\n   * @param offsetY The y-coordinate of the translation.\n   */\n\n\n  PdfGraphics.prototype.translateTransform = function (offsetX, offsetY) {\n    var matrix = new PdfTransformationMatrix();\n    this.getTranslateTransform(offsetX, offsetY, matrix);\n    this.pdfStreamWriter.modifyCtm(matrix);\n    this.matrix.multiply(matrix);\n  };\n  /**\n   * `Translates` coordinates of the input matrix.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.getTranslateTransform = function (x, y, input) {\n    input.translate(x, this.updateY(y));\n    return input;\n  };\n  /* tslint:disable */\n\n  /**\n   * Applies the specified `scaling operation` to the transformation matrix of this Graphics by prepending it to the object's transformation matrix.\n   * ```typescript\n   * // create a new PDF document\n   * let document : PdfDocument = new PdfDocument();\n   * // create a new page\n   * let page1 : PdfPage = document.pages.add();\n   * // create pen\n   * let pen : PdfPen = new PdfPen(new PdfColor(0, 0, 0));\n   * //\n   * // apply scaling trasformation\n   * page1.graphics.scaleTransform(1.5, 2);\n   * //\n   * // draw the rectangle after applying scaling transform\n   * page1.graphics.drawRectangle(pen, new RectangleF({x : 100, y : 100}, {width : 100, height : 50}));\n   * // save the document.\n   * document.save('output.pdf');\n   * // destroy the document\n   * document.destroy();\n   * ```\n   * @param scaleX Scale factor in the x direction.\n   * @param scaleY Scale factor in the y direction.\n   */\n\n  /* tslint:enable */\n\n\n  PdfGraphics.prototype.scaleTransform = function (scaleX, scaleY) {\n    var matrix = new PdfTransformationMatrix();\n    this.getScaleTransform(scaleX, scaleY, matrix);\n    this.pdfStreamWriter.modifyCtm(matrix);\n    this.matrix.multiply(matrix);\n  };\n  /**\n   * `Scales` coordinates of the input matrix.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.getScaleTransform = function (x, y, input) {\n    if (input == null) {\n      input = new PdfTransformationMatrix();\n    }\n\n    input.scale(x, y);\n    return input;\n  };\n  /**\n   * Applies the specified `rotation` to the transformation matrix of this Graphics.\n   * ```typescript\n   * // create a new PDF document\n   * let document : PdfDocument = new PdfDocument();\n   * // create a new page\n   * let page1 : PdfPage = document.pages.add();\n   * // create pen\n   * let pen : PdfPen = new PdfPen(new PdfColor(0, 0, 0));\n   * //\n   * // set RotateTransform with 25 degree of angle\n   * page1.graphics.rotateTransform(25);\n   * //\n   * // draw the rectangle after RotateTransformation\n   * page1.graphics.drawRectangle(pen, new RectangleF({x : 100, y : 100}, {width : 100, height : 50}));\n   * // save the document.\n   * document.save('output.pdf');\n   * // destroy the document\n   * document.destroy();\n   * ```\n   * @param angle Angle of rotation in degrees.\n   */\n\n\n  PdfGraphics.prototype.rotateTransform = function (angle) {\n    var matrix = new PdfTransformationMatrix();\n    this.getRotateTransform(angle, matrix);\n    this.pdfStreamWriter.modifyCtm(matrix);\n    this.matrix.multiply(matrix);\n  };\n  /**\n   * `Initializes coordinate system`.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.initializeCoordinates = function () {\n    // Matrix equation: TM(T-1)=M', where T=[1 0 0 -1 0 h]\n    this.pdfStreamWriter.writeComment('Change co-ordinate system to left/top.'); // Translate co-ordinates only, don't flip.\n\n    if (this.mediaBoxUpperRightBound !== -this.size.height) {\n      if (this.cropBox == null) {\n        if (this.mediaBoxUpperRightBound === this.size.height || this.mediaBoxUpperRightBound === 0) {\n          this.translateTransform(0, this.updateY(this.size.height));\n        } else {\n          this.translateTransform(0, this.updateY(this.mediaBoxUpperRightBound));\n        }\n      }\n    }\n  };\n  /**\n   * `Rotates` coordinates of the input matrix.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.getRotateTransform = function (angle, input) {\n    if (input == null || typeof input === 'undefined') {\n      input = new PdfTransformationMatrix();\n    }\n\n    input.rotate(this.updateY(angle));\n    return input;\n  };\n  /**\n   * `Saves` the current state of this Graphics and identifies the saved state with a GraphicsState.\n   * ```typescript\n   * // create a new PDF document\n   * let document : PdfDocument = new PdfDocument();\n   * // create a new page\n   * let page1 : PdfPage = document.pages.add();\n   * // create pen\n   * let pen : PdfPen = new PdfPen(new PdfColor(0, 0, 0));\n   * //\n   * // save the graphics state\n   * let state1 : PdfGraphicsState = page1.graphics.save();\n   * //\n   * page1.graphics.scaleTransform(1.5, 2);\n   * // draw the rectangle\n   * page1.graphics.drawRectangle(pen, new RectangleF({x : 100, y : 100}, {width : 100, height : 50}));\n   * // restore the graphics state\n   * page1.graphics.restore(state1);\n   * // save the document.\n   * document.save('output.pdf');\n   * // destroy the document\n   * document.destroy();\n   * ```\n   */\n\n\n  PdfGraphics.prototype.save = function () {\n    var state = new PdfGraphicsState(this, this.matrix.clone());\n    state.brush = this.currentBrush;\n    state.pen = this.currentPen;\n    state.font = this.currentFont;\n    state.colorSpace = this.currentColorSpace;\n    state.characterSpacing = this.previousCharacterSpacing;\n    state.wordSpacing = this.previousWordSpacing;\n    state.textScaling = this.previousTextScaling;\n    state.textRenderingMode = this.previousTextRenderingMode;\n    this.graphicsState.push(state);\n    this.pdfStreamWriter.saveGraphicsState();\n    return state;\n  };\n\n  PdfGraphics.prototype.restore = function (state) {\n    if (typeof state === 'undefined') {\n      if (this.graphicsState.length > 0) {\n        this.doRestoreState();\n      }\n    } else {\n      if (this.graphicsState.indexOf(state) !== -1) {\n        for (;;) {\n          if (this.graphicsState.length === 0) {\n            break;\n          }\n\n          var popState = this.doRestoreState();\n\n          if (popState === state) {\n            break;\n          }\n        }\n      }\n    }\n  };\n  /**\n   * `Restores graphics state`.\n   * @private\n   */\n\n\n  PdfGraphics.prototype.doRestoreState = function () {\n    var state = this.graphicsState.pop();\n    this.transformationMatrix = state.matrix;\n    this.currentBrush = state.brush;\n    this.currentPen = state.pen;\n    this.currentFont = state.font;\n    this.currentColorSpace = state.colorSpace;\n    this.previousCharacterSpacing = state.characterSpacing;\n    this.previousWordSpacing = state.wordSpacing;\n    this.previousTextScaling = state.textScaling;\n    this.previousTextRenderingMode = state.textRenderingMode;\n    this.pdfStreamWriter.restoreGraphicsState();\n    return state;\n  }; // Constants\n\n  /**\n   * Specifies the mask of `path type values`.\n   * @private\n   */\n\n\n  PdfGraphics.pathTypesValuesMask = 0xf;\n  /**\n   * Checks whether the object is `transparencyObject`.\n   * @hidden\n   * @private\n   */\n\n  PdfGraphics.transparencyObject = false;\n  return PdfGraphics;\n}();\n\nexport { PdfGraphics };\n/**\n * `GetResourceEventHandler` class is alternate for event handlers and delegates.\n * @private\n * @hidden\n */\n\nvar GetResourceEventHandler =\n/** @class */\nfunction () {\n  /**\n   * Initialize instance of `GetResourceEventHandler` class.\n   * Alternate for event handlers and delegates.\n   * @private\n   */\n  function GetResourceEventHandler(sender) {\n    this.sender = sender;\n  }\n  /**\n   * Return the instance of `PdfResources` class.\n   * @private\n   */\n\n\n  GetResourceEventHandler.prototype.getResources = function () {\n    return this.sender.getResources();\n  };\n\n  return GetResourceEventHandler;\n}();\n\nexport { GetResourceEventHandler };\n\nvar PdfGraphicsState =\n/** @class */\nfunction () {\n  function PdfGraphicsState(graphics, matrix) {\n    /**\n     * Stores `previous rendering mode`.\n     * @default TextRenderingMode.Fill\n     * @private\n     */\n    this.internalTextRenderingMode = TextRenderingMode.Fill;\n    /**\n     * `Previous character spacing` value or 0.\n     * @default 0.0\n     * @private\n     */\n\n    this.internalCharacterSpacing = 0.0;\n    /**\n     * `Previous word spacing` value or 0.\n     * @default 0.0\n     * @private\n     */\n\n    this.internalWordSpacing = 0.0;\n    /**\n     * The previously used `text scaling value`.\n     * @default 100.0\n     * @private\n     */\n\n    this.internalTextScaling = 100.0;\n    /**\n     * `Current color space`.\n     * @default PdfColorSpace.Rgb\n     * @private\n     */\n\n    this.pdfColorSpace = PdfColorSpace.Rgb;\n\n    if (typeof graphics !== 'undefined') {\n      this.pdfGraphics = graphics;\n      this.transformationMatrix = matrix;\n    }\n  }\n\n  Object.defineProperty(PdfGraphicsState.prototype, \"graphics\", {\n    // Properties\n\n    /**\n     * Gets the parent `graphics object`.\n     * @private\n     */\n    get: function () {\n      return this.pdfGraphics;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGraphicsState.prototype, \"matrix\", {\n    /**\n     * Gets the `current matrix`.\n     * @private\n     */\n    get: function () {\n      return this.transformationMatrix;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGraphicsState.prototype, \"characterSpacing\", {\n    /**\n     * Gets or sets the `current character spacing`.\n     * @private\n     */\n    get: function () {\n      return this.internalCharacterSpacing;\n    },\n    set: function (value) {\n      this.internalCharacterSpacing = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGraphicsState.prototype, \"wordSpacing\", {\n    /**\n     * Gets or sets the `word spacing` value.\n     * @private\n     */\n    get: function () {\n      return this.internalWordSpacing;\n    },\n    set: function (value) {\n      this.internalWordSpacing = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGraphicsState.prototype, \"textScaling\", {\n    /**\n     * Gets or sets the `text scaling` value.\n     * @private\n     */\n    get: function () {\n      return this.internalTextScaling;\n    },\n    set: function (value) {\n      this.internalTextScaling = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGraphicsState.prototype, \"pen\", {\n    /**\n     * Gets or sets the `current pen` object.\n     * @private\n     */\n    get: function () {\n      return this.pdfPen;\n    },\n    set: function (value) {\n      this.pdfPen = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGraphicsState.prototype, \"brush\", {\n    /**\n     * Gets or sets the `brush`.\n     * @private\n     */\n    get: function () {\n      return this.pdfBrush;\n    },\n    set: function (value) {\n      this.pdfBrush = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGraphicsState.prototype, \"font\", {\n    /**\n     * Gets or sets the `current font` object.\n     * @private\n     */\n    get: function () {\n      return this.pdfFont;\n    },\n    set: function (value) {\n      this.pdfFont = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGraphicsState.prototype, \"colorSpace\", {\n    /**\n     * Gets or sets the `current color space` value.\n     * @private\n     */\n    get: function () {\n      return this.pdfColorSpace;\n    },\n    set: function (value) {\n      this.pdfColorSpace = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGraphicsState.prototype, \"textRenderingMode\", {\n    /**\n     * Gets or sets the `text rendering mode`.\n     * @private\n     */\n    get: function () {\n      return this.internalTextRenderingMode;\n    },\n    set: function (value) {\n      this.internalTextRenderingMode = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PdfGraphicsState;\n}();\n\nexport { PdfGraphicsState };\n\nvar TransparencyData =\n/** @class */\nfunction () {\n  // Constructors\n\n  /**\n   * Initializes a new instance of the `TransparencyData` class.\n   * @private\n   */\n  function TransparencyData(alphaPen, alphaBrush, blendMode) {\n    this.alphaPen = alphaPen;\n    this.alphaBrush = alphaBrush;\n    this.blendMode = blendMode;\n  }\n\n  return TransparencyData;\n}();","map":{"version":3,"sources":["C:/CN2/workspace-trunk/kain-front-end/node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/pdf-graphics.js"],"names":["PdfColorSpace","TextRenderingMode","PdfFillMode","PdfTextAlignment","PdfVerticalAlignment","PdfBlendMode","PdfSubSuperScript","PdfStreamWriter","PdfPen","PdfBrush","PdfSolidBrush","PdfFont","PdfTransformationMatrix","PointF","SizeF","RectangleF","ProcedureSets","PdfString","PdfStringFormat","TemporaryDictionary","PdfTransparency","PdfStringLayouter","LineType","DictionaryProperties","StringTokenizer","PdfAutomaticFieldInfoCollection","PdfAutomaticFieldInfo","Operators","UnicodeTrueTypeFont","InternalEnum","RtlRenderer","PdfTextDirection","PdfGraphics","arg1","arg2","arg3","currentColorSpace","Rgb","previousTextRenderingMode","Fill","previousCharacterSpacing","previousWordSpacing","previousTextScaling","procedureSets","isNormalRender","isUseFontSize","isItalic","isEmfTextScaled","isEmf","isEmfPlus","isBaselineFormat","emfScalingFactor","colorSpaceChanged","dictionaryProperties","isOverloadWithPosition","isPointOverload","currentColorSpaces","isImageOptimized","graphicsState","istransparencySet","internalAutomaticFields","startCutIndex","getResources","canvasSize","pdfStreamWriter","initialize","Object","defineProperty","prototype","get","pdfStringLayoutResult","enumerable","configurable","internalMediaBoxUpperRightBound","set","value","clipBounds","width","height","transformationMatrix","pageLayer","page","bStateSaved","currentPen","currentBrush","currentFont","bCSInitialized","currentStringFormat","size","requireProcedureSet","pdf","drawPdfTemplate","template","location","Error","scaleX","scaleY","bNeedScale","state","save","matrix","getTranslateTransform","x","y","getScaleTransform","modifyCtm","resources","name_1","getName","executeObject","restore","g","graphics","index","automaticFields","length","fieldInfo","newLocation","scalingX","scalingY","add","field","dictionary","modify","imageB","imageC","imageI","text","drawString","arg4","arg5","arg6","arg7","arg8","arg9","clientSize","temparg3","temparg4","temparg5","temparg6","temparg7","temparg8","temparg9","layouter","result","layout","empty","rect","checkCorrectLayoutRectangle","actualSize","drawStringLayoutResult","drawLine","temparg2","stateControl","sw","streamWriter","beginPath","appendLineSegment","strokePath","drawRectangle","color","isEmpty","temparg1","appendRectangle","drawPath","Winding","isPen","isBrush","isEvenOdd","Alternate","fillStrokePath","endPath","fillPath","drawImage","physicalDimension","write","document","name_2","setResources","restoreState","newLine","resource","getLineBounds","lineIndex","font","layoutRectangle","format","bounds","lineCount","line","lines","vShift","getTextVerticalAlignShift","lineHeight","lineWidth","hShift","getHorizontalAlignShift","lineIndent","getLineIndent","rightToLeft","shouldJustify","textSize","layoutedRectangle","alignment","Center","Right","lineAlignment","Middle","Bottom","setLayer","layer","beginSave","pageSave","i","performDraw","pen","brush","applyStringSettings","textScaling","horizontalScalingFactor","setTextScaling","lineSpacing","subScript","subSuperScript","SubScript","shift","metrics","getDescent","getAscent","startNextLine","setLeading","resultHeight","remainingString","j","drawLayoutResult","underlineStrikeoutText","getNextPage","section","currentPage","nextPage","indexOf","count","getPages","setClip","rectangle","mode","clipPath","setLineWidth","tm","getTextRenderingMode","beginText","setTextRenderingMode","cs","characterSpacing","setCharacterSpacing","ws","wordSpacing","setWordSpacing","textHeight","boundsHeight","Top","vAlignShift","ttfFont","unicode","isUnicode","embed","isEmbedFont","len","lineInfo","hAlignShift","drawUnicodeLine","drawAsciiLine","endText","justifyLine","showNextLineText","rtl","useWordSpace","Justify","rtlRender","textDirection","None","blocks","rightAlign","RightToLeft","words","splitLayout","drawUnicodeBlocks","breakUnicodeLine","tokens","token","convertToUnicode","getUnicodeString","xShift","firstLineIndent","paragraphIndent","spaceWidth","getCharWidth","whiteSpace","wordSpace","word","tokenWidth","measureString","val","showText","split","converted","encode","ForceEncoding","Ascii","fontInternal","ttfReader","setSymbols","convertString","bytes","toUnicodeArray","byteToString","boundsWidth","hasWordSpacing","symbols","spaces","whitespacesCount","getCharsCount","difference","reset","clear","initializeCoordinates","justifyStyle","goodWidth","hasSpaces","goodLineBreakStyle","lineType","LayoutBreak","underline","strikeout","linePen","createUnderlineStikeoutPen","underlineYOffset","strikeoutYOffset","getHeight","x1","x2","getSize","FillStroke","Stroke","ClipFlag","layoutBounds","firstLine","firstParagraphLine","FirstParagraphLine","Math","min","Left","saveState","solidBrush","lastDocumentCS","colorSpace","lastGraphicsCS","initCurrentColorSpace","pdfPen","penControl","brushControl","fontControl","colorspace","re","setColorSpace","monitorChanges","clone","curSubSuper","prevSubSuper","fontName","setFont","setTransparency","Normal","trasparencies","transp","td","TransparencyData","containsKey","getValue","setValue","name_3","setGraphicsState","clipTranslateMargins","left","top","right","bottom","writeComment","closePath","translateTransform","clipArea","updateY","offsetX","offsetY","multiply","input","translate","scaleTransform","scale","rotateTransform","angle","getRotateTransform","mediaBoxUpperRightBound","cropBox","rotate","PdfGraphicsState","textRenderingMode","push","saveGraphicsState","doRestoreState","popState","pop","restoreGraphicsState","pathTypesValuesMask","transparencyObject","GetResourceEventHandler","sender","internalTextRenderingMode","internalCharacterSpacing","internalWordSpacing","internalTextScaling","pdfColorSpace","pdfGraphics","pdfBrush","pdfFont","alphaPen","alphaBrush","blendMode"],"mappings":"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","sourcesContent":["/**\n * PdfGraphics.ts class for EJ2-PDF\n */\nimport { PdfColorSpace, TextRenderingMode, PdfFillMode, PdfTextAlignment } from './enum';\nimport { PdfVerticalAlignment, PdfBlendMode } from './enum';\nimport { PdfSubSuperScript } from './fonts/enum';\nimport { PdfStreamWriter } from './../input-output/pdf-stream-writer';\nimport { PdfPen } from './pdf-pen';\nimport { PdfBrush } from './brushes/pdf-brush';\nimport { PdfSolidBrush } from './brushes/pdf-solid-brush';\nimport { PdfFont } from './fonts/pdf-font';\nimport { PdfTransformationMatrix } from './pdf-transformation-matrix';\nimport { PointF, SizeF, RectangleF } from './../drawing/pdf-drawing';\nimport { ProcedureSets } from './constants';\nimport { PdfString } from './../primitives/pdf-string';\nimport { PdfStringFormat } from './fonts/pdf-string-format';\nimport { TemporaryDictionary } from './../collections/object-object-pair/dictionary';\nimport { PdfTransparency } from './pdf-transparency';\nimport { PdfStringLayouter, LineType } from './fonts/string-layouter';\nimport { DictionaryProperties } from './../input-output/pdf-dictionary-properties';\nimport { StringTokenizer } from './fonts/string-tokenizer';\nimport { PdfAutomaticFieldInfoCollection } from './../document/automatic-fields/automatic-field-info-collection';\nimport { PdfAutomaticFieldInfo } from './../document/automatic-fields/automatic-field-info';\nimport { Operators } from './../input-output/pdf-operators';\nimport { UnicodeTrueTypeFont } from './fonts/unicode-true-type-font';\nimport { InternalEnum } from './../primitives/pdf-string';\nimport { RtlRenderer } from './fonts/rtl-renderer';\nimport { PdfTextDirection } from './enum';\n/**\n * `PdfGraphics` class represents a graphics context of the objects.\n * It's used for performing all the graphics operations.\n * ```typescript\n * // create a new PDF document\n * let document : PdfDocument = new PdfDocument();\n * // add a new page to the document\n * let page1 : PdfPage = document.pages.add();\n * // set the font\n * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n * // create black brush\n * let blackBrush : PdfSolidBrush = new PdfSolidBrush(new PdfColor(0, 0, 0));\n * //\n * //graphics of the page\n * let page1Graphics : PdfGraphics = page1.graphics;\n * // draw the text on the page1 graphics\n * page1Graphics.drawString('Hello World', font, blackBrush, new PointF(0, 0));\n * //\n * // save the document\n * document.save('output.pdf');\n * // destroy the document\n * document.destroy();\n * ```\n */\nvar PdfGraphics = /** @class */ (function () {\n    function PdfGraphics(arg1, arg2, arg3) {\n        /**\n         * Represents the `Current color space`.\n         * @private\n         */\n        this.currentColorSpace = PdfColorSpace.Rgb;\n        /**\n         * Stores `previous rendering mode`.\n         * @private\n         */\n        this.previousTextRenderingMode = TextRenderingMode.Fill;\n        /**\n         * Previous `character spacing` value or 0.\n         * @private\n         */\n        this.previousCharacterSpacing = 0.0;\n        /**\n         * Previous `word spacing` value or 0.\n         * @private\n         */\n        this.previousWordSpacing = 0.0;\n        /**\n         * The `previously used text scaling` value.\n         * @private\n         */\n        this.previousTextScaling = 100.0;\n        /**\n         * Instance of `ProcedureSets` class.\n         * @private\n         */\n        this.procedureSets = new ProcedureSets();\n        /**\n         * To check wihether it is a `direct text rendering`.\n         * @default true\n         * @private\n         */\n        this.isNormalRender = true;\n        /**\n         * check whether to `use font size` to calculate the shift.\n         * @default false\n         * @private\n         */\n        this.isUseFontSize = false;\n        /**\n         * check whether the font is in `italic type`.\n         * @default false\n         * @private\n         */\n        this.isItalic = false;\n        /**\n         * Check whether it is an `emf Text Matrix`.\n         * @default false\n         * @private\n         */\n        this.isEmfTextScaled = false;\n        /**\n         * Check whether it is an `emf` call.\n         * @default false\n         * @private\n         */\n        this.isEmf = false;\n        /**\n         * Check whether it is an `emf plus` call.\n         * @default false\n         * @private\n         */\n        this.isEmfPlus = false;\n        /**\n         * Check whether it is in `base line format`.\n         * @default true\n         * @private\n         */\n        this.isBaselineFormat = true;\n        /**\n         * Emf Text `Scaling Factor`.\n         * @private\n         */\n        this.emfScalingFactor = new SizeF(0, 0);\n        /**\n         * To check whether the `last color space` of document and garphics is saved.\n         * @private\n         */\n        this.colorSpaceChanged = false;\n        /**\n         * Stores an instance of `DictionaryProperties`.\n         * @private\n         */\n        this.dictionaryProperties = new DictionaryProperties();\n        /**\n         * Checks whether the x co-ordinate is need to set as client size or not.\n         * @hidden\n         * @private\n         */\n        this.isOverloadWithPosition = false;\n        /**\n         * Checks whether the x co-ordinate is need to set as client size or not.\n         * @hidden\n         * @private\n         */\n        this.isPointOverload = false;\n        /**\n         * Current colorspaces.\n         * @hidden\n         * @private\n         */\n        this.currentColorSpaces = ['RGB', 'CMYK', 'GrayScale', 'Indexed'];\n        /**\n         * Checks the current image `is optimized` or not.\n         * @default false.\n         * @private\n         */\n        this.isImageOptimized = false;\n        /**\n         * Stores the `graphics states`.\n         * @private\n         */\n        this.graphicsState = [];\n        /**\n         * Indicates whether the object `had trasparency`.\n         * @default false\n         * @private\n         */\n        this.istransparencySet = false;\n        /**\n         * Stores the instance of `PdfAutomaticFieldInfoCollection` class .\n         * @default null\n         * @private\n         */\n        this.internalAutomaticFields = null;\n        /**\n         * Stores the index of the start line that should draw with in the next page.\n         * @private\n         */\n        this.startCutIndex = -1;\n        this.getResources = arg2;\n        this.canvasSize = arg1;\n        if (arg3 instanceof PdfStreamWriter) {\n            this.pdfStreamWriter = arg3;\n        }\n        else {\n            this.pdfStreamWriter = new PdfStreamWriter(arg3);\n        }\n        this.initialize();\n    }\n    Object.defineProperty(PdfGraphics.prototype, \"stringLayoutResult\", {\n        //  Properties\n        /**\n         * Returns the `result` after drawing string.\n         * @private\n         */\n        get: function () {\n            return this.pdfStringLayoutResult;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGraphics.prototype, \"size\", {\n        /**\n         * Gets the `size` of the canvas.\n         * @private\n         */\n        get: function () {\n            return this.canvasSize;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGraphics.prototype, \"mediaBoxUpperRightBound\", {\n        /**\n         * Gets and Sets the value of `MediaBox upper right bound`.\n         * @private\n         */\n        get: function () {\n            if (typeof this.internalMediaBoxUpperRightBound === 'undefined') {\n                this.internalMediaBoxUpperRightBound = 0;\n            }\n            return this.internalMediaBoxUpperRightBound;\n        },\n        set: function (value) {\n            this.internalMediaBoxUpperRightBound = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGraphics.prototype, \"clientSize\", {\n        /**\n         * Gets the `size` of the canvas reduced by margins and page templates.\n         * @private\n         */\n        get: function () {\n            return new SizeF(this.clipBounds.width, this.clipBounds.height);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGraphics.prototype, \"colorSpace\", {\n        /**\n         * Gets or sets the current `color space` of the document\n         * @private\n         */\n        get: function () {\n            return this.currentColorSpace;\n        },\n        set: function (value) {\n            this.currentColorSpace = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGraphics.prototype, \"streamWriter\", {\n        /**\n         * Gets the `stream writer`.\n         * @private\n         */\n        get: function () {\n            return this.pdfStreamWriter;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGraphics.prototype, \"matrix\", {\n        /**\n         * Gets the `transformation matrix` reflecting current transformation.\n         * @private\n         */\n        get: function () {\n            if (this.transformationMatrix == null) {\n                this.transformationMatrix = new PdfTransformationMatrix();\n            }\n            return this.transformationMatrix;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGraphics.prototype, \"layer\", {\n        /**\n         * Gets the `layer` for the graphics, if exists.\n         * @private\n         */\n        get: function () {\n            return this.pageLayer;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGraphics.prototype, \"page\", {\n        /**\n         * Gets the `page` for this graphics, if exists.\n         * @private\n         */\n        get: function () {\n            return this.pageLayer.page;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGraphics.prototype, \"automaticFields\", {\n        get: function () {\n            if (this.internalAutomaticFields == null || typeof this.internalAutomaticFields === 'undefined') {\n                this.internalAutomaticFields = new PdfAutomaticFieldInfoCollection();\n            }\n            return this.internalAutomaticFields;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    //Implementation\n    /**\n     * `Initializes` this instance.\n     * @private\n     */\n    PdfGraphics.prototype.initialize = function () {\n        this.bStateSaved = false;\n        this.currentPen = null;\n        this.currentBrush = null;\n        this.currentFont = null;\n        this.currentColorSpace = PdfColorSpace.Rgb;\n        this.bCSInitialized = false;\n        this.transformationMatrix = null;\n        this.previousTextRenderingMode = (-1); //.Fill;\n        this.previousCharacterSpacing = -1.0;\n        this.previousWordSpacing = -1.0;\n        this.previousTextScaling = -100.0;\n        // this.m_trasparencies = null;\n        this.currentStringFormat = null;\n        this.clipBounds = new RectangleF(new PointF(0, 0), this.size);\n        this.getResources.getResources().requireProcedureSet(this.procedureSets.pdf);\n    };\n    PdfGraphics.prototype.drawPdfTemplate = function (template, location, size) {\n        if (typeof size === 'undefined') {\n            if (template == null) {\n                throw Error('ArgumentNullException-template');\n            }\n            this.drawPdfTemplate(template, location, template.size);\n        }\n        else {\n            // let crossTable : PdfCrossTable = null;\n            // if (this.pageLayer != null) {\n            //     crossTable = (this.page as PdfPage).section.parentDocument.crossTable;\n            // }\n            if (template == null) {\n                throw Error('ArgumentNullException-template');\n            }\n            var scaleX = (template.width > 0) ? size.width / template.width : 1;\n            var scaleY = (template.height > 0) ? size.height / template.height : 1;\n            var bNeedScale = !(scaleX === 1 && scaleY === 1);\n            // Save state.\n            var state = this.save();\n            // Take into consideration that rect location is bottom/left.\n            var matrix = new PdfTransformationMatrix();\n            if (this.pageLayer != null) {\n                this.getTranslateTransform(location.x, location.y + size.height, matrix);\n            }\n            if (bNeedScale) {\n                this.getScaleTransform(scaleX, scaleY, matrix);\n            }\n            this.pdfStreamWriter.modifyCtm(matrix);\n            // Output template.\n            var resources = this.getResources.getResources();\n            var name_1 = resources.getName(template);\n            this.pdfStreamWriter.executeObject(name_1);\n            // Restore state.\n            this.restore(state);\n            //Transfer automatic fields from template.\n            var g = template.graphics;\n            if (g != null) {\n                for (var index = 0; index < g.automaticFields.automaticFields.length; index++) {\n                    var fieldInfo = g.automaticFields.automaticFields[index];\n                    var newLocation = new PointF(fieldInfo.location.x + location.x, fieldInfo.location.y + location.y);\n                    var scalingX = template.size.width == 0 ? 0 : size.width / template.size.width;\n                    var scalingY = template.size.height == 0 ? 0 : size.height / template.size.height;\n                    this.automaticFields.add(new PdfAutomaticFieldInfo(fieldInfo.field, newLocation, scalingX, scalingY));\n                    this.page.dictionary.modify();\n                }\n            }\n            this.getResources.getResources().requireProcedureSet(this.procedureSets.imageB);\n            this.getResources.getResources().requireProcedureSet(this.procedureSets.imageC);\n            this.getResources.getResources().requireProcedureSet(this.procedureSets.imageI);\n            this.getResources.getResources().requireProcedureSet(this.procedureSets.text);\n        }\n    };\n    /* tslint:disable */\n    /**\n     * @public\n     */\n    PdfGraphics.prototype.drawString = function (arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9) {\n        if (typeof arg1 === 'string' && arg2 instanceof PdfFont && (arg3 instanceof PdfPen || arg3 === null) && (arg4 instanceof PdfBrush || arg4 === null) && typeof arg5 === 'number' && typeof arg6 === 'number' && (arg7 instanceof PdfStringFormat || arg7 === null) && typeof arg8 === 'undefined') {\n            this.isOverloadWithPosition = true;\n            this.drawString(arg1, arg2, arg3, arg4, arg5, arg6, (this.clientSize.width - arg5), 0, arg7);\n        }\n        else {\n            var temparg3 = arg3;\n            var temparg4 = arg4;\n            var temparg5 = arg5;\n            var temparg6 = arg6;\n            var temparg7 = arg7;\n            var temparg8 = arg8;\n            var temparg9 = arg9;\n            var layouter = new PdfStringLayouter();\n            var result = layouter.layout(arg1, arg2, temparg9, new SizeF(temparg7, temparg8), this.isOverloadWithPosition, this.clientSize);\n            if (!result.empty) {\n                var rect = this.checkCorrectLayoutRectangle(result.actualSize, temparg5, temparg6, temparg9);\n                if (temparg7 <= 0) {\n                    temparg5 = rect.x;\n                    temparg7 = rect.width;\n                }\n                if (temparg8 <= 0) {\n                    temparg6 = rect.y;\n                    temparg8 = rect.height;\n                }\n                this.drawStringLayoutResult(result, arg2, temparg3, temparg4, new RectangleF(temparg5, temparg6, temparg7, temparg8), temparg9);\n                this.isEmfTextScaled = false;\n                this.emfScalingFactor = new SizeF(0, 0);\n            }\n            this.getResources.getResources().requireProcedureSet(this.procedureSets.text);\n            this.isNormalRender = true;\n            this.pdfStringLayoutResult = result;\n            this.isUseFontSize = false;\n        }\n    }; /* tslint:enable */\n    PdfGraphics.prototype.drawLine = function (arg1, arg2, arg3, arg4, arg5) {\n        if (arg2 instanceof PointF) {\n            var temparg2 = arg2;\n            var temparg3 = arg3;\n            this.drawLine(arg1, temparg2.x, temparg2.y, temparg3.x, temparg3.y);\n        }\n        else {\n            var temparg2 = arg2;\n            var temparg3 = arg3;\n            var temparg4 = arg4;\n            var temparg5 = arg5;\n            this.stateControl(arg1, null, null);\n            var sw = this.streamWriter;\n            sw.beginPath(temparg2, temparg3);\n            sw.appendLineSegment(temparg4, temparg5);\n            sw.strokePath();\n            this.getResources.getResources().requireProcedureSet(this.procedureSets.pdf);\n        }\n    };\n    /* tslint:disable */\n    PdfGraphics.prototype.drawRectangle = function (arg1, arg2, arg3, arg4, arg5, arg6) {\n        if (arg1 instanceof PdfPen && typeof arg2 === 'number') {\n            var temparg3 = arg3;\n            this.drawRectangle(arg1, null, arg2, temparg3, arg4, arg5);\n        }\n        else if (arg1 instanceof PdfBrush && typeof arg2 === 'number') {\n            var temparg3 = arg3;\n            this.drawRectangle(null, arg1, arg2, temparg3, arg4, arg5);\n        }\n        else {\n            var temparg3 = arg3;\n            var temparg4 = arg4;\n            var temparg5 = arg5;\n            var temparg6 = arg6;\n            if (arg2 instanceof PdfSolidBrush && arg2.color.isEmpty) {\n                arg2 = null;\n            }\n            var temparg1 = arg1;\n            var temparg2 = arg2;\n            this.stateControl(temparg1, temparg2, null);\n            this.streamWriter.appendRectangle(temparg3, temparg4, temparg5, temparg6);\n            this.drawPath(temparg1, temparg2, false);\n        }\n    };\n    PdfGraphics.prototype.drawPath = function (arg1, arg2, arg3, arg4) {\n        if (typeof arg3 === 'boolean') {\n            var temparg3 = arg3;\n            this.drawPath(arg1, arg2, PdfFillMode.Winding, temparg3);\n        }\n        else {\n            var temparg3 = arg3;\n            var temparg4 = arg4;\n            var isPen = arg1 != null;\n            var isBrush = arg2 != null;\n            var isEvenOdd = (temparg3 === PdfFillMode.Alternate);\n            if (isPen && isBrush) {\n                this.streamWriter.fillStrokePath(isEvenOdd);\n            }\n            else if (!isPen && !isBrush) {\n                this.streamWriter.endPath();\n            }\n            else if (isPen) {\n                this.streamWriter.strokePath();\n            }\n            else {\n                this.streamWriter.fillPath(isEvenOdd);\n            }\n        }\n    };\n    /* tslint:disable */\n    PdfGraphics.prototype.drawImage = function (arg1, arg2, arg3, arg4, arg5) {\n        if (typeof arg2 === 'number' && typeof arg3 === 'number' && typeof arg4 === 'undefined') {\n            var size = arg1.physicalDimension;\n            this.drawImage(arg1, arg2, arg3, size.width, size.height);\n        }\n        else {\n            var temparg2 = arg2;\n            var temparg3 = arg3;\n            var temparg4 = arg4;\n            var temparg5 = arg5;\n            arg1.save();\n            var matrix = new PdfTransformationMatrix();\n            this.getTranslateTransform(temparg2, (temparg3 + temparg5), matrix);\n            this.getScaleTransform(arg4, arg5, matrix);\n            this.pdfStreamWriter.write('q');\n            this.pdfStreamWriter.modifyCtm(matrix);\n            // Output template.\n            var resources = this.getResources.getResources();\n            if (typeof this.pageLayer !== 'undefined' && this.page != null) {\n                resources.document = this.page.document;\n            }\n            var name_2 = resources.getName(arg1);\n            if (typeof this.pageLayer !== 'undefined') {\n                this.page.setResources(resources);\n            }\n            this.pdfStreamWriter.executeObject(name_2);\n            this.pdfStreamWriter.write(Operators.restoreState);\n            this.pdfStreamWriter.write(Operators.newLine);\n            var resource = this.getResources.getResources();\n            resource.requireProcedureSet(this.procedureSets.imageB);\n            resource.requireProcedureSet(this.procedureSets.imageC);\n            resource.requireProcedureSet(this.procedureSets.imageI);\n            resource.requireProcedureSet(this.procedureSets.text);\n        }\n    };\n    //Implementation\n    /* tslint:disable */\n    /**\n     * Returns `bounds` of the line info.\n     * @private\n     */\n    PdfGraphics.prototype.getLineBounds = function (lineIndex, result, font, layoutRectangle, format) {\n        var bounds;\n        if (!result.empty && lineIndex < result.lineCount && lineIndex >= 0) {\n            var line = result.lines[lineIndex];\n            var vShift = this.getTextVerticalAlignShift(result.actualSize.height, layoutRectangle.height, format);\n            var y = vShift + layoutRectangle.y + (result.lineHeight * lineIndex);\n            var lineWidth = line.width;\n            var hShift = this.getHorizontalAlignShift(lineWidth, layoutRectangle.width, format);\n            var lineIndent = this.getLineIndent(line, format, layoutRectangle, (lineIndex === 0));\n            hShift += (!this.rightToLeft(format)) ? lineIndent : 0;\n            var x = layoutRectangle.x + hShift;\n            /* tslint:disable */\n            var width = (!this.shouldJustify(line, layoutRectangle.width, format)) ? lineWidth - lineIndent : layoutRectangle.width - lineIndent; /* tslint:enable */\n            var height = result.lineHeight;\n            bounds = new RectangleF(x, y, width, height);\n        }\n        else {\n            bounds = new RectangleF(0, 0, 0, 0);\n        }\n        return bounds;\n    };\n    /**\n     * Creates `lay outed rectangle` depending on the text settings.\n     * @private\n     */\n    PdfGraphics.prototype.checkCorrectLayoutRectangle = function (textSize, x, y, format) {\n        var layoutedRectangle = new RectangleF(x, y, textSize.width, textSize.width);\n        if (format != null) {\n            switch (format.alignment) {\n                case PdfTextAlignment.Center:\n                    layoutedRectangle.x -= layoutedRectangle.width / 2;\n                    break;\n                case PdfTextAlignment.Right:\n                    layoutedRectangle.x -= layoutedRectangle.width;\n                    break;\n            }\n            switch (format.lineAlignment) {\n                case PdfVerticalAlignment.Middle:\n                    layoutedRectangle.y -= layoutedRectangle.height / 2;\n                    break;\n                case PdfVerticalAlignment.Bottom:\n                    layoutedRectangle.y -= layoutedRectangle.height;\n                    break;\n            }\n        }\n        return layoutedRectangle;\n    };\n    /**\n     * Sets the `layer` for the graphics.\n     * @private\n     */\n    PdfGraphics.prototype.setLayer = function (layer) {\n        this.pageLayer = layer;\n        var page = layer.page;\n        if (page != null && typeof page !== 'undefined') {\n            page.beginSave = this.pageSave;\n        }\n    };\n    /**\n     * Adding page number field before page saving.\n     * @private\n     */\n    /* tslint:disable */\n    PdfGraphics.prototype.pageSave = function (page) {\n        if (page.graphics.automaticFields != null) {\n            for (var i = 0; i < page.graphics.automaticFields.automaticFields.length; i++) {\n                var fieldInfo = page.graphics.automaticFields.automaticFields[i];\n                fieldInfo.field.performDraw(page.graphics, fieldInfo.location, fieldInfo.scalingX, fieldInfo.scalingY);\n            }\n        }\n    };\n    /**\n     * `Draws a layout result`.\n     * @private\n     */\n    PdfGraphics.prototype.drawStringLayoutResult = function (result, font, pen, brush, layoutRectangle, format) {\n        if (!result.empty) {\n            this.applyStringSettings(font, pen, brush, format, layoutRectangle);\n            // Set text scaling\n            var textScaling = (format != null) ? format.horizontalScalingFactor : 100.0;\n            if (textScaling !== this.previousTextScaling && !this.isEmfTextScaled) {\n                this.pdfStreamWriter.setTextScaling(textScaling);\n                this.previousTextScaling = textScaling;\n            }\n            var height = (format == null || format.lineSpacing === 0) ? font.height : format.lineSpacing + font.height;\n            var subScript = (format != null && format.subSuperScript === PdfSubSuperScript.SubScript);\n            var shift = 0;\n            shift = (subScript) ? height - (font.height + font.metrics.getDescent(format)) : (height - font.metrics.getAscent(format));\n            this.shift = shift;\n            this.pdfStreamWriter.startNextLine(layoutRectangle.x, layoutRectangle.y - shift);\n            this.pdfStreamWriter.setLeading(+height);\n            var resultHeight = 0;\n            var remainingString = '';\n            for (var i = 0; i < result.lines.length; i++) {\n                resultHeight += result.lineHeight;\n                if ((layoutRectangle.y + resultHeight) > this.clientSize.height) {\n                    this.startCutIndex = i;\n                    break;\n                }\n            }\n            for (var j = this.startCutIndex; (j < result.lines.length && j >= 0); j++) {\n                remainingString += result.lines[j].text;\n            }\n            var bounds = new RectangleF(layoutRectangle.x, layoutRectangle.y, layoutRectangle.width, layoutRectangle.height);\n            this.drawLayoutResult(result, font, format, layoutRectangle);\n            this.underlineStrikeoutText(pen, brush, result, font, bounds, format);\n            this.isEmfPlus = false;\n            this.isUseFontSize = false;\n            if (this.startCutIndex !== -1) {\n                var page = this.getNextPage();\n                page.graphics.drawString(remainingString, font, pen, brush, layoutRectangle.x, 0, layoutRectangle.width, 0, format);\n            }\n        }\n        else {\n            throw new Error('ArgumentNullException:result');\n        }\n    };\n    /**\n     * Gets the `next page`.\n     * @private\n     */\n    PdfGraphics.prototype.getNextPage = function () {\n        var section = this.currentPage.section;\n        var nextPage = null;\n        var index = section.indexOf(this.currentPage);\n        if (index === section.count - 1) {\n            nextPage = section.add();\n        }\n        else {\n            nextPage = section.getPages()[index + 1];\n        }\n        return nextPage;\n    };\n    PdfGraphics.prototype.setClip = function (rectangle, mode) {\n        if (typeof mode === 'undefined') {\n            this.setClip(rectangle, PdfFillMode.Winding);\n        }\n        else {\n            this.pdfStreamWriter.appendRectangle(rectangle);\n            this.pdfStreamWriter.clipPath((mode === PdfFillMode.Alternate));\n        }\n    };\n    /**\n     * Applies all the `text settings`.\n     * @private\n     */\n    PdfGraphics.prototype.applyStringSettings = function (font, pen, brush, format, bounds) {\n        var setLineWidth = false;\n        var tm = this.getTextRenderingMode(pen, brush, format);\n        this.stateControl(pen, brush, font, format);\n        this.pdfStreamWriter.beginText();\n        if ((tm) !== this.previousTextRenderingMode) {\n            this.pdfStreamWriter.setTextRenderingMode(tm);\n            this.previousTextRenderingMode = tm;\n        }\n        // Set character spacing.\n        var cs = (format != null) ? format.characterSpacing : 0;\n        if (cs !== this.previousCharacterSpacing && !this.isEmfTextScaled) {\n            this.pdfStreamWriter.setCharacterSpacing(cs);\n            this.previousCharacterSpacing = cs;\n        }\n        // Set word spacing.\n        // NOTE: it works only if the space code is equal to 32 (0x20).\n        var ws = (format != null) ? format.wordSpacing : 0;\n        if (ws !== this.previousWordSpacing) {\n            this.pdfStreamWriter.setWordSpacing(ws);\n            this.previousWordSpacing = ws;\n        }\n    };\n    /**\n     * Calculates `shift value` if the text is vertically aligned.\n     * @private\n     */\n    PdfGraphics.prototype.getTextVerticalAlignShift = function (textHeight, boundsHeight, format) {\n        var shift = 0;\n        if (boundsHeight >= 0 && format != null && format.lineAlignment !== PdfVerticalAlignment.Top) {\n            switch (format.lineAlignment) {\n                case PdfVerticalAlignment.Middle:\n                    shift = (boundsHeight - textHeight) / 2;\n                    break;\n                case PdfVerticalAlignment.Bottom:\n                    shift = boundsHeight - textHeight;\n                    break;\n            }\n        }\n        return shift;\n    };\n    /* tslint:disable */\n    /**\n     * `Draws layout result`.\n     * @private\n     */\n    PdfGraphics.prototype.drawLayoutResult = function (result, font, format, layoutRectangle) {\n        var vAlignShift = this.getTextVerticalAlignShift(result.actualSize.height, layoutRectangle.height, format);\n        if (vAlignShift !== 0) {\n            this.pdfStreamWriter.startNextLine(0, vAlignShift);\n        }\n        var ttfFont = font;\n        var unicode = (ttfFont != null && ttfFont.isUnicode);\n        var embed = (ttfFont != null && ttfFont.isEmbedFont);\n        var lines = result.lines;\n        for (var i = 0, len = lines.length; (i < len && i !== this.startCutIndex); i++) {\n            var lineInfo = lines[i];\n            var line = lineInfo.text;\n            var lineWidth = lineInfo.width;\n            var hAlignShift = this.getHorizontalAlignShift(lineWidth, layoutRectangle.width, format);\n            var lineIndent = this.getLineIndent(lineInfo, format, layoutRectangle, (i === 0));\n            hAlignShift += (!this.rightToLeft(format)) ? lineIndent : 0;\n            if (hAlignShift !== 0 && !this.isEmfTextScaled) {\n                this.pdfStreamWriter.startNextLine(hAlignShift, 0);\n            }\n            if (unicode) {\n                this.drawUnicodeLine(lineInfo, layoutRectangle, font, format);\n            }\n            else {\n                this.drawAsciiLine(lineInfo, layoutRectangle, font, format);\n            }\n            if (hAlignShift !== 0 && !this.isEmfTextScaled) {\n                this.pdfStreamWriter.startNextLine(-hAlignShift, 0);\n            }\n            if (this.isOverloadWithPosition && lines.length > 1) {\n                this.pdfStreamWriter.startNextLine(-(layoutRectangle.x), 0);\n                layoutRectangle.x = 0;\n                layoutRectangle.width = this.clientSize.width;\n                this.isOverloadWithPosition = false;\n                this.isPointOverload = true;\n            }\n        }\n        this.getResources.getResources().requireProcedureSet(this.procedureSets.text);\n        if (vAlignShift !== 0) {\n            this.pdfStreamWriter.startNextLine(0, -(vAlignShift - result.lineHeight));\n        }\n        this.pdfStreamWriter.endText();\n    };\n    /**\n     * `Draws Ascii line`.\n     * @private\n     */\n    PdfGraphics.prototype.drawAsciiLine = function (lineInfo, layoutRectangle, font, format) {\n        this.justifyLine(lineInfo, layoutRectangle.width, format);\n        var value = '';\n        if (lineInfo.text.indexOf('(') !== -1 || lineInfo.text.indexOf(')') !== -1) {\n            for (var i = 0; i < lineInfo.text.length; i++) {\n                if (lineInfo.text[i] === '(') {\n                    value += '\\\\\\(';\n                }\n                else if (lineInfo.text[i] === ')') {\n                    value += '\\\\\\)';\n                }\n                else {\n                    value += lineInfo.text[i];\n                }\n            }\n        }\n        if (value === '') {\n            value = lineInfo.text;\n        }\n        var line = '(' + value + ')';\n        this.pdfStreamWriter.showNextLineText(new PdfString(line));\n    };\n    /**\n     * Draws unicode line.\n     * @private\n     */\n    PdfGraphics.prototype.drawUnicodeLine = function (lineInfo, layoutRectangle, font, format) {\n        var line = lineInfo.text;\n        var lineWidth = lineInfo.width;\n        var rtl = (format !== null && format.rightToLeft);\n        var useWordSpace = (format !== null && (format.wordSpacing !== 0 || format.alignment === PdfTextAlignment.Justify));\n        var ttfFont = font;\n        var wordSpacing = this.justifyLine(lineInfo, layoutRectangle.width, format);\n        var rtlRender = new RtlRenderer();\n        if (rtl || (format !== null && format.textDirection !== PdfTextDirection.None)) {\n            var blocks = null;\n            var rightAlign = (format !== null && format.alignment === PdfTextAlignment.Right);\n            if (format !== null && format.textDirection !== PdfTextDirection.None) {\n                /* tslint:disable-next-line:max-line-length */\n                blocks = rtlRender.layout(line, ttfFont, (format.textDirection === PdfTextDirection.RightToLeft) ? true : false, useWordSpace, format);\n            }\n            else {\n                blocks = rtlRender.layout(line, ttfFont, rightAlign, useWordSpace, format);\n            }\n            var words = null;\n            if (blocks.length > 1) {\n                if (format !== null && format.textDirection !== PdfTextDirection.None) {\n                    /* tslint:disable-next-line:max-line-length */\n                    words = rtlRender.splitLayout(line, ttfFont, (format.textDirection === PdfTextDirection.RightToLeft) ? true : false, useWordSpace, format);\n                }\n                else {\n                    words = rtlRender.splitLayout(line, ttfFont, rightAlign, useWordSpace, format);\n                }\n            }\n            else {\n                words = [line];\n            }\n            this.drawUnicodeBlocks(blocks, words, ttfFont, format, wordSpacing);\n        }\n        else {\n            if (useWordSpace) {\n                var result = this.breakUnicodeLine(line, ttfFont, null);\n                var blocks = result.tokens;\n                var words = result.words;\n                this.drawUnicodeBlocks(blocks, words, ttfFont, format, wordSpacing);\n            }\n            else {\n                var token = this.convertToUnicode(line, ttfFont);\n                var value = this.getUnicodeString(token);\n                this.streamWriter.showNextLineText(value);\n            }\n        }\n    };\n    /**\n     * Draws array of unicode tokens.\n     */\n    /* tslint:disable */\n    PdfGraphics.prototype.drawUnicodeBlocks = function (blocks, words, font, format, wordSpacing) {\n        /* tslint:enable */\n        if (blocks == null) {\n            throw new Error('Argument Null Exception : blocks');\n        }\n        if (words == null) {\n            throw new Error('Argument Null Exception : words');\n        }\n        if (font == null) {\n            throw new Error('Argument Null Exception : font');\n        }\n        this.streamWriter.startNextLine();\n        var x = 0;\n        var xShift = 0;\n        var firstLineIndent = 0;\n        var paragraphIndent = 0;\n        try {\n            if (format !== null) {\n                firstLineIndent = format.firstLineIndent;\n                paragraphIndent = format.paragraphIndent;\n                format.firstLineIndent = 0;\n                format.paragraphIndent = 0;\n            }\n            var spaceWidth = font.getCharWidth(StringTokenizer.whiteSpace, format) + wordSpacing;\n            var characterSpacing = (format != null) ? format.characterSpacing : 0;\n            var wordSpace = (format !== null && wordSpacing === 0) ? format.wordSpacing : 0;\n            spaceWidth += characterSpacing + wordSpace;\n            for (var i = 0; i < blocks.length; i++) {\n                var token = blocks[i];\n                var word = words[i];\n                var tokenWidth = 0;\n                if (x !== 0) {\n                    this.streamWriter.startNextLine(x, 0);\n                }\n                if (word.length > 0) {\n                    tokenWidth += /*Utils.Round(*/ font.measureString(word, format).width /*)*/;\n                    tokenWidth += characterSpacing;\n                    var val = this.getUnicodeString(token);\n                    this.streamWriter.showText(val);\n                }\n                if (i !== blocks.length - 1) {\n                    x = tokenWidth + spaceWidth;\n                    xShift += x;\n                }\n            }\n            // Rolback current line position.\n            if (xShift > 0) {\n                this.streamWriter.startNextLine(-xShift, 0);\n            }\n        }\n        finally {\n            if (format !== null) {\n                format.firstLineIndent = firstLineIndent;\n                format.paragraphIndent = paragraphIndent;\n            }\n        }\n    };\n    /**\n     * Breakes the unicode line to the words and converts symbols to glyphs.\n     */\n    PdfGraphics.prototype.breakUnicodeLine = function (line, ttfFont, words) {\n        if (line === null) {\n            throw new Error('Argument Null Exception : line');\n        }\n        words = line.split(null);\n        var tokens = [];\n        for (var i = 0; i < words.length; i++) {\n            // Reconvert string according to unicode standard.\n            var word = words[i];\n            var token = this.convertToUnicode(word, ttfFont);\n            tokens[i] = token;\n        }\n        return { tokens: tokens, words: words };\n    };\n    /**\n     * Creates PdfString from the unicode text.\n     */\n    PdfGraphics.prototype.getUnicodeString = function (token) {\n        if (token === null) {\n            throw new Error('Argument Null Exception : token');\n        }\n        var val = new PdfString(token);\n        val.converted = true;\n        val.encode = InternalEnum.ForceEncoding.Ascii;\n        return val;\n    };\n    /**\n     * Converts to unicode format.\n     */\n    PdfGraphics.prototype.convertToUnicode = function (text, ttfFont) {\n        var token = null;\n        if (text == null) {\n            throw new Error('Argument Null Exception : text');\n        }\n        if (ttfFont == null) {\n            throw new Error('Argument Null Exception : ttfFont');\n        }\n        if (ttfFont.fontInternal instanceof UnicodeTrueTypeFont) {\n            var ttfReader = ttfFont.fontInternal.ttfReader;\n            ttfFont.setSymbols(text);\n            token = ttfReader.convertString(text);\n            var bytes = PdfString.toUnicodeArray(token, false);\n            token = PdfString.byteToString(bytes);\n        }\n        return token;\n    };\n    /**\n     * `Justifies` the line if needed.\n     * @private\n     */\n    PdfGraphics.prototype.justifyLine = function (lineInfo, boundsWidth, format) {\n        var line = lineInfo.text;\n        var lineWidth = lineInfo.width;\n        var shouldJustify = this.shouldJustify(lineInfo, boundsWidth, format);\n        var hasWordSpacing = (format != null && format.wordSpacing !== 0);\n        var symbols = StringTokenizer.spaces;\n        var whitespacesCount = StringTokenizer.getCharsCount(line, symbols);\n        var wordSpace = 0;\n        if (shouldJustify) {\n            // Correct line width.\n            if (hasWordSpacing) {\n                lineWidth -= (whitespacesCount * format.wordSpacing);\n            }\n            var difference = boundsWidth - lineWidth;\n            wordSpace = difference / whitespacesCount;\n            this.pdfStreamWriter.setWordSpacing(wordSpace);\n        }\n        else {\n            // If there is justifying, but the line shouldn't be justified, restore default word spacing.\n            if (hasWordSpacing) {\n                this.pdfStreamWriter.setWordSpacing(format.wordSpacing);\n            }\n            else {\n                this.pdfStreamWriter.setWordSpacing(0);\n            }\n        }\n        return wordSpace;\n    };\n    /**\n     * `Reset` or reinitialize the current graphic value.\n     * @private\n     */\n    PdfGraphics.prototype.reset = function (size) {\n        this.canvasSize = size;\n        this.streamWriter.clear();\n        this.initialize();\n        this.initializeCoordinates();\n    };\n    /**\n     * Checks whether the line should be `justified`.\n     * @private\n     */\n    PdfGraphics.prototype.shouldJustify = function (lineInfo, boundsWidth, format) {\n        var line = lineInfo.text;\n        var lineWidth = lineInfo.width;\n        var justifyStyle = (format != null && format.alignment === PdfTextAlignment.Justify);\n        var goodWidth = (boundsWidth >= 0 && lineWidth < boundsWidth);\n        var symbols = StringTokenizer.spaces;\n        var whitespacesCount = StringTokenizer.getCharsCount(line, symbols);\n        var hasSpaces = (whitespacesCount > 0 && line[0] !== StringTokenizer.whiteSpace);\n        var goodLineBreakStyle = ((lineInfo.lineType & LineType.LayoutBreak) > 0);\n        /* tslint:disable */\n        var shouldJustify = (justifyStyle && goodWidth && hasSpaces && (goodLineBreakStyle || format.alignment === PdfTextAlignment.Justify)); /* tslint:enable */\n        return shouldJustify;\n    };\n    /* tslint:disable */\n    /**\n     * Emulates `Underline, Strikeout` of the text if needed.\n     * @private\n     */\n    PdfGraphics.prototype.underlineStrikeoutText = function (pen, brush, result, font, layoutRectangle, format) {\n        if (font.underline || font.strikeout) {\n            // Calculate line width.\n            var linePen = this.createUnderlineStikeoutPen(pen, brush, font, format);\n            if (linePen != null) {\n                // Approximate line positions.\n                var vShift = this.getTextVerticalAlignShift(result.actualSize.height, layoutRectangle.height, format);\n                var underlineYOffset = 0;\n                underlineYOffset = layoutRectangle.y + vShift + font.metrics.getAscent(format) + 1.5 * linePen.width;\n                var strikeoutYOffset = layoutRectangle.y + vShift + font.metrics.getHeight(format) / 2 + 1.5 * linePen.width;\n                var lines = result.lines;\n                // Run through the text and draw lines.\n                for (var i = 0, len = result.lineCount; i < len; i++) {\n                    var lineInfo = lines[i];\n                    var line = lineInfo.text;\n                    var lineWidth = lineInfo.width;\n                    var hShift = this.getHorizontalAlignShift(lineWidth, layoutRectangle.width, format);\n                    var lineIndent = this.getLineIndent(lineInfo, format, layoutRectangle, (i === 0));\n                    hShift += (!this.rightToLeft(format)) ? lineIndent : 0;\n                    var x1 = layoutRectangle.x + hShift;\n                    /* tslint:disable */\n                    var x2 = (!this.shouldJustify(lineInfo, layoutRectangle.width, format)) ? x1 + lineWidth - lineIndent : x1 + layoutRectangle.width - lineIndent;\n                    /* tslint:enable */\n                    if (font.underline) {\n                        var y = underlineYOffset;\n                        this.drawLine(linePen, x1, y, x2, y);\n                        underlineYOffset += result.lineHeight;\n                    }\n                    if (font.strikeout) {\n                        var y = strikeoutYOffset;\n                        this.drawLine(linePen, x1, y, x2, y);\n                        strikeoutYOffset += result.lineHeight;\n                    }\n                    if (this.isPointOverload && lines.length > 1) {\n                        layoutRectangle.x = 0;\n                        layoutRectangle.width = this.clientSize.width;\n                    }\n                }\n                this.isPointOverload = false;\n            }\n        }\n    };\n    /**\n     * `Creates a pen` for drawing lines in the text.\n     * @private\n     */\n    PdfGraphics.prototype.createUnderlineStikeoutPen = function (pen, brush, font, format) {\n        // Calculate line width.\n        var lineWidth = font.metrics.getSize(format) / 20;\n        var linePen = null;\n        // Create a pen fo the lines.\n        if (pen != null) {\n            linePen = new PdfPen(pen.color, lineWidth);\n        }\n        else if (brush != null) {\n            linePen = new PdfPen(brush, lineWidth);\n        }\n        return linePen;\n    };\n    /**\n     * Return `text rendering mode`.\n     * @private\n     */\n    PdfGraphics.prototype.getTextRenderingMode = function (pen, brush, format) {\n        var tm = TextRenderingMode.None;\n        if (pen != null && brush != null) {\n            tm = TextRenderingMode.FillStroke;\n        }\n        else if (pen != null) {\n            tm = TextRenderingMode.Stroke;\n        }\n        else {\n            tm = TextRenderingMode.Fill;\n        }\n        if (format != null && format.clipPath) {\n            tm |= TextRenderingMode.ClipFlag;\n        }\n        return tm;\n    };\n    /**\n     * Returns `line indent` for the line.\n     * @private\n     */\n    PdfGraphics.prototype.getLineIndent = function (lineInfo, format, layoutBounds, firstLine) {\n        var lineIndent = 0;\n        var firstParagraphLine = ((lineInfo.lineType & LineType.FirstParagraphLine) > 0);\n        if (format != null && firstParagraphLine) {\n            lineIndent = (firstLine) ? format.firstLineIndent : format.paragraphIndent;\n            lineIndent = (layoutBounds.width > 0) ? Math.min(layoutBounds.width, lineIndent) : lineIndent;\n        }\n        return lineIndent;\n    };\n    /**\n     * Calculates shift value if the line is `horizontaly aligned`.\n     * @private\n     */\n    PdfGraphics.prototype.getHorizontalAlignShift = function (lineWidth, boundsWidth, format) {\n        var shift = 0;\n        if (boundsWidth >= 0 && format != null && format.alignment !== PdfTextAlignment.Left) {\n            switch (format.alignment) {\n                case PdfTextAlignment.Center:\n                    shift = (boundsWidth - lineWidth) / 2;\n                    break;\n                case PdfTextAlignment.Right:\n                    shift = boundsWidth - lineWidth;\n                    break;\n            }\n        }\n        return shift;\n    };\n    /**\n     * Gets or sets the value that indicates `text direction` mode.\n     * @private\n     */\n    PdfGraphics.prototype.rightToLeft = function (format) {\n        var rtl = (format != null && format.rightToLeft);\n        if (format !== null && typeof format !== 'undefined') {\n            if (format.textDirection !== PdfTextDirection.None && typeof format.textDirection !== 'undefined') {\n                rtl = true;\n            }\n        }\n        return rtl;\n    };\n    PdfGraphics.prototype.stateControl = function (pen, brush, font, format) {\n        if (typeof format === 'undefined') {\n            this.stateControl(pen, brush, font, null);\n        }\n        else {\n            var saveState = false;\n            if (brush !== null) {\n                var solidBrush = brush;\n                if (typeof this.pageLayer !== 'undefined' && this.pageLayer != null) {\n                    if (this.colorSpaceChanged === false) {\n                        this.lastDocumentCS = this.pageLayer.page.document.colorSpace;\n                        this.lastGraphicsCS = this.pageLayer.page.graphics.colorSpace;\n                        this.colorSpace = this.pageLayer.page.document.colorSpace;\n                        this.currentColorSpace = this.pageLayer.page.document.colorSpace;\n                        this.colorSpaceChanged = true;\n                    }\n                }\n                this.initCurrentColorSpace(this.currentColorSpace);\n            }\n            else if (pen != null) {\n                var pdfPen = pen;\n                if (typeof this.pageLayer !== 'undefined' && this.pageLayer != null) {\n                    /* tslint:disable */\n                    this.colorSpace = this.pageLayer.page.document.colorSpace;\n                    this.currentColorSpace = this.pageLayer.page.document.colorSpace;\n                }\n                this.initCurrentColorSpace(this.currentColorSpace);\n            }\n            this.penControl(pen, saveState);\n            this.brushControl(brush, saveState);\n            this.fontControl(font, format, saveState);\n        }\n    };\n    /**\n     * Initializes the `current color space`.\n     * @private\n     */\n    PdfGraphics.prototype.initCurrentColorSpace = function (colorspace) {\n        var re = this.getResources.getResources();\n        if (!this.bCSInitialized) {\n            this.pdfStreamWriter.setColorSpace('Device' + this.currentColorSpaces[this.currentColorSpace], true);\n            this.pdfStreamWriter.setColorSpace('Device' + this.currentColorSpaces[this.currentColorSpace], false);\n            this.bCSInitialized = true;\n        }\n    };\n    /**\n     * Controls the `pen state`.\n     * @private\n     */\n    PdfGraphics.prototype.penControl = function (pen, saveState) {\n        if (pen != null) {\n            this.currentPen = pen;\n            this.colorSpace = PdfColorSpace.Rgb;\n            /* tslint:disable */\n            pen.monitorChanges(this.currentPen, this.pdfStreamWriter, this.getResources, saveState, this.colorSpace, this.matrix.clone());\n            /* tslint:enable */\n            this.currentPen = pen.clone();\n        }\n    };\n    /**\n     * Controls the `brush state`.\n     * @private\n     */\n    PdfGraphics.prototype.brushControl = function (brush, saveState) {\n        if (brush != null) {\n            this.currentBrush = brush;\n            /* tslint:disable */\n            brush.monitorChanges(this.currentBrush, this.pdfStreamWriter, this.getResources, saveState, this.colorSpace);\n            /* tslint:enable */\n            this.currentBrush = brush;\n            brush = null;\n        }\n    };\n    /**\n     * Saves the font and other `font settings`.\n     * @private\n     */\n    PdfGraphics.prototype.fontControl = function (font, format, saveState) {\n        if (font != null) {\n            var curSubSuper = (format != null) ? format.subSuperScript : PdfSubSuperScript.None;\n            /* tslint:disable */\n            var prevSubSuper = (this.currentStringFormat != null) ? this.currentStringFormat.subSuperScript : PdfSubSuperScript.None; /* tslint:enable */\n            if (saveState || font !== this.currentFont || curSubSuper !== prevSubSuper) {\n                var resources = this.getResources.getResources();\n                this.currentFont = font;\n                this.currentStringFormat = format;\n                var size = font.metrics.getSize(format);\n                /* tslint:disable */\n                this.isEmfTextScaled = false;\n                var fontName = resources.getName(font);\n                this.pdfStreamWriter.setFont(font, fontName, size);\n            }\n        }\n    };\n    PdfGraphics.prototype.setTransparency = function (arg1, arg2, arg3) {\n        if (typeof arg2 === 'undefined') {\n            this.istransparencySet = true;\n            this.setTransparency(arg1, arg1, PdfBlendMode.Normal);\n        }\n        else if (typeof arg2 === 'number' && typeof arg3 === 'undefined') {\n            this.setTransparency(arg1, arg2, PdfBlendMode.Normal);\n        }\n        else {\n            if (this.trasparencies == null) {\n                this.trasparencies = new TemporaryDictionary();\n            }\n            var transp = null;\n            var td = new TransparencyData(arg1, arg2, arg3);\n            if (this.trasparencies.containsKey(td)) {\n                transp = this.trasparencies.getValue(td);\n            }\n            if (transp == null) {\n                transp = new PdfTransparency(arg1, arg2, arg3);\n                this.trasparencies.setValue(td, transp);\n            }\n            var resources = this.getResources.getResources();\n            var name_3 = resources.getName(transp);\n            var sw = this.streamWriter;\n            sw.setGraphicsState(name_3);\n        }\n    };\n    PdfGraphics.prototype.clipTranslateMargins = function (x, y, left, top, right, bottom) {\n        if (x instanceof RectangleF && typeof y === 'undefined') {\n            this.clipBounds = x;\n            this.pdfStreamWriter.writeComment('Clip margins.');\n            this.pdfStreamWriter.appendRectangle(x);\n            this.pdfStreamWriter.closePath();\n            this.pdfStreamWriter.clipPath(false);\n            this.pdfStreamWriter.writeComment('Translate co-ordinate system.');\n            this.translateTransform(x.x, x.y);\n        }\n        else if (typeof x === 'number') {\n            var clipArea = new RectangleF(left, top, this.size.width - left - right, this.size.height - top - bottom);\n            this.clipBounds = clipArea;\n            this.pdfStreamWriter.writeComment(\"Clip margins.\");\n            this.pdfStreamWriter.appendRectangle(clipArea);\n            this.pdfStreamWriter.closePath();\n            this.pdfStreamWriter.clipPath(false);\n            this.pdfStreamWriter.writeComment(\"Translate co-ordinate system.\");\n            this.translateTransform(x, y);\n        }\n    };\n    /**\n     * `Updates y` co-ordinate.\n     * @private\n     */\n    PdfGraphics.prototype.updateY = function (y) {\n        return -y;\n    };\n    /**\n     * Used to `translate the transformation`.\n     * ```typescript\n     * // create a new PDF document\n     * let document : PdfDocument = new PdfDocument();\n     * // create a new page\n     * let page1 : PdfPage = document.pages.add();\n     * // set pen\n     * let pen : PdfPen = new PdfPen(new PdfColor(0, 0, 0));\n     * //\n     * // set translate transform\n     * page1.graphics.translateTransform(100, 100);\n     * //\n     * // draw the rectangle after applying translate transform\n     * page1.graphics.drawRectangle(pen, new RectangleF({x : 0, y : 0}, {width : 100, height : 50}));\n     * // save the document.\n     * document.save('output.pdf');\n     * // destroy the document\n     * document.destroy();\n     * ```\n     * @param offsetX The x-coordinate of the translation.\n     * @param offsetY The y-coordinate of the translation.\n     */\n    PdfGraphics.prototype.translateTransform = function (offsetX, offsetY) {\n        var matrix = new PdfTransformationMatrix();\n        this.getTranslateTransform(offsetX, offsetY, matrix);\n        this.pdfStreamWriter.modifyCtm(matrix);\n        this.matrix.multiply(matrix);\n    };\n    /**\n     * `Translates` coordinates of the input matrix.\n     * @private\n     */\n    PdfGraphics.prototype.getTranslateTransform = function (x, y, input) {\n        input.translate(x, this.updateY(y));\n        return input;\n    };\n    /* tslint:disable */\n    /**\n     * Applies the specified `scaling operation` to the transformation matrix of this Graphics by prepending it to the object's transformation matrix.\n     * ```typescript\n     * // create a new PDF document\n     * let document : PdfDocument = new PdfDocument();\n     * // create a new page\n     * let page1 : PdfPage = document.pages.add();\n     * // create pen\n     * let pen : PdfPen = new PdfPen(new PdfColor(0, 0, 0));\n     * //\n     * // apply scaling trasformation\n     * page1.graphics.scaleTransform(1.5, 2);\n     * //\n     * // draw the rectangle after applying scaling transform\n     * page1.graphics.drawRectangle(pen, new RectangleF({x : 100, y : 100}, {width : 100, height : 50}));\n     * // save the document.\n     * document.save('output.pdf');\n     * // destroy the document\n     * document.destroy();\n     * ```\n     * @param scaleX Scale factor in the x direction.\n     * @param scaleY Scale factor in the y direction.\n     */\n    /* tslint:enable */\n    PdfGraphics.prototype.scaleTransform = function (scaleX, scaleY) {\n        var matrix = new PdfTransformationMatrix();\n        this.getScaleTransform(scaleX, scaleY, matrix);\n        this.pdfStreamWriter.modifyCtm(matrix);\n        this.matrix.multiply(matrix);\n    };\n    /**\n     * `Scales` coordinates of the input matrix.\n     * @private\n     */\n    PdfGraphics.prototype.getScaleTransform = function (x, y, input) {\n        if (input == null) {\n            input = new PdfTransformationMatrix();\n        }\n        input.scale(x, y);\n        return input;\n    };\n    /**\n     * Applies the specified `rotation` to the transformation matrix of this Graphics.\n     * ```typescript\n     * // create a new PDF document\n     * let document : PdfDocument = new PdfDocument();\n     * // create a new page\n     * let page1 : PdfPage = document.pages.add();\n     * // create pen\n     * let pen : PdfPen = new PdfPen(new PdfColor(0, 0, 0));\n     * //\n     * // set RotateTransform with 25 degree of angle\n     * page1.graphics.rotateTransform(25);\n     * //\n     * // draw the rectangle after RotateTransformation\n     * page1.graphics.drawRectangle(pen, new RectangleF({x : 100, y : 100}, {width : 100, height : 50}));\n     * // save the document.\n     * document.save('output.pdf');\n     * // destroy the document\n     * document.destroy();\n     * ```\n     * @param angle Angle of rotation in degrees.\n     */\n    PdfGraphics.prototype.rotateTransform = function (angle) {\n        var matrix = new PdfTransformationMatrix();\n        this.getRotateTransform(angle, matrix);\n        this.pdfStreamWriter.modifyCtm(matrix);\n        this.matrix.multiply(matrix);\n    };\n    /**\n     * `Initializes coordinate system`.\n     * @private\n     */\n    PdfGraphics.prototype.initializeCoordinates = function () {\n        // Matrix equation: TM(T-1)=M', where T=[1 0 0 -1 0 h]\n        this.pdfStreamWriter.writeComment('Change co-ordinate system to left/top.');\n        // Translate co-ordinates only, don't flip.\n        if (this.mediaBoxUpperRightBound !== -(this.size.height)) {\n            if (this.cropBox == null) {\n                if (this.mediaBoxUpperRightBound === this.size.height || this.mediaBoxUpperRightBound === 0) {\n                    this.translateTransform(0, this.updateY(this.size.height));\n                }\n                else {\n                    this.translateTransform(0, this.updateY(this.mediaBoxUpperRightBound));\n                }\n            }\n        }\n    };\n    /**\n     * `Rotates` coordinates of the input matrix.\n     * @private\n     */\n    PdfGraphics.prototype.getRotateTransform = function (angle, input) {\n        if (input == null || typeof input === 'undefined') {\n            input = new PdfTransformationMatrix();\n        }\n        input.rotate(this.updateY(angle));\n        return input;\n    };\n    /**\n     * `Saves` the current state of this Graphics and identifies the saved state with a GraphicsState.\n     * ```typescript\n     * // create a new PDF document\n     * let document : PdfDocument = new PdfDocument();\n     * // create a new page\n     * let page1 : PdfPage = document.pages.add();\n     * // create pen\n     * let pen : PdfPen = new PdfPen(new PdfColor(0, 0, 0));\n     * //\n     * // save the graphics state\n     * let state1 : PdfGraphicsState = page1.graphics.save();\n     * //\n     * page1.graphics.scaleTransform(1.5, 2);\n     * // draw the rectangle\n     * page1.graphics.drawRectangle(pen, new RectangleF({x : 100, y : 100}, {width : 100, height : 50}));\n     * // restore the graphics state\n     * page1.graphics.restore(state1);\n     * // save the document.\n     * document.save('output.pdf');\n     * // destroy the document\n     * document.destroy();\n     * ```\n     */\n    PdfGraphics.prototype.save = function () {\n        var state = new PdfGraphicsState(this, this.matrix.clone());\n        state.brush = this.currentBrush;\n        state.pen = this.currentPen;\n        state.font = this.currentFont;\n        state.colorSpace = this.currentColorSpace;\n        state.characterSpacing = this.previousCharacterSpacing;\n        state.wordSpacing = this.previousWordSpacing;\n        state.textScaling = this.previousTextScaling;\n        state.textRenderingMode = this.previousTextRenderingMode;\n        this.graphicsState.push(state);\n        this.pdfStreamWriter.saveGraphicsState();\n        return state;\n    };\n    PdfGraphics.prototype.restore = function (state) {\n        if (typeof state === 'undefined') {\n            if (this.graphicsState.length > 0) {\n                this.doRestoreState();\n            }\n        }\n        else {\n            if (this.graphicsState.indexOf(state) !== -1) {\n                for (;;) {\n                    if (this.graphicsState.length === 0) {\n                        break;\n                    }\n                    var popState = this.doRestoreState();\n                    if (popState === state) {\n                        break;\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * `Restores graphics state`.\n     * @private\n     */\n    PdfGraphics.prototype.doRestoreState = function () {\n        var state = this.graphicsState.pop();\n        this.transformationMatrix = state.matrix;\n        this.currentBrush = state.brush;\n        this.currentPen = state.pen;\n        this.currentFont = state.font;\n        this.currentColorSpace = state.colorSpace;\n        this.previousCharacterSpacing = state.characterSpacing;\n        this.previousWordSpacing = state.wordSpacing;\n        this.previousTextScaling = state.textScaling;\n        this.previousTextRenderingMode = state.textRenderingMode;\n        this.pdfStreamWriter.restoreGraphicsState();\n        return state;\n    };\n    // Constants\n    /**\n     * Specifies the mask of `path type values`.\n     * @private\n     */\n    PdfGraphics.pathTypesValuesMask = 0xf;\n    /**\n     * Checks whether the object is `transparencyObject`.\n     * @hidden\n     * @private\n     */\n    PdfGraphics.transparencyObject = false;\n    return PdfGraphics;\n}());\nexport { PdfGraphics };\n/**\n * `GetResourceEventHandler` class is alternate for event handlers and delegates.\n * @private\n * @hidden\n */\nvar GetResourceEventHandler = /** @class */ (function () {\n    /**\n     * Initialize instance of `GetResourceEventHandler` class.\n     * Alternate for event handlers and delegates.\n     * @private\n     */\n    function GetResourceEventHandler(sender) {\n        this.sender = sender;\n    }\n    /**\n     * Return the instance of `PdfResources` class.\n     * @private\n     */\n    GetResourceEventHandler.prototype.getResources = function () {\n        return this.sender.getResources();\n    };\n    return GetResourceEventHandler;\n}());\nexport { GetResourceEventHandler };\nvar PdfGraphicsState = /** @class */ (function () {\n    function PdfGraphicsState(graphics, matrix) {\n        /**\n         * Stores `previous rendering mode`.\n         * @default TextRenderingMode.Fill\n         * @private\n         */\n        this.internalTextRenderingMode = TextRenderingMode.Fill;\n        /**\n         * `Previous character spacing` value or 0.\n         * @default 0.0\n         * @private\n         */\n        this.internalCharacterSpacing = 0.0;\n        /**\n         * `Previous word spacing` value or 0.\n         * @default 0.0\n         * @private\n         */\n        this.internalWordSpacing = 0.0;\n        /**\n         * The previously used `text scaling value`.\n         * @default 100.0\n         * @private\n         */\n        this.internalTextScaling = 100.0;\n        /**\n         * `Current color space`.\n         * @default PdfColorSpace.Rgb\n         * @private\n         */\n        this.pdfColorSpace = PdfColorSpace.Rgb;\n        if (typeof graphics !== 'undefined') {\n            this.pdfGraphics = graphics;\n            this.transformationMatrix = matrix;\n        }\n    }\n    Object.defineProperty(PdfGraphicsState.prototype, \"graphics\", {\n        // Properties\n        /**\n         * Gets the parent `graphics object`.\n         * @private\n         */\n        get: function () {\n            return this.pdfGraphics;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGraphicsState.prototype, \"matrix\", {\n        /**\n         * Gets the `current matrix`.\n         * @private\n         */\n        get: function () {\n            return this.transformationMatrix;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGraphicsState.prototype, \"characterSpacing\", {\n        /**\n         * Gets or sets the `current character spacing`.\n         * @private\n         */\n        get: function () {\n            return this.internalCharacterSpacing;\n        },\n        set: function (value) {\n            this.internalCharacterSpacing = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGraphicsState.prototype, \"wordSpacing\", {\n        /**\n         * Gets or sets the `word spacing` value.\n         * @private\n         */\n        get: function () {\n            return this.internalWordSpacing;\n        },\n        set: function (value) {\n            this.internalWordSpacing = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGraphicsState.prototype, \"textScaling\", {\n        /**\n         * Gets or sets the `text scaling` value.\n         * @private\n         */\n        get: function () {\n            return this.internalTextScaling;\n        },\n        set: function (value) {\n            this.internalTextScaling = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGraphicsState.prototype, \"pen\", {\n        /**\n         * Gets or sets the `current pen` object.\n         * @private\n         */\n        get: function () {\n            return this.pdfPen;\n        },\n        set: function (value) {\n            this.pdfPen = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGraphicsState.prototype, \"brush\", {\n        /**\n         * Gets or sets the `brush`.\n         * @private\n         */\n        get: function () {\n            return this.pdfBrush;\n        },\n        set: function (value) {\n            this.pdfBrush = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGraphicsState.prototype, \"font\", {\n        /**\n         * Gets or sets the `current font` object.\n         * @private\n         */\n        get: function () {\n            return this.pdfFont;\n        },\n        set: function (value) {\n            this.pdfFont = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGraphicsState.prototype, \"colorSpace\", {\n        /**\n         * Gets or sets the `current color space` value.\n         * @private\n         */\n        get: function () {\n            return this.pdfColorSpace;\n        },\n        set: function (value) {\n            this.pdfColorSpace = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGraphicsState.prototype, \"textRenderingMode\", {\n        /**\n         * Gets or sets the `text rendering mode`.\n         * @private\n         */\n        get: function () {\n            return this.internalTextRenderingMode;\n        },\n        set: function (value) {\n            this.internalTextRenderingMode = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return PdfGraphicsState;\n}());\nexport { PdfGraphicsState };\nvar TransparencyData = /** @class */ (function () {\n    // Constructors\n    /**\n     * Initializes a new instance of the `TransparencyData` class.\n     * @private\n     */\n    function TransparencyData(alphaPen, alphaBrush, blendMode) {\n        this.alphaPen = alphaPen;\n        this.alphaBrush = alphaBrush;\n        this.blendMode = blendMode;\n    }\n    return TransparencyData;\n}());\n"]},"metadata":{},"sourceType":"module"}