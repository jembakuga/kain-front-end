{"ast":null,"code":"import { isNullOrUndefined, isBlazor } from '@syncfusion/ej2-base';\nimport { Internationalization, setCulture } from '@syncfusion/ej2-base';\n/**\n * ValueFormatter class to globalize the value.\n * @hidden\n */\n\nvar ValueFormatter =\n/** @class */\nfunction () {\n  function ValueFormatter(cultureName) {\n    this.intl = new Internationalization();\n\n    if (!isNullOrUndefined(cultureName)) {\n      this.intl.culture = cultureName;\n    }\n  }\n\n  ValueFormatter.prototype.getFormatFunction = function (format) {\n    if (format.type) {\n      if (isBlazor()) {\n        var isServerRendered = 'isServerRendered';\n        format[isServerRendered] = true;\n      }\n\n      return this.intl.getDateFormat(format);\n    } else {\n      return this.intl.getNumberFormat(format);\n    }\n  };\n\n  ValueFormatter.prototype.getParserFunction = function (format) {\n    if (format.type) {\n      if (isBlazor()) {\n        var isServerRendered = 'isServerRendered';\n        format[isServerRendered] = true;\n      }\n\n      return this.intl.getDateParser(format);\n    } else {\n      return this.intl.getNumberParser(format);\n    }\n  };\n\n  ValueFormatter.prototype.fromView = function (value, format, type) {\n    if ((type === 'date' || type === 'datetime' || type === 'number') && !isNullOrUndefined(format)) {\n      return format(value);\n    } else {\n      return value;\n    }\n  };\n\n  ValueFormatter.prototype.toView = function (value, format) {\n    var result = value;\n\n    if (!isNullOrUndefined(format) && !isNullOrUndefined(value)) {\n      result = format(value);\n    }\n\n    return result;\n  };\n\n  ValueFormatter.prototype.setCulture = function (cultureName) {\n    if (!isNullOrUndefined(cultureName)) {\n      setCulture(cultureName);\n    }\n  };\n\n  return ValueFormatter;\n}();\n\nexport { ValueFormatter };","map":{"version":3,"sources":["C:/CN2/workspace-trunk/kain-front-end/node_modules/@syncfusion/ej2-grids/src/grid/services/value-formatter.js"],"names":["isNullOrUndefined","isBlazor","Internationalization","setCulture","ValueFormatter","cultureName","intl","culture","prototype","getFormatFunction","format","type","isServerRendered","getDateFormat","getNumberFormat","getParserFunction","getDateParser","getNumberParser","fromView","value","toView","result"],"mappings":"AAAA,SAASA,iBAAT,EAA4BC,QAA5B,QAA4C,sBAA5C;AACA,SAASC,oBAAT,EAA+BC,UAA/B,QAAiD,sBAAjD;AACA;;;;;AAIA,IAAIC,cAAc;AAAG;AAAe,YAAY;AAC5C,WAASA,cAAT,CAAwBC,WAAxB,EAAqC;AACjC,SAAKC,IAAL,GAAY,IAAIJ,oBAAJ,EAAZ;;AACA,QAAI,CAACF,iBAAiB,CAACK,WAAD,CAAtB,EAAqC;AACjC,WAAKC,IAAL,CAAUC,OAAV,GAAoBF,WAApB;AACH;AACJ;;AACDD,EAAAA,cAAc,CAACI,SAAf,CAAyBC,iBAAzB,GAA6C,UAAUC,MAAV,EAAkB;AAC3D,QAAIA,MAAM,CAACC,IAAX,EAAiB;AACb,UAAIV,QAAQ,EAAZ,EAAgB;AACZ,YAAIW,gBAAgB,GAAG,kBAAvB;AACAF,QAAAA,MAAM,CAACE,gBAAD,CAAN,GAA2B,IAA3B;AACH;;AACD,aAAO,KAAKN,IAAL,CAAUO,aAAV,CAAwBH,MAAxB,CAAP;AACH,KAND,MAOK;AACD,aAAO,KAAKJ,IAAL,CAAUQ,eAAV,CAA0BJ,MAA1B,CAAP;AACH;AACJ,GAXD;;AAYAN,EAAAA,cAAc,CAACI,SAAf,CAAyBO,iBAAzB,GAA6C,UAAUL,MAAV,EAAkB;AAC3D,QAAIA,MAAM,CAACC,IAAX,EAAiB;AACb,UAAIV,QAAQ,EAAZ,EAAgB;AACZ,YAAIW,gBAAgB,GAAG,kBAAvB;AACAF,QAAAA,MAAM,CAACE,gBAAD,CAAN,GAA2B,IAA3B;AACH;;AACD,aAAO,KAAKN,IAAL,CAAUU,aAAV,CAAwBN,MAAxB,CAAP;AACH,KAND,MAOK;AACD,aAAO,KAAKJ,IAAL,CAAUW,eAAV,CAA0BP,MAA1B,CAAP;AACH;AACJ,GAXD;;AAYAN,EAAAA,cAAc,CAACI,SAAf,CAAyBU,QAAzB,GAAoC,UAAUC,KAAV,EAAiBT,MAAjB,EAAyBC,IAAzB,EAA+B;AAC/D,QAAI,CAACA,IAAI,KAAK,MAAT,IAAmBA,IAAI,KAAK,UAA5B,IAA0CA,IAAI,KAAK,QAApD,KAAkE,CAACX,iBAAiB,CAACU,MAAD,CAAxF,EAAmG;AAC/F,aAAOA,MAAM,CAACS,KAAD,CAAb;AACH,KAFD,MAGK;AACD,aAAOA,KAAP;AACH;AACJ,GAPD;;AAQAf,EAAAA,cAAc,CAACI,SAAf,CAAyBY,MAAzB,GAAkC,UAAUD,KAAV,EAAiBT,MAAjB,EAAyB;AACvD,QAAIW,MAAM,GAAGF,KAAb;;AACA,QAAI,CAACnB,iBAAiB,CAACU,MAAD,CAAlB,IAA8B,CAACV,iBAAiB,CAACmB,KAAD,CAApD,EAA6D;AACzDE,MAAAA,MAAM,GAAGX,MAAM,CAACS,KAAD,CAAf;AACH;;AACD,WAAOE,MAAP;AACH,GAND;;AAOAjB,EAAAA,cAAc,CAACI,SAAf,CAAyBL,UAAzB,GAAsC,UAAUE,WAAV,EAAuB;AACzD,QAAI,CAACL,iBAAiB,CAACK,WAAD,CAAtB,EAAqC;AACjCF,MAAAA,UAAU,CAACE,WAAD,CAAV;AACH;AACJ,GAJD;;AAKA,SAAOD,cAAP;AACH,CApDmC,EAApC;;AAqDA,SAASA,cAAT","sourcesContent":["import { isNullOrUndefined, isBlazor } from '@syncfusion/ej2-base';\nimport { Internationalization, setCulture } from '@syncfusion/ej2-base';\n/**\n * ValueFormatter class to globalize the value.\n * @hidden\n */\nvar ValueFormatter = /** @class */ (function () {\n    function ValueFormatter(cultureName) {\n        this.intl = new Internationalization();\n        if (!isNullOrUndefined(cultureName)) {\n            this.intl.culture = cultureName;\n        }\n    }\n    ValueFormatter.prototype.getFormatFunction = function (format) {\n        if (format.type) {\n            if (isBlazor()) {\n                var isServerRendered = 'isServerRendered';\n                format[isServerRendered] = true;\n            }\n            return this.intl.getDateFormat(format);\n        }\n        else {\n            return this.intl.getNumberFormat(format);\n        }\n    };\n    ValueFormatter.prototype.getParserFunction = function (format) {\n        if (format.type) {\n            if (isBlazor()) {\n                var isServerRendered = 'isServerRendered';\n                format[isServerRendered] = true;\n            }\n            return this.intl.getDateParser(format);\n        }\n        else {\n            return this.intl.getNumberParser(format);\n        }\n    };\n    ValueFormatter.prototype.fromView = function (value, format, type) {\n        if ((type === 'date' || type === 'datetime' || type === 'number') && (!isNullOrUndefined(format))) {\n            return format(value);\n        }\n        else {\n            return value;\n        }\n    };\n    ValueFormatter.prototype.toView = function (value, format) {\n        var result = value;\n        if (!isNullOrUndefined(format) && !isNullOrUndefined(value)) {\n            result = format(value);\n        }\n        return result;\n    };\n    ValueFormatter.prototype.setCulture = function (cultureName) {\n        if (!isNullOrUndefined(cultureName)) {\n            setCulture(cultureName);\n        }\n    };\n    return ValueFormatter;\n}());\nexport { ValueFormatter };\n"]},"metadata":{},"sourceType":"module"}