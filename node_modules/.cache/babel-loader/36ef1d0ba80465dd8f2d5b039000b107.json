{"ast":null,"code":"import { isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { Input } from '@syncfusion/ej2-inputs';\nimport { isEditable, getComplexFieldID } from '../base/util';\n/**\n * `DefaultEditCell` is used to handle default cell type editing.\n * @hidden\n */\n\nvar DefaultEditCell =\n/** @class */\nfunction () {\n  function DefaultEditCell(parent) {\n    this.parent = parent;\n  }\n\n  DefaultEditCell.prototype.create = function (args) {\n    var col = args.column;\n    var input = this.parent.createElement('input', {\n      className: 'e-field e-input e-defaultcell',\n      attrs: {\n        type: 'text',\n        value: !isNullOrUndefined(args.value) ? args.value : '',\n        'e-mappinguid': col.uid,\n        id: this.parent.element.id + getComplexFieldID(col.field),\n        name: getComplexFieldID(col.field),\n        style: 'text-align:' + col.textAlign\n      }\n    });\n    return input;\n  };\n\n  DefaultEditCell.prototype.read = function (element) {\n    return element.value;\n  };\n\n  DefaultEditCell.prototype.write = function (args) {\n    var col = args.column;\n    var isInline = this.parent.editSettings.mode !== 'Dialog';\n    var inputargs = {\n      element: args.element,\n      floatLabelType: this.parent.editSettings.mode !== 'Dialog' ? 'Never' : 'Always',\n      properties: {\n        enableRtl: this.parent.enableRtl,\n        enabled: isEditable(args.column, args.requestType, args.element),\n        placeholder: isInline ? '' : args.column.headerText\n      }\n    };\n    Input.createInput(inputargs, this.parent.createElement);\n  };\n\n  return DefaultEditCell;\n}();\n\nexport { DefaultEditCell };","map":{"version":3,"sources":["C:/CN2/workspace-trunk/kain-front-end/node_modules/@syncfusion/ej2-grids/src/grid/renderer/default-edit-cell.js"],"names":["isNullOrUndefined","Input","isEditable","getComplexFieldID","DefaultEditCell","parent","prototype","create","args","col","column","input","createElement","className","attrs","type","value","uid","id","element","field","name","style","textAlign","read","write","isInline","editSettings","mode","inputargs","floatLabelType","properties","enableRtl","enabled","requestType","placeholder","headerText","createInput"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,sBAAlC;AACA,SAASC,KAAT,QAAsB,wBAAtB;AACA,SAASC,UAAT,EAAqBC,iBAArB,QAA8C,cAA9C;AACA;;;;;AAIA,IAAIC,eAAe;AAAG;AAAe,YAAY;AAC7C,WAASA,eAAT,CAAyBC,MAAzB,EAAiC;AAC7B,SAAKA,MAAL,GAAcA,MAAd;AACH;;AACDD,EAAAA,eAAe,CAACE,SAAhB,CAA0BC,MAA1B,GAAmC,UAAUC,IAAV,EAAgB;AAC/C,QAAIC,GAAG,GAAGD,IAAI,CAACE,MAAf;AACA,QAAIC,KAAK,GAAG,KAAKN,MAAL,CAAYO,aAAZ,CAA0B,OAA1B,EAAmC;AAC3CC,MAAAA,SAAS,EAAE,+BADgC;AACCC,MAAAA,KAAK,EAAE;AAC/CC,QAAAA,IAAI,EAAE,MADyC;AACjCC,QAAAA,KAAK,EAAE,CAAChB,iBAAiB,CAACQ,IAAI,CAACQ,KAAN,CAAlB,GAAiCR,IAAI,CAACQ,KAAtC,GAA8C,EADpB;AACwB,wBAAgBP,GAAG,CAACQ,GAD5C;AAE/CC,QAAAA,EAAE,EAAE,KAAKb,MAAL,CAAYc,OAAZ,CAAoBD,EAApB,GAAyBf,iBAAiB,CAACM,GAAG,CAACW,KAAL,CAFC;AAEYC,QAAAA,IAAI,EAAElB,iBAAiB,CAACM,GAAG,CAACW,KAAL,CAFnC;AAG/CE,QAAAA,KAAK,EAAE,gBAAgBb,GAAG,CAACc;AAHoB;AADR,KAAnC,CAAZ;AAOA,WAAOZ,KAAP;AACH,GAVD;;AAWAP,EAAAA,eAAe,CAACE,SAAhB,CAA0BkB,IAA1B,GAAiC,UAAUL,OAAV,EAAmB;AAChD,WAAOA,OAAO,CAACH,KAAf;AACH,GAFD;;AAGAZ,EAAAA,eAAe,CAACE,SAAhB,CAA0BmB,KAA1B,GAAkC,UAAUjB,IAAV,EAAgB;AAC9C,QAAIC,GAAG,GAAGD,IAAI,CAACE,MAAf;AACA,QAAIgB,QAAQ,GAAG,KAAKrB,MAAL,CAAYsB,YAAZ,CAAyBC,IAAzB,KAAkC,QAAjD;AACA,QAAIC,SAAS,GAAG;AACZV,MAAAA,OAAO,EAAEX,IAAI,CAACW,OADF;AACWW,MAAAA,cAAc,EAAE,KAAKzB,MAAL,CAAYsB,YAAZ,CAAyBC,IAAzB,KAAkC,QAAlC,GAA6C,OAA7C,GAAuD,QADlF;AAEZG,MAAAA,UAAU,EAAE;AACRC,QAAAA,SAAS,EAAE,KAAK3B,MAAL,CAAY2B,SADf;AAC0BC,QAAAA,OAAO,EAAE/B,UAAU,CAACM,IAAI,CAACE,MAAN,EAAcF,IAAI,CAAC0B,WAAnB,EAAgC1B,IAAI,CAACW,OAArC,CAD7C;AAERgB,QAAAA,WAAW,EAAET,QAAQ,GAAG,EAAH,GAAQlB,IAAI,CAACE,MAAL,CAAY0B;AAFjC;AAFA,KAAhB;AAOAnC,IAAAA,KAAK,CAACoC,WAAN,CAAkBR,SAAlB,EAA6B,KAAKxB,MAAL,CAAYO,aAAzC;AACH,GAXD;;AAYA,SAAOR,eAAP;AACH,CA/BoC,EAArC;;AAgCA,SAASA,eAAT","sourcesContent":["import { isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { Input } from '@syncfusion/ej2-inputs';\nimport { isEditable, getComplexFieldID } from '../base/util';\n/**\n * `DefaultEditCell` is used to handle default cell type editing.\n * @hidden\n */\nvar DefaultEditCell = /** @class */ (function () {\n    function DefaultEditCell(parent) {\n        this.parent = parent;\n    }\n    DefaultEditCell.prototype.create = function (args) {\n        var col = args.column;\n        var input = this.parent.createElement('input', {\n            className: 'e-field e-input e-defaultcell', attrs: {\n                type: 'text', value: !isNullOrUndefined(args.value) ? args.value : '', 'e-mappinguid': col.uid,\n                id: this.parent.element.id + getComplexFieldID(col.field), name: getComplexFieldID(col.field),\n                style: 'text-align:' + col.textAlign,\n            }\n        });\n        return input;\n    };\n    DefaultEditCell.prototype.read = function (element) {\n        return element.value;\n    };\n    DefaultEditCell.prototype.write = function (args) {\n        var col = args.column;\n        var isInline = this.parent.editSettings.mode !== 'Dialog';\n        var inputargs = {\n            element: args.element, floatLabelType: this.parent.editSettings.mode !== 'Dialog' ? 'Never' : 'Always',\n            properties: {\n                enableRtl: this.parent.enableRtl, enabled: isEditable(args.column, args.requestType, args.element),\n                placeholder: isInline ? '' : args.column.headerText\n            }\n        };\n        Input.createInput(inputargs, this.parent.createElement);\n    };\n    return DefaultEditCell;\n}());\nexport { DefaultEditCell };\n"]},"metadata":{},"sourceType":"module"}