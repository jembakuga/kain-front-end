{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * PdfGrid.ts class for EJ2-PDF\n */\n\n\nimport { PdfGridColumnCollection } from './pdf-grid-column';\nimport { PdfGridRowCollection, PdfGridHeaderCollection } from './pdf-grid-row';\nimport { RectangleF, SizeF, PointF } from './../../drawing/pdf-drawing';\nimport { PdfLayoutElement } from './../../graphics/figures/layout-element';\nimport { PdfLayoutFormat } from './../../graphics/figures/base/element-layouter';\nimport { PdfGridStyle } from './styles/style';\nimport { PdfGridLayouter } from './../../structured-elements/grid/layout/grid-layouter';\n\nvar PdfGrid =\n/** @class */\nfunction (_super) {\n  __extends(PdfGrid, _super); //constructor\n\n  /**\n   * Initialize a new instance for `PdfGrid` class.\n   * @private\n   */\n\n\n  function PdfGrid() {\n    var _this = _super.call(this) || this;\n    /**\n     * @hidden\n     * @private\n     */\n\n\n    _this.gridSize = new SizeF(0, 0);\n    /**\n     * Check the child grid is ' split or not'\n     */\n\n    _this.isGridSplit = false;\n    /**\n     * @hidden\n     * @private\n     */\n\n    _this.isRearranged = false;\n    /**\n     * @hidden\n     * @private\n     */\n\n    _this.pageBounds = new RectangleF();\n    /**\n     * @hidden\n     * @private\n     */\n\n    _this.listOfNavigatePages = [];\n    /**\n     * @hidden\n     * @private\n     */\n\n    _this.parentCellIndex = 0;\n    _this.tempWidth = 0;\n    /**\n     * @hidden\n     * @private\n     */\n\n    _this.breakRow = true;\n    _this.splitChildRowIndex = -1;\n    /**\n     * The event raised on `begin cell lay outing`.\n     * @event\n     * @private\n     */\n    //public beginPageLayout : Function;\n\n    /**\n     * The event raised on `end cell lay outing`.\n     * @event\n     * @private\n     */\n    //public endPageLayout : Function;\n\n    _this.hasRowSpanSpan = false;\n    _this.hasColumnSpan = false;\n    _this.isSingleGrid = true;\n    return _this;\n  }\n\n  Object.defineProperty(PdfGrid.prototype, \"raiseBeginCellDraw\", {\n    //Properties\n\n    /**\n     * Gets a value indicating whether the `start cell layout event` should be raised.\n     * @private\n     */\n    get: function () {\n      return typeof this.beginCellDraw !== 'undefined' && typeof this.beginCellDraw !== null;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGrid.prototype, \"raiseEndCellDraw\", {\n    /**\n     * Gets a value indicating whether the `end cell layout event` should be raised.\n     * @private\n     */\n    get: function () {\n      return typeof this.endCellDraw !== 'undefined' && typeof this.endCellDraw !== null;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGrid.prototype, \"repeatHeader\", {\n    /**\n     * Gets or sets a value indicating whether to `repeat header`.\n     * @private\n     */\n    get: function () {\n      if (this.bRepeatHeader == null || typeof this.bRepeatHeader === 'undefined') {\n        this.bRepeatHeader = false;\n      }\n\n      return this.bRepeatHeader;\n    },\n    set: function (value) {\n      this.bRepeatHeader = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGrid.prototype, \"allowRowBreakAcrossPages\", {\n    /**\n     * Gets or sets a value indicating whether to split or cut rows that `overflow a page`.\n     * @private\n     */\n    get: function () {\n      return this.breakRow;\n    },\n    set: function (value) {\n      this.breakRow = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGrid.prototype, \"columns\", {\n    /**\n     * Gets the `column` collection of the PdfGrid.[Read-Only]\n     * @private\n     */\n    get: function () {\n      if (this.gridColumns == null || typeof this.gridColumns === 'undefined') {\n        this.gridColumns = new PdfGridColumnCollection(this);\n      }\n\n      return this.gridColumns;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGrid.prototype, \"rows\", {\n    /**\n     * Gets the `row` collection from the PdfGrid.[Read-Only]\n     * @private\n     */\n    get: function () {\n      if (this.gridRows == null) {\n        this.gridRows = new PdfGridRowCollection(this);\n      }\n\n      return this.gridRows;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGrid.prototype, \"headers\", {\n    /**\n     * Gets the `headers` collection from the PdfGrid.[Read-Only]\n     * @private\n     */\n    get: function () {\n      if (this.gridHeaders == null || typeof this.gridHeaders === 'undefined') {\n        this.gridHeaders = new PdfGridHeaderCollection(this);\n      }\n\n      return this.gridHeaders;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGrid.prototype, \"initialWidth\", {\n    /**\n     * Indicating `initial width` of the page.\n     * @private\n     */\n    get: function () {\n      return this.gridInitialWidth;\n    },\n    set: function (value) {\n      this.gridInitialWidth = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGrid.prototype, \"style\", {\n    /**\n     * Gets or sets the `grid style`.\n     * @private\n     */\n    get: function () {\n      if (this.gridStyle == null) {\n        this.gridStyle = new PdfGridStyle();\n      }\n\n      return this.gridStyle;\n    },\n    set: function (value) {\n      if (this.gridStyle == null) {\n        this.gridStyle = value;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGrid.prototype, \"isPageWidth\", {\n    /**\n     * Gets a value indicating whether the grid column width is considered to be `page width`.\n     * @private\n     */\n    get: function () {\n      return this.ispageWidth;\n    },\n    set: function (value) {\n      this.ispageWidth = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGrid.prototype, \"isChildGrid\", {\n    /**\n     * Gets or set if grid `is nested grid`.\n     * @private\n     */\n    get: function () {\n      return this.ischildGrid;\n    },\n    set: function (value) {\n      this.ischildGrid = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGrid.prototype, \"size\", {\n    /**\n     * Gets or set if grid ' is split or not'\n     * @public\n     */\n    // public get isGridSplit() : boolean {\n    //     return this.isgridSplit;\n    // }\n    // public set isGridSplit(value : boolean) {\n    //     this.isgridSplit = value;\n    // }public get isGridSplit() : boolean {\n    //     return this.isgridSplit;\n    // }\n    // public set isGridSplit(value : boolean) {\n    //     this.isgridSplit = value;\n    // }\n\n    /**\n     * Gets the `size`.\n     * @private\n     */\n    get: function () {\n      if ((this.gridSize.width === 0 || typeof this.gridSize.width === 'undefined') && this.gridSize.height === 0) {\n        this.gridSize = this.measure();\n      }\n\n      return this.gridSize; // } else {\n      //     return this.gridSize;\n      // }\n    },\n    set: function (value) {\n      this.gridSize = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGrid.prototype, \"ParentCell\", {\n    get: function () {\n      return this.parentCell;\n    },\n    set: function (value) {\n      this.parentCell = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGrid.prototype, \"LayoutFormat\", {\n    get: function () {\n      return this.layoutFormat;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  PdfGrid.prototype.draw = function (arg1, arg2, arg3, arg4) {\n    if (arg2 instanceof PointF && typeof arg2.width === 'undefined' && typeof arg3 === 'undefined') {\n      return this.drawHelper(arg1, arg2.x, arg2.y);\n    } else if (typeof arg2 === 'number' && typeof arg3 === 'number' && typeof arg4 === 'undefined') {\n      return this.drawHelper(arg1, arg2, arg3, null);\n    } else if (arg2 instanceof RectangleF && typeof arg2.width !== 'undefined' && typeof arg3 === 'undefined') {\n      return this.drawHelper(arg1, arg2, null);\n    } else if (arg2 instanceof PointF && typeof arg2.width === 'undefined' && arg3 instanceof PdfLayoutFormat) {\n      return this.drawHelper(arg1, arg2.x, arg2.y, arg3);\n    } else if (typeof arg2 === 'number' && typeof arg3 === 'number' && (arg4 instanceof PdfLayoutFormat || arg4 == null)) {\n      var width = arg1.graphics.clientSize.width - arg2;\n      var layoutRectangle = new RectangleF(arg2, arg3, width, 0);\n      return this.drawHelper(arg1, layoutRectangle, arg4);\n    } else if (arg2 instanceof RectangleF && typeof arg2.width !== 'undefined' && typeof arg3 === 'boolean') {\n      return this.drawHelper(arg1, arg2, null);\n    } else {\n      return this.drawHelper(arg1, arg2, arg3);\n    }\n  };\n  /**\n   * `measures` this instance.\n   * @private\n   */\n\n\n  PdfGrid.prototype.measure = function () {\n    var height = 0;\n    var width = this.columns.width;\n\n    for (var i = 0; i < this.headers.count; i++) {\n      var row = this.headers.getHeader(i);\n      height += row.height;\n    }\n\n    for (var i = 0; i < this.rows.count; i++) {\n      var row = this.rows.getRow(i);\n      height += row.height;\n    }\n\n    return new SizeF(width, height);\n  };\n\n  PdfGrid.prototype.onBeginCellDraw = function (args) {\n    if (this.raiseBeginCellDraw) {\n      this.beginCellDraw(this, args);\n    }\n  };\n\n  PdfGrid.prototype.onEndCellDraw = function (args) {\n    if (this.raiseEndCellDraw) {\n      this.endCellDraw(this, args);\n    }\n  };\n  /**\n   * `Layouts` the specified graphics.\n   * @private\n   */\n\n\n  PdfGrid.prototype.layout = function (param) {\n    // if (this.rows.count !== 0) {\n    //     if (this.rows.getRow(0).cells.getCell(0).style.borders.left.width !== 1) {\n    //         let x : number = this.rows.getRow(0).cells.getCell(0).style.borders.left.width / 2;\n    //         let y : number = this.rows.getRow(0).cells.getCell(0).style.borders.top.width / 2;\n    //         if (param.bounds.x === PdfBorders.default.right.width / 2 && param.bounds.y === PdfBorders.default.right.width / 2) {\n    //             let newBound : RectangleF = new RectangleF(x, y, this.gridSize.width, this.gridSize.height);\n    //             param.bounds = newBound;\n    //         }\n    //     }\n    // }\n    this.setSpan();\n    this.checkSpan();\n    this.layoutFormat = param.format;\n    this.gridLocation = param.bounds;\n    var layouter = new PdfGridLayouter(this);\n    var result = layouter.Layouter(param);\n    return result;\n  };\n\n  PdfGrid.prototype.setSpan = function () {\n    var colSpan = 1;\n    var rowSpan = 1;\n    var currentCellIndex = 0;\n    var currentRowIndex = 0;\n    var maxSpan = 0;\n    var rowCount = this.headers.count;\n\n    for (var i = 0; i < rowCount; i++) {\n      var row = this.headers.getHeader(i);\n      maxSpan = 0;\n      var colCount = row.cells.count;\n\n      for (var j = 0; j < colCount; j++) {\n        var cell = row.cells.getCell(j);\n        maxSpan = Math.max(maxSpan, cell.rowSpan); //Skip setting span map for already coverted rows/columns.\n\n        if (!cell.isCellMergeContinue && !cell.isRowMergeContinue && (cell.columnSpan > 1 || cell.rowSpan > 1)) {\n          if (cell.columnSpan + j > row.cells.count) {\n            throw new Error('Invalid span specified at row ' + j.toString() + ' column ' + i.toString());\n          }\n\n          if (cell.rowSpan + i > this.headers.count) {\n            throw new Error('Invalid span specified at Header ' + j.toString() + ' column ' + i.toString());\n          } // if (this.rows.count !== 0 && cell.rowSpan + i > this.rows.count) {\n          //     throw new Error('Invalid span specified at row ' + j.toString() + ' column ' + i.toString());\n          // }\n\n\n          if (cell.columnSpan > 1 && cell.rowSpan > 1) {\n            colSpan = cell.columnSpan;\n            rowSpan = cell.rowSpan;\n            currentCellIndex = j;\n            currentRowIndex = i;\n            cell.isCellMergeStart = true;\n            cell.isRowMergeStart = true; //Set Column merges for first row\n\n            while (colSpan > 1) {\n              currentCellIndex++;\n              row.cells.getCell(currentCellIndex).isCellMergeContinue = true;\n              row.cells.getCell(currentCellIndex).isRowMergeContinue = true;\n              row.cells.getCell(currentCellIndex).rowSpan = rowSpan;\n              colSpan--;\n            }\n\n            currentCellIndex = j;\n            colSpan = cell.columnSpan; //Set Row Merges and column merges foreach subsequent rows.\n\n            while (rowSpan > 1) {\n              currentRowIndex++;\n              this.headers.getHeader(currentRowIndex).cells.getCell(j).isRowMergeContinue = true;\n              this.headers.getHeader(currentRowIndex).cells.getCell(currentCellIndex).isRowMergeContinue = true;\n              rowSpan--;\n\n              while (colSpan > 1) {\n                currentCellIndex++;\n                this.headers.getHeader(currentRowIndex).cells.getCell(currentCellIndex).isCellMergeContinue = true;\n                this.headers.getHeader(currentRowIndex).cells.getCell(currentCellIndex).isRowMergeContinue = true;\n                colSpan--;\n              }\n\n              colSpan = cell.columnSpan;\n              currentCellIndex = j;\n            }\n          } else if (cell.columnSpan > 1 && cell.rowSpan === 1) {\n            colSpan = cell.columnSpan;\n            currentCellIndex = j;\n            cell.isCellMergeStart = true; //Set Column merges.\n\n            while (colSpan > 1) {\n              currentCellIndex++;\n              row.cells.getCell(currentCellIndex).isCellMergeContinue = true;\n              colSpan--;\n            }\n          } else if (cell.columnSpan === 1 && cell.rowSpan > 1) {\n            rowSpan = cell.rowSpan;\n            currentRowIndex = i; //Set row Merges.\n\n            while (rowSpan > 1) {\n              currentRowIndex++;\n              this.headers.getHeader(currentRowIndex).cells.getCell(j).isRowMergeContinue = true;\n              rowSpan--;\n            }\n          }\n        }\n      }\n\n      row.maximumRowSpan = maxSpan;\n    }\n  };\n\n  PdfGrid.prototype.checkSpan = function () {\n    var cellcolSpan;\n    var cellrowSpan = 1;\n    var cellmaxSpan = 0;\n    var currentCellIndex;\n    var currentRowIndex = 0;\n    cellcolSpan = cellrowSpan = 1;\n    currentCellIndex = currentRowIndex = 0;\n\n    if (this.hasRowSpanSpan || this.hasColumnSpan) {\n      var rowCount = this.rows.count;\n\n      for (var i = 0; i < rowCount; i++) {\n        var row = this.rows.getRow(i);\n        cellmaxSpan = 0;\n        var colCount = row.cells.count;\n\n        for (var j = 0; j < colCount; j++) {\n          var cell = row.cells.getCell(j);\n          cellmaxSpan = Math.max(cellmaxSpan, cell.rowSpan); //Skip setting span map for already coverted rows/columns.\n\n          if (!cell.isCellMergeContinue && !cell.isRowMergeContinue && (cell.columnSpan > 1 || cell.rowSpan > 1)) {\n            if (cell.columnSpan + j > row.cells.count) {\n              throw new Error('Invalid span specified at row  ' + j.toString() + ' column ' + i.toString());\n            }\n\n            if (cell.rowSpan + i > this.rows.count) {\n              throw new Error('Invalid span specified at row  ' + j.toString() + ' column ' + i.toString());\n            }\n\n            if (cell.columnSpan > 1 && cell.rowSpan > 1) {\n              cellcolSpan = cell.columnSpan;\n              cellrowSpan = cell.rowSpan;\n              currentCellIndex = j;\n              currentRowIndex = i;\n              cell.isCellMergeStart = true;\n              cell.isRowMergeStart = true; //Set Column merges for first row\n\n              while (cellcolSpan > 1) {\n                currentCellIndex++;\n                row.cells.getCell(currentCellIndex).isCellMergeContinue = true;\n                row.cells.getCell(currentCellIndex).isRowMergeContinue = true;\n                cellcolSpan--;\n              }\n\n              currentCellIndex = j;\n              cellcolSpan = cell.columnSpan; //Set Row Merges and column merges foreach subsequent rows.\n\n              while (cellrowSpan > 1) {\n                currentRowIndex++;\n                this.rows.getRow(currentRowIndex).cells.getCell(j).isRowMergeContinue = true;\n                this.rows.getRow(currentRowIndex).cells.getCell(currentCellIndex).isRowMergeContinue = true;\n                cellrowSpan--;\n\n                while (cellcolSpan > 1) {\n                  currentCellIndex++;\n                  this.rows.getRow(currentRowIndex).cells.getCell(currentCellIndex).isCellMergeContinue = true;\n                  this.rows.getRow(currentRowIndex).cells.getCell(currentCellIndex).isRowMergeContinue = true;\n                  cellcolSpan--;\n                }\n\n                cellcolSpan = cell.columnSpan;\n                currentCellIndex = j;\n              }\n            } else if (cell.columnSpan > 1 && cell.rowSpan === 1) {\n              cellcolSpan = cell.columnSpan;\n              currentCellIndex = j;\n              cell.isCellMergeStart = true; //Set Column merges.\n\n              while (cellcolSpan > 1) {\n                currentCellIndex++;\n                row.cells.getCell(currentCellIndex).isCellMergeContinue = true;\n                cellcolSpan--;\n              }\n            } else if (cell.columnSpan === 1 && cell.rowSpan > 1) {\n              cellrowSpan = cell.rowSpan;\n              currentRowIndex = i; //Set row Merges.\n\n              while (cellrowSpan > 1) {\n                currentRowIndex++;\n                this.rows.getRow(currentRowIndex).cells.getCell(j).isRowMergeContinue = true;\n                cellrowSpan--;\n              }\n            }\n          }\n        }\n\n        row.maximumRowSpan = cellmaxSpan;\n      }\n    }\n  };\n\n  PdfGrid.prototype.measureColumnsWidth = function (bounds) {\n    if (typeof bounds !== 'undefined') {\n      this.isPageWidth = false;\n      var widths = this.columns.getDefaultWidths(bounds.width - bounds.x); //let tempWidth : number = this.columns.getColumn(0).width;\n\n      for (var i = 0, count = this.columns.count; i < count; i++) {\n        // if (this.columns.getColumn(i).width < 0)\n        //     this.columns.getColumn(i).columnWidth = widths[i];\n        // else if (this.columns.getColumn(i).width > 0 && !this.columns.getColumn(i).isCustomWidth && widths[i]>0 && this.isComplete)\n        this.columns.getColumn(i).columnWidth = widths[i];\n        this.tempWidth = widths[i];\n      }\n\n      if (this.ParentCell != null && this.style.allowHorizontalOverflow == false && this.ParentCell.row.grid.style.allowHorizontalOverflow == false) {\n        var padding = 0;\n        var columnWidth = 0;\n        var columnCount = this.columns.count;\n        var childGridColumnWidth = 0;\n\n        if (this.ParentCell.style.cellPadding != null || typeof this.ParentCell.style.cellPadding !== 'undefined') {\n          if (typeof this.ParentCell.style.cellPadding.left != 'undefined' && this.ParentCell.style.cellPadding.hasLeftPad) {\n            padding += this.ParentCell.style.cellPadding.left;\n          }\n\n          if (typeof this.ParentCell.style.cellPadding.right != 'undefined' && this.ParentCell.style.cellPadding.hasRightPad) {\n            padding += this.ParentCell.style.cellPadding.right;\n          }\n        }\n\n        for (var i = 0; i < this.ParentCell.columnSpan; i++) {\n          columnWidth += this.ParentCell.row.grid.columns.getColumn(this.parentCellIndex + i).width;\n        }\n\n        for (var j = 0; j < this.columns.count; j++) {\n          if (this.gridColumns.getColumn(j).width > 0 && this.gridColumns.getColumn(j).isCustomWidth) {\n            columnWidth -= this.gridColumns.getColumn(j).width;\n            columnCount--;\n          }\n        }\n\n        if (this.ParentCell.row.grid.style.cellPadding != null || typeof this.ParentCell.row.grid.style.cellPadding != 'undefined') {\n          if (typeof this.ParentCell.row.grid.style.cellPadding.top != 'undefined' && this.ParentCell.row.grid.style.cellPadding.hasTopPad) {\n            padding += this.ParentCell.row.grid.style.cellPadding.top;\n          }\n\n          if (typeof this.ParentCell.row.grid.style.cellPadding.bottom != 'undefined' && this.ParentCell.row.grid.style.cellPadding.hasBottomPad) {\n            padding += this.ParentCell.row.grid.style.cellPadding.bottom;\n          }\n        }\n\n        if (this.ParentCell.row.grid.style.cellSpacing != 0) {\n          columnWidth -= this.ParentCell.row.grid.style.cellSpacing * 2;\n        }\n\n        if (columnWidth > padding) {\n          childGridColumnWidth = (columnWidth - padding) / columnCount;\n          this.tempWidth = childGridColumnWidth;\n\n          if (this.ParentCell != null) {\n            for (var j = 0; j < this.columns.count; j++) {\n              if (!this.columns.getColumn(j).isCustomWidth) this.columns.getColumn(j).columnWidth = childGridColumnWidth;\n            }\n          }\n        }\n      } // if (this.ParentCell != null && this.ParentCell.row.width > 0)\n      // {\n      //     if (this.isChildGrid && this.gridSize.width > this.ParentCell.row.width)\n      //     {\n      //         widths = this.columns.getDefaultWidths(bounds.width);\n      //         for (let i : number = 0; i < this.columns.count; i++)\n      //         {\n      //             this.columns.getColumn(i).width = widths[i];\n      //         }\n      //     }\n      // }\n\n    } else {\n      var widths = [this.columns.count];\n\n      for (var n = 0; n < this.columns.count; n++) {\n        widths[n] = 0;\n      }\n\n      var cellWidth = 0;\n      var cellWidths = 0;\n\n      if (typeof this.isChildGrid === 'undefined' && typeof this.gridLocation !== 'undefined' || this.isChildGrid === null && typeof this.gridLocation !== 'undefined') {\n        this.initialWidth = this.gridLocation.width;\n      }\n\n      if (this.headers.count > 0) {\n        var colCount_1 = this.headers.getHeader(0).cells.count;\n        var rowCount = this.headers.count;\n\n        for (var i = 0; i < colCount_1; i++) {\n          cellWidth = 0;\n\n          for (var j = 0; j < rowCount; j++) {\n            var rowWidth = Math.min(this.initialWidth, this.headers.getHeader(j).cells.getCell(i).width);\n            cellWidth = Math.max(cellWidth, rowWidth);\n          }\n\n          widths[i] = cellWidth;\n        }\n      } // else {\n      //     let colCount : number = this.rows.getRow(0).cells.count;\n      //     let rowCount : number = this.rows.count;\n      //     for (let i : number = 0; i < colCount; i++) {\n      //         cellWidth = 0;\n      //         for (let j : number = 0; j < rowCount; j++) {\n      //             let rowWidth : number = Math.min(this.initialWidth, this.rows.getRow(j).cells.getCell(i).width);\n      //             cellWidth = Math.max(cellWidth, rowWidth);\n      //         }\n      //         widths[i] = cellWidth;\n      //     }\n      // }\n\n\n      cellWidth = 0;\n\n      for (var i = 0, colCount_2 = this.columns.count; i < colCount_2; i++) {\n        for (var j = 0, rowCount = this.rows.count; j < rowCount; j++) {\n          if (this.rows.getRow(j).cells.getCell(i).columnSpan == 1 && !this.rows.getRow(j).cells.getCell(i).isCellMergeContinue || this.rows.getRow(j).cells.getCell(i).value != null) {\n            if (this.rows.getRow(j).cells.getCell(i).value != null && !this.rows.getRow(j).grid.style.allowHorizontalOverflow) {\n              var value = this.rows.getRow(j).grid.style.cellPadding.right + this.rows.getRow(j).grid.style.cellPadding.left + this.rows.getRow(j).cells.getCell(i).style.borders.left.width / 2; //  if (this.initialWidth != 0 )\n              //         (this.rows.getRow(j).cells.getCell(i).value as PdfGrid).initialWidth = this.initialWidth - value;\n            }\n\n            var rowWidth = 0;\n            rowWidth = this.initialWidth > 0.0 ? Math.min(this.initialWidth, this.rows.getRow(j).cells.getCell(i).width) : this.rows.getRow(j).cells.getCell(i).width; // let internalWidth : number = this.rows.getRow(j).cells.getCell(i).width;\n            // internalWidth += this.rows.getRow(j).cells.getCell(i).style.borders.left.width;\n            // internalWidth += this.rows.getRow(j).cells.getCell(i).style.borders.right.width;\n            // let internalHeight : number = this.rows.getRow(j).cells.getCell(i).height;\n            // internalHeight += (this.rows.getRow(j).cells.getCell(i).style.borders.top.width);\n            // internalHeight += (this.rows.getRow(j).cells.getCell(i).style.borders.bottom.width);\n            // let isCorrectWidth : boolean = (internalWidth + this.gridLocation.x) > this.currentGraphics.clientSize.width;\n            // let isCorrectHeight : boolean = (internalHeight + this.gridLocation.y) > this.currentGraphics.clientSize.height;\n            // if (isCorrectWidth || isCorrectHeight) {\n            //     throw Error('Image size exceeds client size of the page. Can not insert this image');\n            // }\n            // rowWidth = Math.min(this.initialWidth, this.rows.getRow(j).cells.getCell(i).width);\n\n            cellWidth = Math.max(widths[i], Math.max(cellWidth, rowWidth));\n            cellWidth = Math.max(this.columns.getColumn(i).width, cellWidth);\n          }\n        }\n\n        if (this.rows.count != 0) widths[i] = cellWidth;\n        cellWidth = 0;\n      }\n\n      for (var i = 0, RowCount = this.rows.count; i < RowCount; i++) {\n        for (var j = 0, ColCount = this.columns.count; j < ColCount; j++) {\n          if (this.rows.getRow(i).cells.getCell(j).columnSpan > 1) {\n            var total = widths[j];\n\n            for (var k = 1; k < this.rows.getRow(i).cells.getCell(j).columnSpan; k++) {\n              total += widths[j + k];\n            } // if (this.rows.getRow(i).cells.getCell(j).width > total)\n            // {\n            //     let extendedWidth : number = this.rows.getRow(i).cells.getCell(j).width - total;\n            //     extendedWidth = extendedWidth / this.rows.getRow(i).cells.getCell(j).columnSpan;\n            //     for (let k : number = j; k < j + this.rows.getRow(i).cells.getCell(j).columnSpan; k++)\n            //         widths[k] += extendedWidth;\n            // }\n\n          }\n        }\n      } // if (this.isChildGrid && this.initialWidth != 0)\n      // {\n      //     widths = this.columns.getDefaultWidths(this.initialWidth);\n      // }\n\n\n      for (var i = 0, count = this.columns.count; i < count; i++) {\n        if (this.columns.getColumn(i).width <= 0) this.columns.getColumn(i).columnWidth = widths[i];else if (this.columns.getColumn(i).width > 0 && !this.columns.getColumn(i).isCustomWidth) this.columns.getColumn(i).columnWidth = widths[i];\n      }\n\n      var padding = 0;\n      var colWidth = 0;\n      var colCount = this.columns.count;\n      var childGridColWidth = 0;\n      colWidth = this.tempWidth;\n\n      for (var j = 0; j < this.columns.count; j++) {\n        if (this.gridColumns.getColumn(j).width > 0 && this.gridColumns.getColumn(j).isCustomWidth) {\n          colWidth -= this.gridColumns.getColumn(j).width;\n          colCount--;\n        }\n      } // if (this.style.cellSpacing != 0){\n      //     colWidth -= this.style.cellSpacing * 2;\n      // }\n\n\n      if (colWidth > 0) {\n        if (this.ParentCell.row.grid.style.cellSpacing != 0) {\n          colWidth -= this.ParentCell.row.grid.style.cellSpacing * 2;\n        }\n      }\n\n      if (colWidth > padding) {\n        childGridColWidth = colWidth / colCount;\n\n        if (this.ParentCell != null) {\n          for (var j = 0; j < this.columns.count; j++) {\n            if (!this.columns.getColumn(j).isCustomWidth) this.columns.getColumn(j).columnWidth = childGridColWidth;\n          }\n        }\n      }\n    }\n  };\n\n  return PdfGrid;\n}(PdfLayoutElement);\n\nexport { PdfGrid };","map":{"version":3,"sources":["C:/CN2/workspace-trunk/kain-front-end/node_modules/@syncfusion/ej2-pdf-export/src/implementation/structured-elements/grid/pdf-grid.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","PdfGridColumnCollection","PdfGridRowCollection","PdfGridHeaderCollection","RectangleF","SizeF","PointF","PdfLayoutElement","PdfLayoutFormat","PdfGridStyle","PdfGridLayouter","PdfGrid","_super","_this","call","gridSize","isGridSplit","isRearranged","pageBounds","listOfNavigatePages","parentCellIndex","tempWidth","breakRow","splitChildRowIndex","hasRowSpanSpan","hasColumnSpan","isSingleGrid","defineProperty","get","beginCellDraw","enumerable","configurable","endCellDraw","bRepeatHeader","set","value","gridColumns","gridRows","gridHeaders","gridInitialWidth","gridStyle","ispageWidth","ischildGrid","width","height","measure","parentCell","layoutFormat","draw","arg1","arg2","arg3","arg4","drawHelper","x","y","graphics","clientSize","layoutRectangle","columns","i","headers","count","row","getHeader","rows","getRow","onBeginCellDraw","args","raiseBeginCellDraw","onEndCellDraw","raiseEndCellDraw","layout","param","setSpan","checkSpan","format","gridLocation","bounds","layouter","result","Layouter","colSpan","rowSpan","currentCellIndex","currentRowIndex","maxSpan","rowCount","colCount","cells","j","cell","getCell","Math","max","isCellMergeContinue","isRowMergeContinue","columnSpan","Error","toString","isCellMergeStart","isRowMergeStart","maximumRowSpan","cellcolSpan","cellrowSpan","cellmaxSpan","measureColumnsWidth","isPageWidth","widths","getDefaultWidths","getColumn","columnWidth","ParentCell","style","allowHorizontalOverflow","grid","padding","columnCount","childGridColumnWidth","cellPadding","left","hasLeftPad","right","hasRightPad","isCustomWidth","top","hasTopPad","bottom","hasBottomPad","cellSpacing","n","cellWidth","cellWidths","isChildGrid","initialWidth","colCount_1","rowWidth","min","colCount_2","borders","RowCount","ColCount","total","k","colWidth","childGridColWidth"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * PdfGrid.ts class for EJ2-PDF\n */\nimport { PdfGridColumnCollection } from './pdf-grid-column';\nimport { PdfGridRowCollection, PdfGridHeaderCollection } from './pdf-grid-row';\nimport { RectangleF, SizeF, PointF } from './../../drawing/pdf-drawing';\nimport { PdfLayoutElement } from './../../graphics/figures/layout-element';\nimport { PdfLayoutFormat } from './../../graphics/figures/base/element-layouter';\nimport { PdfGridStyle } from './styles/style';\nimport { PdfGridLayouter } from './../../structured-elements/grid/layout/grid-layouter';\nvar PdfGrid = /** @class */ (function (_super) {\n    __extends(PdfGrid, _super);\n    //constructor\n    /**\n     * Initialize a new instance for `PdfGrid` class.\n     * @private\n     */\n    function PdfGrid() {\n        var _this = _super.call(this) || this;\n        /**\n         * @hidden\n         * @private\n         */\n        _this.gridSize = new SizeF(0, 0);\n        /**\n         * Check the child grid is ' split or not'\n         */\n        _this.isGridSplit = false;\n        /**\n         * @hidden\n         * @private\n         */\n        _this.isRearranged = false;\n        /**\n         * @hidden\n         * @private\n         */\n        _this.pageBounds = new RectangleF();\n        /**\n         * @hidden\n         * @private\n         */\n        _this.listOfNavigatePages = [];\n        /**\n         * @hidden\n         * @private\n         */\n        _this.parentCellIndex = 0;\n        _this.tempWidth = 0;\n        /**\n         * @hidden\n         * @private\n         */\n        _this.breakRow = true;\n        _this.splitChildRowIndex = -1;\n        /**\n         * The event raised on `begin cell lay outing`.\n         * @event\n         * @private\n         */\n        //public beginPageLayout : Function;\n        /**\n         * The event raised on `end cell lay outing`.\n         * @event\n         * @private\n         */\n        //public endPageLayout : Function;\n        _this.hasRowSpanSpan = false;\n        _this.hasColumnSpan = false;\n        _this.isSingleGrid = true;\n        return _this;\n    }\n    Object.defineProperty(PdfGrid.prototype, \"raiseBeginCellDraw\", {\n        //Properties\n        /**\n         * Gets a value indicating whether the `start cell layout event` should be raised.\n         * @private\n         */\n        get: function () {\n            return (typeof this.beginCellDraw !== 'undefined' && typeof this.beginCellDraw !== null);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGrid.prototype, \"raiseEndCellDraw\", {\n        /**\n         * Gets a value indicating whether the `end cell layout event` should be raised.\n         * @private\n         */\n        get: function () {\n            return (typeof this.endCellDraw !== 'undefined' && typeof this.endCellDraw !== null);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGrid.prototype, \"repeatHeader\", {\n        /**\n         * Gets or sets a value indicating whether to `repeat header`.\n         * @private\n         */\n        get: function () {\n            if (this.bRepeatHeader == null || typeof this.bRepeatHeader === 'undefined') {\n                this.bRepeatHeader = false;\n            }\n            return this.bRepeatHeader;\n        },\n        set: function (value) {\n            this.bRepeatHeader = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGrid.prototype, \"allowRowBreakAcrossPages\", {\n        /**\n         * Gets or sets a value indicating whether to split or cut rows that `overflow a page`.\n         * @private\n         */\n        get: function () {\n            return this.breakRow;\n        },\n        set: function (value) {\n            this.breakRow = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGrid.prototype, \"columns\", {\n        /**\n         * Gets the `column` collection of the PdfGrid.[Read-Only]\n         * @private\n         */\n        get: function () {\n            if (this.gridColumns == null || typeof this.gridColumns === 'undefined') {\n                this.gridColumns = new PdfGridColumnCollection(this);\n            }\n            return this.gridColumns;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGrid.prototype, \"rows\", {\n        /**\n         * Gets the `row` collection from the PdfGrid.[Read-Only]\n         * @private\n         */\n        get: function () {\n            if (this.gridRows == null) {\n                this.gridRows = new PdfGridRowCollection(this);\n            }\n            return this.gridRows;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGrid.prototype, \"headers\", {\n        /**\n         * Gets the `headers` collection from the PdfGrid.[Read-Only]\n         * @private\n         */\n        get: function () {\n            if (this.gridHeaders == null || typeof this.gridHeaders === 'undefined') {\n                this.gridHeaders = new PdfGridHeaderCollection(this);\n            }\n            return this.gridHeaders;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGrid.prototype, \"initialWidth\", {\n        /**\n         * Indicating `initial width` of the page.\n         * @private\n         */\n        get: function () {\n            return this.gridInitialWidth;\n        },\n        set: function (value) {\n            this.gridInitialWidth = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGrid.prototype, \"style\", {\n        /**\n         * Gets or sets the `grid style`.\n         * @private\n         */\n        get: function () {\n            if (this.gridStyle == null) {\n                this.gridStyle = new PdfGridStyle();\n            }\n            return this.gridStyle;\n        },\n        set: function (value) {\n            if (this.gridStyle == null) {\n                this.gridStyle = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGrid.prototype, \"isPageWidth\", {\n        /**\n         * Gets a value indicating whether the grid column width is considered to be `page width`.\n         * @private\n         */\n        get: function () {\n            return this.ispageWidth;\n        },\n        set: function (value) {\n            this.ispageWidth = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGrid.prototype, \"isChildGrid\", {\n        /**\n         * Gets or set if grid `is nested grid`.\n         * @private\n         */\n        get: function () {\n            return this.ischildGrid;\n        },\n        set: function (value) {\n            this.ischildGrid = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGrid.prototype, \"size\", {\n        /**\n         * Gets or set if grid ' is split or not'\n         * @public\n         */\n        // public get isGridSplit() : boolean {\n        //     return this.isgridSplit;\n        // }\n        // public set isGridSplit(value : boolean) {\n        //     this.isgridSplit = value;\n        // }public get isGridSplit() : boolean {\n        //     return this.isgridSplit;\n        // }\n        // public set isGridSplit(value : boolean) {\n        //     this.isgridSplit = value;\n        // }\n        /**\n         * Gets the `size`.\n         * @private\n         */\n        get: function () {\n            if ((this.gridSize.width === 0 || typeof this.gridSize.width === 'undefined') && this.gridSize.height === 0) {\n                this.gridSize = this.measure();\n            }\n            return this.gridSize;\n            // } else {\n            //     return this.gridSize;\n            // }\n        },\n        set: function (value) {\n            this.gridSize = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGrid.prototype, \"ParentCell\", {\n        get: function () {\n            return this.parentCell;\n        },\n        set: function (value) {\n            this.parentCell = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGrid.prototype, \"LayoutFormat\", {\n        get: function () {\n            return this.layoutFormat;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PdfGrid.prototype.draw = function (arg1, arg2, arg3, arg4) {\n        if (arg2 instanceof PointF && typeof arg2.width === 'undefined' && typeof arg3 === 'undefined') {\n            return this.drawHelper(arg1, arg2.x, arg2.y);\n        }\n        else if (typeof arg2 === 'number' && typeof arg3 === 'number' && typeof arg4 === 'undefined') {\n            return this.drawHelper(arg1, arg2, arg3, null);\n        }\n        else if (arg2 instanceof RectangleF && typeof arg2.width !== 'undefined' && typeof arg3 === 'undefined') {\n            return this.drawHelper(arg1, arg2, null);\n        }\n        else if (arg2 instanceof PointF && typeof arg2.width === 'undefined' && arg3 instanceof PdfLayoutFormat) {\n            return this.drawHelper(arg1, arg2.x, arg2.y, arg3);\n        }\n        else if (typeof arg2 === 'number' && typeof arg3 === 'number' && (arg4 instanceof PdfLayoutFormat || arg4 == null)) {\n            var width = (arg1.graphics.clientSize.width - arg2);\n            var layoutRectangle = new RectangleF(arg2, arg3, width, 0);\n            return this.drawHelper(arg1, layoutRectangle, arg4);\n        }\n        else if (arg2 instanceof RectangleF && typeof arg2.width !== 'undefined' && typeof arg3 === 'boolean') {\n            return this.drawHelper(arg1, arg2, null);\n        }\n        else {\n            return this.drawHelper(arg1, arg2, arg3);\n        }\n    };\n    /**\n     * `measures` this instance.\n     * @private\n     */\n    PdfGrid.prototype.measure = function () {\n        var height = 0;\n        var width = this.columns.width;\n        for (var i = 0; i < this.headers.count; i++) {\n            var row = this.headers.getHeader(i);\n            height += row.height;\n        }\n        for (var i = 0; i < this.rows.count; i++) {\n            var row = this.rows.getRow(i);\n            height += row.height;\n        }\n        return new SizeF(width, height);\n    };\n    PdfGrid.prototype.onBeginCellDraw = function (args) {\n        if (this.raiseBeginCellDraw) {\n            this.beginCellDraw(this, args);\n        }\n    };\n    PdfGrid.prototype.onEndCellDraw = function (args) {\n        if (this.raiseEndCellDraw) {\n            this.endCellDraw(this, args);\n        }\n    };\n    /**\n     * `Layouts` the specified graphics.\n     * @private\n     */\n    PdfGrid.prototype.layout = function (param) {\n        // if (this.rows.count !== 0) {\n        //     if (this.rows.getRow(0).cells.getCell(0).style.borders.left.width !== 1) {\n        //         let x : number = this.rows.getRow(0).cells.getCell(0).style.borders.left.width / 2;\n        //         let y : number = this.rows.getRow(0).cells.getCell(0).style.borders.top.width / 2;\n        //         if (param.bounds.x === PdfBorders.default.right.width / 2 && param.bounds.y === PdfBorders.default.right.width / 2) {\n        //             let newBound : RectangleF = new RectangleF(x, y, this.gridSize.width, this.gridSize.height);\n        //             param.bounds = newBound;\n        //         }\n        //     }\n        // }\n        this.setSpan();\n        this.checkSpan();\n        this.layoutFormat = param.format;\n        this.gridLocation = param.bounds;\n        var layouter = new PdfGridLayouter(this);\n        var result = (layouter.Layouter(param));\n        return result;\n    };\n    PdfGrid.prototype.setSpan = function () {\n        var colSpan = 1;\n        var rowSpan = 1;\n        var currentCellIndex = 0;\n        var currentRowIndex = 0;\n        var maxSpan = 0;\n        var rowCount = this.headers.count;\n        for (var i = 0; i < rowCount; i++) {\n            var row = this.headers.getHeader(i);\n            maxSpan = 0;\n            var colCount = row.cells.count;\n            for (var j = 0; j < colCount; j++) {\n                var cell = row.cells.getCell(j);\n                maxSpan = Math.max(maxSpan, cell.rowSpan);\n                //Skip setting span map for already coverted rows/columns.\n                if (!cell.isCellMergeContinue && !cell.isRowMergeContinue && (cell.columnSpan > 1 || cell.rowSpan > 1)) {\n                    if (cell.columnSpan + j > row.cells.count) {\n                        throw new Error('Invalid span specified at row ' + j.toString() + ' column ' + i.toString());\n                    }\n                    if (cell.rowSpan + i > this.headers.count) {\n                        throw new Error('Invalid span specified at Header ' + j.toString() + ' column ' + i.toString());\n                    }\n                    // if (this.rows.count !== 0 && cell.rowSpan + i > this.rows.count) {\n                    //     throw new Error('Invalid span specified at row ' + j.toString() + ' column ' + i.toString());\n                    // }\n                    if (cell.columnSpan > 1 && cell.rowSpan > 1) {\n                        colSpan = cell.columnSpan;\n                        rowSpan = cell.rowSpan;\n                        currentCellIndex = j;\n                        currentRowIndex = i;\n                        cell.isCellMergeStart = true;\n                        cell.isRowMergeStart = true;\n                        //Set Column merges for first row\n                        while (colSpan > 1) {\n                            currentCellIndex++;\n                            row.cells.getCell(currentCellIndex).isCellMergeContinue = true;\n                            row.cells.getCell(currentCellIndex).isRowMergeContinue = true;\n                            row.cells.getCell(currentCellIndex).rowSpan = rowSpan;\n                            colSpan--;\n                        }\n                        currentCellIndex = j;\n                        colSpan = cell.columnSpan;\n                        //Set Row Merges and column merges foreach subsequent rows.\n                        while (rowSpan > 1) {\n                            currentRowIndex++;\n                            this.headers.getHeader(currentRowIndex).cells.getCell(j).isRowMergeContinue = true;\n                            this.headers.getHeader(currentRowIndex).cells.getCell(currentCellIndex).isRowMergeContinue = true;\n                            rowSpan--;\n                            while (colSpan > 1) {\n                                currentCellIndex++;\n                                this.headers.getHeader(currentRowIndex).cells.getCell(currentCellIndex).isCellMergeContinue = true;\n                                this.headers.getHeader(currentRowIndex).cells.getCell(currentCellIndex).isRowMergeContinue = true;\n                                colSpan--;\n                            }\n                            colSpan = cell.columnSpan;\n                            currentCellIndex = j;\n                        }\n                    }\n                    else if (cell.columnSpan > 1 && cell.rowSpan === 1) {\n                        colSpan = cell.columnSpan;\n                        currentCellIndex = j;\n                        cell.isCellMergeStart = true;\n                        //Set Column merges.\n                        while (colSpan > 1) {\n                            currentCellIndex++;\n                            row.cells.getCell(currentCellIndex).isCellMergeContinue = true;\n                            colSpan--;\n                        }\n                    }\n                    else if (cell.columnSpan === 1 && cell.rowSpan > 1) {\n                        rowSpan = cell.rowSpan;\n                        currentRowIndex = i;\n                        //Set row Merges.\n                        while (rowSpan > 1) {\n                            currentRowIndex++;\n                            this.headers.getHeader(currentRowIndex).cells.getCell(j).isRowMergeContinue = true;\n                            rowSpan--;\n                        }\n                    }\n                }\n            }\n            row.maximumRowSpan = maxSpan;\n        }\n    };\n    PdfGrid.prototype.checkSpan = function () {\n        var cellcolSpan;\n        var cellrowSpan = 1;\n        var cellmaxSpan = 0;\n        var currentCellIndex;\n        var currentRowIndex = 0;\n        cellcolSpan = cellrowSpan = 1;\n        currentCellIndex = currentRowIndex = 0;\n        if (this.hasRowSpanSpan || this.hasColumnSpan) {\n            var rowCount = this.rows.count;\n            for (var i = 0; i < rowCount; i++) {\n                var row = this.rows.getRow(i);\n                cellmaxSpan = 0;\n                var colCount = row.cells.count;\n                for (var j = 0; j < colCount; j++) {\n                    var cell = row.cells.getCell(j);\n                    cellmaxSpan = Math.max(cellmaxSpan, cell.rowSpan);\n                    //Skip setting span map for already coverted rows/columns.\n                    if (!cell.isCellMergeContinue && !cell.isRowMergeContinue\n                        && (cell.columnSpan > 1 || cell.rowSpan > 1)) {\n                        if (cell.columnSpan + j > row.cells.count) {\n                            throw new Error('Invalid span specified at row  ' + j.toString() + ' column ' + i.toString());\n                        }\n                        if (cell.rowSpan + i > this.rows.count) {\n                            throw new Error('Invalid span specified at row  ' + j.toString() + ' column ' + i.toString());\n                        }\n                        if (cell.columnSpan > 1 && cell.rowSpan > 1) {\n                            cellcolSpan = cell.columnSpan;\n                            cellrowSpan = cell.rowSpan;\n                            currentCellIndex = j;\n                            currentRowIndex = i;\n                            cell.isCellMergeStart = true;\n                            cell.isRowMergeStart = true;\n                            //Set Column merges for first row\n                            while (cellcolSpan > 1) {\n                                currentCellIndex++;\n                                row.cells.getCell(currentCellIndex).isCellMergeContinue = true;\n                                row.cells.getCell(currentCellIndex).isRowMergeContinue = true;\n                                cellcolSpan--;\n                            }\n                            currentCellIndex = j;\n                            cellcolSpan = cell.columnSpan;\n                            //Set Row Merges and column merges foreach subsequent rows.\n                            while (cellrowSpan > 1) {\n                                currentRowIndex++;\n                                this.rows.getRow(currentRowIndex).cells.getCell(j).isRowMergeContinue = true;\n                                this.rows.getRow(currentRowIndex).cells.getCell(currentCellIndex).isRowMergeContinue = true;\n                                cellrowSpan--;\n                                while (cellcolSpan > 1) {\n                                    currentCellIndex++;\n                                    this.rows.getRow(currentRowIndex).cells.getCell(currentCellIndex).isCellMergeContinue = true;\n                                    this.rows.getRow(currentRowIndex).cells.getCell(currentCellIndex).isRowMergeContinue = true;\n                                    cellcolSpan--;\n                                }\n                                cellcolSpan = cell.columnSpan;\n                                currentCellIndex = j;\n                            }\n                        }\n                        else if (cell.columnSpan > 1 && cell.rowSpan === 1) {\n                            cellcolSpan = cell.columnSpan;\n                            currentCellIndex = j;\n                            cell.isCellMergeStart = true;\n                            //Set Column merges.\n                            while (cellcolSpan > 1) {\n                                currentCellIndex++;\n                                row.cells.getCell(currentCellIndex).isCellMergeContinue = true;\n                                cellcolSpan--;\n                            }\n                        }\n                        else if (cell.columnSpan === 1 && cell.rowSpan > 1) {\n                            cellrowSpan = cell.rowSpan;\n                            currentRowIndex = i;\n                            //Set row Merges.\n                            while (cellrowSpan > 1) {\n                                currentRowIndex++;\n                                this.rows.getRow(currentRowIndex).cells.getCell(j).isRowMergeContinue = true;\n                                cellrowSpan--;\n                            }\n                        }\n                    }\n                }\n                row.maximumRowSpan = cellmaxSpan;\n            }\n        }\n    };\n    PdfGrid.prototype.measureColumnsWidth = function (bounds) {\n        if (typeof bounds !== 'undefined') {\n            this.isPageWidth = false;\n            var widths = this.columns.getDefaultWidths(bounds.width - bounds.x);\n            //let tempWidth : number = this.columns.getColumn(0).width;\n            for (var i = 0, count = this.columns.count; i < count; i++) {\n                // if (this.columns.getColumn(i).width < 0)\n                //     this.columns.getColumn(i).columnWidth = widths[i];\n                // else if (this.columns.getColumn(i).width > 0 && !this.columns.getColumn(i).isCustomWidth && widths[i]>0 && this.isComplete)\n                this.columns.getColumn(i).columnWidth = widths[i];\n                this.tempWidth = widths[i];\n            }\n            if (this.ParentCell != null && this.style.allowHorizontalOverflow == false && this.ParentCell.row.grid.style.allowHorizontalOverflow == false) {\n                var padding = 0;\n                var columnWidth = 0;\n                var columnCount = this.columns.count;\n                var childGridColumnWidth = 0;\n                if (this.ParentCell.style.cellPadding != null || typeof this.ParentCell.style.cellPadding !== 'undefined') {\n                    if (typeof this.ParentCell.style.cellPadding.left != 'undefined' && this.ParentCell.style.cellPadding.hasLeftPad) {\n                        padding += this.ParentCell.style.cellPadding.left;\n                    }\n                    if (typeof this.ParentCell.style.cellPadding.right != 'undefined' && this.ParentCell.style.cellPadding.hasRightPad) {\n                        padding += this.ParentCell.style.cellPadding.right;\n                    }\n                }\n                for (var i = 0; i < this.ParentCell.columnSpan; i++) {\n                    columnWidth += this.ParentCell.row.grid.columns.getColumn(this.parentCellIndex + i).width;\n                }\n                for (var j = 0; j < this.columns.count; j++) {\n                    if (this.gridColumns.getColumn(j).width > 0 && this.gridColumns.getColumn(j).isCustomWidth) {\n                        columnWidth -= this.gridColumns.getColumn(j).width;\n                        columnCount--;\n                    }\n                }\n                if ((this.ParentCell.row.grid.style.cellPadding != null || typeof this.ParentCell.row.grid.style.cellPadding != 'undefined')) {\n                    if (typeof this.ParentCell.row.grid.style.cellPadding.top != 'undefined' && this.ParentCell.row.grid.style.cellPadding.hasTopPad) {\n                        padding += this.ParentCell.row.grid.style.cellPadding.top;\n                    }\n                    if (typeof this.ParentCell.row.grid.style.cellPadding.bottom != 'undefined' && this.ParentCell.row.grid.style.cellPadding.hasBottomPad) {\n                        padding += this.ParentCell.row.grid.style.cellPadding.bottom;\n                    }\n                }\n                if (this.ParentCell.row.grid.style.cellSpacing != 0) {\n                    columnWidth -= this.ParentCell.row.grid.style.cellSpacing * 2;\n                }\n                if (columnWidth > padding) {\n                    childGridColumnWidth = (columnWidth - padding) / columnCount;\n                    this.tempWidth = childGridColumnWidth;\n                    if (this.ParentCell != null) {\n                        for (var j = 0; j < this.columns.count; j++) {\n                            if (!this.columns.getColumn(j).isCustomWidth)\n                                this.columns.getColumn(j).columnWidth = childGridColumnWidth;\n                        }\n                    }\n                }\n            }\n            // if (this.ParentCell != null && this.ParentCell.row.width > 0)\n            // {\n            //     if (this.isChildGrid && this.gridSize.width > this.ParentCell.row.width)\n            //     {\n            //         widths = this.columns.getDefaultWidths(bounds.width);\n            //         for (let i : number = 0; i < this.columns.count; i++)\n            //         {\n            //             this.columns.getColumn(i).width = widths[i];\n            //         }\n            //     }\n            // }\n        }\n        else {\n            var widths = [this.columns.count];\n            for (var n = 0; n < this.columns.count; n++) {\n                widths[n] = 0;\n            }\n            var cellWidth = 0;\n            var cellWidths = 0;\n            if ((typeof this.isChildGrid === 'undefined' && typeof this.gridLocation !== 'undefined') || (this.isChildGrid === null && typeof this.gridLocation !== 'undefined')) {\n                this.initialWidth = this.gridLocation.width;\n            }\n            if (this.headers.count > 0) {\n                var colCount_1 = this.headers.getHeader(0).cells.count;\n                var rowCount = this.headers.count;\n                for (var i = 0; i < colCount_1; i++) {\n                    cellWidth = 0;\n                    for (var j = 0; j < rowCount; j++) {\n                        var rowWidth = Math.min(this.initialWidth, this.headers.getHeader(j).cells.getCell(i).width);\n                        cellWidth = Math.max(cellWidth, rowWidth);\n                    }\n                    widths[i] = cellWidth;\n                }\n            }\n            // else {\n            //     let colCount : number = this.rows.getRow(0).cells.count;\n            //     let rowCount : number = this.rows.count;\n            //     for (let i : number = 0; i < colCount; i++) {\n            //         cellWidth = 0;\n            //         for (let j : number = 0; j < rowCount; j++) {\n            //             let rowWidth : number = Math.min(this.initialWidth, this.rows.getRow(j).cells.getCell(i).width);\n            //             cellWidth = Math.max(cellWidth, rowWidth);\n            //         }\n            //         widths[i] = cellWidth;\n            //     }\n            // }\n            cellWidth = 0;\n            for (var i = 0, colCount_2 = this.columns.count; i < colCount_2; i++) {\n                for (var j = 0, rowCount = this.rows.count; j < rowCount; j++) {\n                    if ((this.rows.getRow(j).cells.getCell(i).columnSpan == 1 && !this.rows.getRow(j).cells.getCell(i).isCellMergeContinue) || this.rows.getRow(j).cells.getCell(i).value != null) {\n                        if (this.rows.getRow(j).cells.getCell(i).value != null && !this.rows.getRow(j).grid.style.allowHorizontalOverflow) {\n                            var value = this.rows.getRow(j).grid.style.cellPadding.right +\n                                this.rows.getRow(j).grid.style.cellPadding.left\n                                + this.rows.getRow(j).cells.getCell(i).style.borders.left.width / 2;\n                            //  if (this.initialWidth != 0 )\n                            //         (this.rows.getRow(j).cells.getCell(i).value as PdfGrid).initialWidth = this.initialWidth - value;\n                        }\n                        var rowWidth = 0;\n                        rowWidth = this.initialWidth > 0.0 ? Math.min(this.initialWidth, this.rows.getRow(j).cells.getCell(i).width) : this.rows.getRow(j).cells.getCell(i).width;\n                        // let internalWidth : number = this.rows.getRow(j).cells.getCell(i).width;\n                        // internalWidth += this.rows.getRow(j).cells.getCell(i).style.borders.left.width;\n                        // internalWidth += this.rows.getRow(j).cells.getCell(i).style.borders.right.width;\n                        // let internalHeight : number = this.rows.getRow(j).cells.getCell(i).height;\n                        // internalHeight += (this.rows.getRow(j).cells.getCell(i).style.borders.top.width);\n                        // internalHeight += (this.rows.getRow(j).cells.getCell(i).style.borders.bottom.width);\n                        // let isCorrectWidth : boolean = (internalWidth + this.gridLocation.x) > this.currentGraphics.clientSize.width;\n                        // let isCorrectHeight : boolean = (internalHeight + this.gridLocation.y) > this.currentGraphics.clientSize.height;\n                        // if (isCorrectWidth || isCorrectHeight) {\n                        //     throw Error('Image size exceeds client size of the page. Can not insert this image');\n                        // }\n                        // rowWidth = Math.min(this.initialWidth, this.rows.getRow(j).cells.getCell(i).width);\n                        cellWidth = Math.max(widths[i], Math.max(cellWidth, rowWidth));\n                        cellWidth = Math.max(this.columns.getColumn(i).width, cellWidth);\n                    }\n                }\n                if (this.rows.count != 0)\n                    widths[i] = cellWidth;\n                cellWidth = 0;\n            }\n            for (var i = 0, RowCount = this.rows.count; i < RowCount; i++) {\n                for (var j = 0, ColCount = this.columns.count; j < ColCount; j++) {\n                    if (this.rows.getRow(i).cells.getCell(j).columnSpan > 1) {\n                        var total = widths[j];\n                        for (var k = 1; k < this.rows.getRow(i).cells.getCell(j).columnSpan; k++) {\n                            total += widths[j + k];\n                        }\n                        // if (this.rows.getRow(i).cells.getCell(j).width > total)\n                        // {\n                        //     let extendedWidth : number = this.rows.getRow(i).cells.getCell(j).width - total;\n                        //     extendedWidth = extendedWidth / this.rows.getRow(i).cells.getCell(j).columnSpan;\n                        //     for (let k : number = j; k < j + this.rows.getRow(i).cells.getCell(j).columnSpan; k++)\n                        //         widths[k] += extendedWidth;\n                        // }\n                    }\n                }\n            }\n            // if (this.isChildGrid && this.initialWidth != 0)\n            // {\n            //     widths = this.columns.getDefaultWidths(this.initialWidth);\n            // }\n            for (var i = 0, count = this.columns.count; i < count; i++) {\n                if (this.columns.getColumn(i).width <= 0)\n                    this.columns.getColumn(i).columnWidth = widths[i];\n                else if (this.columns.getColumn(i).width > 0 && !this.columns.getColumn(i).isCustomWidth)\n                    this.columns.getColumn(i).columnWidth = widths[i];\n            }\n            var padding = 0;\n            var colWidth = 0;\n            var colCount = this.columns.count;\n            var childGridColWidth = 0;\n            colWidth = this.tempWidth;\n            for (var j = 0; j < this.columns.count; j++) {\n                if (this.gridColumns.getColumn(j).width > 0 && this.gridColumns.getColumn(j).isCustomWidth) {\n                    colWidth -= this.gridColumns.getColumn(j).width;\n                    colCount--;\n                }\n            }\n            // if (this.style.cellSpacing != 0){\n            //     colWidth -= this.style.cellSpacing * 2;\n            // }\n            if (colWidth > 0) {\n                if (this.ParentCell.row.grid.style.cellSpacing != 0) {\n                    colWidth -= this.ParentCell.row.grid.style.cellSpacing * 2;\n                }\n            }\n            if (colWidth > padding) {\n                childGridColWidth = (colWidth) / colCount;\n                if (this.ParentCell != null) {\n                    for (var j = 0; j < this.columns.count; j++) {\n                        if (!this.columns.getColumn(j).isCustomWidth)\n                            this.columns.getColumn(j).columnWidth = childGridColWidth;\n                    }\n                }\n            }\n        }\n    };\n    return PdfGrid;\n}(PdfLayoutElement));\nexport { PdfGrid };\n"]},"metadata":{},"sourceType":"module"}