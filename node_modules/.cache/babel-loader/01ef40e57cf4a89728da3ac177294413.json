{"ast":null,"code":"import { extend } from '@syncfusion/ej2-base';\nimport { ComboBox } from '@syncfusion/ej2-dropdowns';\nimport { Query, DataManager, DataUtil } from '@syncfusion/ej2-data';\nimport { isEditable, getComplexFieldID, getObject } from '../base/util';\n/**\n * `ComboBoxEditCell` is used to handle ComboBoxEdit cell type editing.\n * @hidden\n */\n\nvar ComboboxEditCell =\n/** @class */\nfunction () {\n  function ComboboxEditCell(parentObject) {\n    //constructor\n    this.parent = parentObject;\n  }\n\n  ComboboxEditCell.prototype.create = function (args) {\n    //create\n    var fieldName = getComplexFieldID(args.column.field);\n    return this.parent.createElement('input', {\n      className: 'e-field',\n      attrs: {\n        id: this.parent.element.id + fieldName,\n        name: fieldName,\n        type: 'text',\n        'e-mappinguid': args.column.uid\n      }\n    });\n  };\n\n  ComboboxEditCell.prototype.write = function (args) {\n    this.column = args.column;\n    var isInlineMode = this.parent.editSettings.mode !== 'Dialog';\n    this.obj = new ComboBox(extend({\n      dataSource: this.parent.dataSource instanceof DataManager ? this.parent.dataSource : new DataManager(this.parent.dataSource),\n      query: new Query().select(args.column.field),\n      fields: {\n        value: args.column.field\n      },\n      value: getObject(args.column.field, args.rowData),\n      enableRtl: this.parent.enableRtl,\n      actionComplete: this.finalValue.bind(this),\n      placeholder: isInlineMode ? '' : args.column.headerText,\n      floatLabelType: isInlineMode ? 'Never' : 'Always',\n      enabled: isEditable(args.column, args.requestType, args.element)\n    }, args.column.edit.params));\n    this.obj.appendTo(args.element);\n  };\n\n  ComboboxEditCell.prototype.read = function (inputEle) {\n    return inputEle.ej2_instances[0].value;\n  };\n\n  ComboboxEditCell.prototype.finalValue = function (val) {\n    val.result = DataUtil.distinct(val.result, this.obj.fields.value, true);\n\n    if (this.column.dataSource) {\n      this.column.dataSource.dataSource.json = val.result;\n    }\n  };\n\n  ComboboxEditCell.prototype.destroy = function () {\n    if (this.obj) {\n      this.obj.destroy();\n    }\n  };\n\n  return ComboboxEditCell;\n}();\n\nexport { ComboboxEditCell };","map":{"version":3,"sources":["C:/CN2/workspace-trunk/kain-front-end/node_modules/@syncfusion/ej2-grids/src/grid/renderer/combobox-edit-cell.js"],"names":["extend","ComboBox","Query","DataManager","DataUtil","isEditable","getComplexFieldID","getObject","ComboboxEditCell","parentObject","parent","prototype","create","args","fieldName","column","field","createElement","className","attrs","id","element","name","type","uid","write","isInlineMode","editSettings","mode","obj","dataSource","query","select","fields","value","rowData","enableRtl","actionComplete","finalValue","bind","placeholder","headerText","floatLabelType","enabled","requestType","edit","params","appendTo","read","inputEle","ej2_instances","val","result","distinct","json","destroy"],"mappings":"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","sourcesContent":["import { extend } from '@syncfusion/ej2-base';\nimport { ComboBox } from '@syncfusion/ej2-dropdowns';\nimport { Query, DataManager, DataUtil } from '@syncfusion/ej2-data';\nimport { isEditable, getComplexFieldID, getObject } from '../base/util';\n/**\n * `ComboBoxEditCell` is used to handle ComboBoxEdit cell type editing.\n * @hidden\n */\nvar ComboboxEditCell = /** @class */ (function () {\n    function ComboboxEditCell(parentObject) {\n        //constructor\n        this.parent = parentObject;\n    }\n    ComboboxEditCell.prototype.create = function (args) {\n        //create\n        var fieldName = getComplexFieldID(args.column.field);\n        return this.parent.createElement('input', {\n            className: 'e-field', attrs: {\n                id: this.parent.element.id + fieldName,\n                name: fieldName, type: 'text', 'e-mappinguid': args.column.uid,\n            }\n        });\n    };\n    ComboboxEditCell.prototype.write = function (args) {\n        this.column = args.column;\n        var isInlineMode = this.parent.editSettings.mode !== 'Dialog';\n        this.obj = new ComboBox(extend({\n            dataSource: this.parent.dataSource instanceof DataManager ?\n                this.parent.dataSource : new DataManager(this.parent.dataSource),\n            query: new Query().select(args.column.field),\n            fields: { value: args.column.field },\n            value: getObject(args.column.field, args.rowData),\n            enableRtl: this.parent.enableRtl, actionComplete: this.finalValue.bind(this),\n            placeholder: isInlineMode ? '' : args.column.headerText,\n            floatLabelType: isInlineMode ? 'Never' : 'Always',\n            enabled: isEditable(args.column, args.requestType, args.element),\n        }, args.column.edit.params));\n        this.obj.appendTo(args.element);\n    };\n    ComboboxEditCell.prototype.read = function (inputEle) {\n        return inputEle.ej2_instances[0].value;\n    };\n    ComboboxEditCell.prototype.finalValue = function (val) {\n        val.result = DataUtil.distinct(val.result, this.obj.fields.value, true);\n        if (this.column.dataSource) {\n            this.column.dataSource.dataSource.json = val.result;\n        }\n    };\n    ComboboxEditCell.prototype.destroy = function () {\n        if (this.obj) {\n            this.obj.destroy();\n        }\n    };\n    return ComboboxEditCell;\n}());\nexport { ComboboxEditCell };\n"]},"metadata":{},"sourceType":"module"}